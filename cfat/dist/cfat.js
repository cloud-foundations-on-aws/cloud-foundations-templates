(()=>{"use strict";const e=require("@aws-sdk/client-sts"),t=require("@aws-sdk/client-organizations"),n=require("@aws-sdk/client-iam"),o=require("@aws-sdk/client-cloudformation"),i=require("@aws-sdk/client-sso-admin"),a=require("@aws-sdk/client-ec2"),s=require("@aws-sdk/client-cloudtrail"),r=require("@aws-sdk/client-config-service"),c=require("@aws-sdk/client-controltower"),l=require("@aws-sdk/client-cost-and-usage-report-service"),d=require("node:console"),u=require("node:stream"),g=require("fs"),m=new u.Transform({transform(e,t,n){n(null,e)}}),p=new d.Console({stdout:m}),f=require("path"),A=require("archiver");(async()=>{let d={},u=[];const S=process.env.AWS_REGION||"us-east-1",h=await async function(){const e=new a.EC2Client({region:"us-east-1"});try{const t=new a.DescribeRegionsCommand({}),n=await e.send(t),o=[];for(const e of n.Regions||[])o.push(e.RegionName||"");return o}catch(e){return console.error("Error retrieving regions:",e),[]}finally{e.destroy()}}();console.log("discovering your AWS environment...");const y=await(async n=>{const o=new t.OrganizationsClient({region:n});let i=!1,a=!1;try{const s=await async function(t){const n=new e.STSClient({region:t});try{const t=new e.GetCallerIdentityCommand({});return(await n.send(t)).Account}catch(e){throw console.error("Error getting account ID:",e),e}}(n);if(s){const e=new t.DescribeOrganizationCommand({}),n=await o.send(e);if(n.Organization?.MasterAccountId){const e=n.Organization?.MasterAccountId;e==s?(a=!0,i=!0):i=!0}else i=!1}}catch(e){console.error("Error:",e)}finally{o.destroy()}return{isInOrganization:i,isManagementAccount:a}})(S);let w,v,C=!1,z=!1,b=!1,O=!1,k=!1,E=!1,W=!1,I=!1,$=!0,D=!1,T=!1,L=!1,N=!1,R=!1,P=!1,M=!1,U=!1,F=!1,G=!1,q=!1,V=!1,K=!1,B=!1,_=!1,Z=!1,x=!1,Y=!1,H=!0,j=!1;y&&(d.organizationDeploy=y.isInOrganization,d.managementAccount=y.isManagementAccount,void 0===y.isManagementAccount&&(y.isManagementAccount=!1,console.log("AWS account is not the Management Account of an AWS Organization")),H=y.isManagementAccount),console.log("discovering IAM Users...");const J=await(async()=>{const e=new n.IAMClient({region:"us-east-1"}),t=[];try{const o=new n.ListUsersCommand({}),i=await e.send(o);for(const o of i.Users||[]){const i=o.UserName||"",a=new n.ListAccessKeysCommand({UserName:i}),s=(await e.send(a)).AccessKeyMetadata||[];if(s.length>0)for(const o of s){const a=o.AccessKeyId||"",s=new n.GetAccessKeyLastUsedCommand({AccessKeyId:a}),r=await e.send(s),c={userName:i,accessKeyId:a,lastUsed:r&&r.AccessKeyLastUsed&&`${r.AccessKeyLastUsed.LastUsedDate}`||"Not available"};t.push(c)}else{const e={userName:i};t.push(e)}}}catch(e){console.error("Error:",e)}finally{e.destroy()}return t})();J&&J.length>0?(console.log("IAM Users discovered."),d.iamUserChecks=J):O=!0,console.log("discovering EC2 instances across all AWS Regions...");const Q=await async function(e){let t=[];for(const n of e){const e=new a.EC2Client({region:n}),o=new a.DescribeInstancesCommand({});try{const i=await e.send(o);if(i.Reservations)if(i.Reservations.length>0){const e={region:n,ec2Found:!0};t.push(e)}else{const e={region:n,ec2Found:!1};t.push(e)}else{const e={region:n,ec2Found:!1};t.push(e)}}catch(e){console.log(`Error checking instance: ${e}`)}finally{e.destroy()}}return t}(h);if(Q&&Q.find((e=>!0===e.ec2Found))){d.ec2Checks=Q,console.info("warning: EC2 instances discovered.");for(const e of Q)D=!1}console.log("discovering VPCs across all AWS Regions...");const X=await async function(e){let t=[];for(const n of e){const e=new a.EC2Client({region:n}),o=new a.DescribeVpcsCommand({});try{const i=await e.send(o);if(i.Vpcs)if(i.Vpcs.length>0){const e={region:n,vpcFound:!0};t.push(e)}else{const e={region:n,vpcFound:!1};t.push(e)}else{const e={region:n,vpcFound:!1};t.push(e)}}catch(e){console.log(`Error: ${e}`)}finally{e.destroy()}}return t}(h);if(d.vpcChecks=X,X&&X.length>0&&($=!1,console.log("warning: VPCs discovered.")),console.log("discovering AWS Config configurations across all AWS Regions..."),d.cloudTrailDetails=await async function(e){let t=[];for(const n of e){const e=new s.CloudTrailClient({region:n}),o=new s.DescribeTrailsCommand({});try{const i=await e.send(o);if(i.trailList)for(const e of i.trailList){let o={};o=e.HomeRegion==n?{region:n,trailFound:!0,isOrgTrail:e.IsMultiRegionTrail,isMultiRegion:e.IsMultiRegionTrail}:{region:n,trailFound:!1},t.push(o)}}catch(e){console.log(`Error checking instance: ${e}`)}finally{e.destroy()}}return t}(h),d.configDetails=await async function(e){let t=[];for(const n of e){const e=new r.ConfigServiceClient({region:n});let o={region:n,configRecorderFound:!1,configDeliveryChannelFound:!1};try{const n=await e.send(new r.DescribeConfigurationRecorderStatusCommand({}));0!==n.ConfigurationRecordersStatus?.length&&(o.configRecorderFound=!0);const i=await e.send(new r.DescribeDeliveryChannelsCommand({}));0!==i.DeliveryChannels?.length&&(o.configDeliveryChannelFound=!0),t.push(o)}catch(e){console.error(`Error checking AWS Config in ${n}:`,e)}finally{e.destroy()}}return t}(h),d.configDetails&&d.configDetails.find((e=>!0===e.configRecorderFound)))for(const e of d.configDetails)e.configRecorderFound&&(T=!0),e.configDeliveryChannelFound&&(L=!0);if(y.isInOrganization&&y.isManagementAccount){console.log("collecting general AWS Organization details...");const e=await async function(e){const n=new t.OrganizationsClient({region:e});let o={};try{const e=new t.DescribeOrganizationCommand({}),i=await n.send(e);i.Organization&&(o.id=i.Organization.Id??"",o.arn=i.Organization.Arn??"");const a=new t.ListRootsCommand({}),s=await n.send(a);s.Roots?o.rootOuId=s.Roots[0].Id:console.log("No info found for your AWS Organization.")}catch(e){console.error(`An error occurred: ${e}`)}finally{return n.destroy(),o}}("us-east-1");console.log("collecting CUR details...");const n=await(async e=>{const t=new l.CostAndUsageReportServiceClient({region:e});let n=!1;try{const e={},o=new l.DescribeReportDefinitionsCommand(e),i=await t.send(o);return i.ReportDefinitions&&i.ReportDefinitions.length>0&&(n=!0),{isLegacyCurSetup:n}}catch(e){return console.error(`Error: ${e}`),n=!1,{isLegacyCurSetup:n}}finally{t.destroy()}})("us-east-1");console.log("collecting AWS Organization Policy details...");const a=await async function(e){const n=new t.OrganizationsClient({region:e});let o={scpEnabled:!1,tagPolicyEnabled:!1,backupPolicyEnabled:!1};try{const e={},i=new t.ListRootsCommand(e),a=await n.send(i);if(a.Roots&&a.Roots[0].PolicyTypes)for(const e of a.Roots[0].PolicyTypes)"SERVICE_CONTROL_POLICY"==e.Type&&"ENABLED"==e.Status&&(o.scpEnabled=!0),"TAG_POLICY"==e.Type&&"ENABLED"==e.Status&&(o.tagPolicyEnabled=!0),"BACKUP_POLICY"==e.Type&&"ENABLED"==e.Status&&(o.backupPolicyEnabled=!0)}catch(e){console.error(`An error occurred: ${e}`)}finally{return n.destroy(),o}}("us-east-1");console.log("collecting AWS Organization service trusted access details..."),d.orgServices=await async function(e){const n=[],o=new t.OrganizationsClient({region:e});try{const e=new t.ListAWSServiceAccessForOrganizationCommand({}),i=await o.send(e);if(i.EnabledServicePrincipals&&i.EnabledServicePrincipals.length>0){i.EnabledServicePrincipals;for(const e of i.EnabledServicePrincipals){const t={service:e.ServicePrincipal??""};n.push(t)}}}catch(e){console.error("Error checking service access:",e)}finally{return o.destroy(),n}}("us-east-1"),console.log("collecting AWS Organization CloudFormation status details...");const s=await async function(e){let t={status:"disabled"};const n=new o.CloudFormationClient({region:e});try{const e={},i=new o.DescribeOrganizationsAccessCommand(e),a=await n.send(i);t.status=a.Status??"disabled"}catch(e){console.log(`Error: ${e}`)}finally{return n.destroy(),t}}(S);console.log("collecting AWS Control Tower details...");const r=await async function(e){let t={};const n=new c.ControlTowerClient({region:e});try{const e=new c.ListLandingZonesCommand({}),o=await n.send(e);if(o.landingZones&&o.landingZones.length>0){const e={landingZoneIdentifier:o.landingZones[0].arn},n=o.landingZones[0].arn?.toString().split(":")[3]??"";if(n){t.controlTowerRegion=n;const o=new c.ControlTowerClient({region:n}),i=new c.GetLandingZoneCommand(e),a=await o.send(i);a.landingZone&&(t.status=a.landingZone.status,t.latestAvailableVersion=a.landingZone.latestAvailableVersion,t.deployedVersion=a.landingZone.version,t.driftStatus=a.landingZone.driftStatus?.status)}}}catch(t){console.error(`Error checking Control Tower in ${e}:`,t)}finally{n.destroy()}return t}(S);if(d.idcInfo=await async function(e){let t={found:!1};for(const n of e){const e=new i.SSOAdminClient({region:n});try{const o={MaxResults:Number("100")},a=new i.ListInstancesCommand(o),s=await e.send(a);if(s.Instances&&s.Instances.length>0){const e=s.Instances[0];t.found=!0,t.region=n,t.arn=e.InstanceArn,t.id=e.IdentityStoreId;break}}catch(e){console.log(`Error looking for AWS Identity Center details in region ${n}`)}finally{e.destroy()}}return t}(h),console.log("collecting AWS Organization service delegated admin details..."),d.orgDelegatedAdminAccounts=await async function(){let e=[];const n=new t.OrganizationsClient({region:"us-east-1"});let o={};try{const i=new t.ListDelegatedAdministratorsCommand({}),a=await n.send(i);if(a.DelegatedAdministrators)for(const i of a.DelegatedAdministrators){const a={AccountId:i.Id},s=new t.ListDelegatedServicesForAccountCommand(a),r=await n.send(s);r.DelegatedServices&&(o={services:r.DelegatedServices,accountName:i.Name},e.push(o))}}catch(e){console.log("Error looking for delegated services.")}finally{n.destroy()}return e}(),console.log("collecting AWS Organization member account details..."),d.orgMemberAccounts=await async function(){let e=[];const n=new t.OrganizationsClient({region:"us-east-1"});Number("200");try{let o=await n.send(new t.ListAccountsCommand({}));if(o.Accounts&&o.Accounts.length>0){for(const t of o.Accounts){let n={accountName:t.Name,accountEmail:t.Email};e.push(n)}do{if(o.NextToken&&(o=await n.send(new t.ListAccountsCommand({NextToken:o.NextToken})),o.Accounts&&o.Accounts.length>0))for(const t of o.Accounts){let n={accountName:t.Name,accountEmail:t.Email};e.push(n)}}while(o.NextToken)}}catch(e){console.error("Error listing AWS accounts:",e)}finally{n.destroy()}return e}(),d.isLegacyCurSetup=n.isLegacyCurSetup,d.orgArn=e.arn,d.orgId=e.id,d.orgRootOuId=e.rootOuId,d.backupPolicyEnabled=a.backupPolicyEnabled,d.scpEnabled=a.scpEnabled,d.tagPolicyEnabled=a.tagPolicyEnabled,d.orgCloudFormationStatus=s.status,d.controlTowerDeployedVersion=r.deployedVersion,d.controlTowerDriftStatus=r.driftStatus,d.controlTowerLatestAvailableVersion=r.latestAvailableVersion,d.controlTowerRegion=r.controlTowerRegion,d.controlTowerStatus=r.status,d.idcInfo.arn&&(E=!0),d.cloudTrailDetails&&d.cloudTrailDetails.length>0){W=!0;for(const e of d.cloudTrailDetails)e.trailFound&&e.isOrgTrail&&(I=!0)}if(d.orgServices.find((e=>"cloudtrail.amazonaws.com"===e.service))&&(N=!0),d.orgServices.find((e=>"config.amazonaws.com"===e.service))&&(V=!0),a.scpEnabled&&(P=!0),a.tagPolicyEnabled&&(R=!0),a.backupPolicyEnabled&&(M=!0),e.rootOuId&&(console.log("collecting OU and member account details..."),d.orgOuInfo=await async function(e,n){const o=new t.OrganizationsClient({region:e});let i=[];try{const e=new t.ListOrganizationalUnitsForParentCommand({ParentId:n}),a=await o.send(e);if(a.OrganizationalUnits)for(const e of a.OrganizationalUnits){let n={id:e.Id,name:e.Name};const a=await o.send(new t.ListAccountsForParentCommand({ParentId:e.Id}));a.Accounts&&a.Accounts.length>0&&(n.accounts=a.Accounts),i.push(n)}}catch(e){return console.error("Error checking service access:",e),[]}finally{o.destroy()}return i}("us-east-1",e.rootOuId),d.orgOuInfo&&d.orgOuInfo.length>0))for(const e of d.orgOuInfo)"suspended"===e.name?.toLowerCase()&&(v=!0),"transitional"===e.name?.toLowerCase()&&(w=!0),"workloads"===e.name?.toLowerCase()&&(z=!0),"security"===e.name?.toLowerCase()&&(b=!0),"infrastructure"===e.name?.toLowerCase()&&(C=!0);if(d.orgMemberAccounts&&d.orgMemberAccounts.length>0)for(const e of d.orgMemberAccounts)e.accountName&&("log archive"===e.accountName.toLowerCase()&&(x=!0),"audit"===e.accountName.toLowerCase()&&(Y=!0),"security tooling"===e.accountName.toLowerCase()&&(Y=!0));let u=!1,g=!1,m=!1,p=!1,f=!1,A=!1,y=!1,O=!1,$=!1;if(d.orgDelegatedAdminAccounts&&d.orgDelegatedAdminAccounts.length>0)for(const e of d.orgDelegatedAdminAccounts)if(e.services&&e.services.length>0)for(const t of e.services)"securityhub.amazonaws.com"===t.ServicePrincipal&&(g=!0),"guardduty.amazonaws.com"===t.ServicePrincipal&&(m=!0),"sso.amazonaws.com"===t.ServicePrincipal&&(u=!0),"config.amazonaws.com"===t.ServicePrincipal&&(p=!0),"access-analyzer.amazonaws.com"===t.ServicePrincipal&&(f=!0),"storage-lens.s3.amazonaws.com"===t.ServicePrincipal&&(A=!0),"ipam.amazonaws.com"===t.ServicePrincipal&&(y=!0),"account.amazonaws.com"===t.ServicePrincipal&&(O=!0),"backup.amazonaws.com"===t.ServicePrincipal&&($=!0);r.controlTowerRegion&&(B=!0),"DRIFTED"!==r.driftStatus&&(_=!0),r.deployedVersion===r.latestAvailableVersion&&(Z=!0),d.orgServices.find((e=>"member.org.stacksets.cloudformation.amazonaws.com"===e.service))&&(U=!0),d.orgServices.find((e=>"sso.amazonaws.com"===e.service))&&(k=!0),d.orgServices.find((e=>"guardduty.amazonaws.com"===e.service))&&(F=!0),d.orgServices.find((e=>"securityhub.amazonaws.com"===e.service))&&(G=!0),d.orgServices.find((e=>"access-analyzer.amazonaws.com"===e.service))&&(q=!0),d.orgServices.find((e=>"ram.amazonaws.com"===e.service))&&(K=!0),d.orgServices.find((e=>"backup.amazonaws.com"===e.service))&&(j=!0)}else if(y.isInOrganization&&!y.isManagementAccount){const e="\nWARNING: You are running CFAT from an account that is a member of your AWS Organization. Please run the solution from your AWS Management account.";console.warn(e)}else{const e="\nWARNING: You are running CFAT from an account that not part of an AWS Organization. This account will be treated as a standalone account.";console.warn(e)}let ee={check:"AWS Organization created",description:"AWS Organization is enabled.",status:y.isInOrganization?"complete":"incomplete",required:!0,weight:6,loe:1,remediationLink:"https://aws.amazon.com/organizations/getting-started/"};u.push(ee);let te={check:"Management Account created",description:"AWS Management account exists.",status:H?"complete":"incomplete",required:!0,weight:6,loe:1,remediationLink:"https://docs.aws.amazon.com/accounts/latest/reference/manage-acct-creating.html"};u.push(te);const ne={check:"Management Account IAM users removed",description:"IAM Users should not exist in Management Account.",status:O?"complete":"incomplete",required:!1,weight:4,loe:1,remediationLink:"https://docs.aws.amazon.com/IAM/latest/UserGuide/id_users_manage.html#id_users_deleting"};u.push(ne);const oe={check:"Management Account EC2 instances removed",description:"EC2 Instances should not exist in Management Account.",status:D?"complete":"incomplete",required:!1,weight:4,loe:1,remediationLink:"https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/terminating-instances.html"};u.push(oe);const ie={check:"Management Account VPCs removed",description:"Management Account should not have any VPCs.",status:$?"complete":"incomplete",required:!1,weight:4,loe:1,remediationLink:"https://github.com/cloud-foundations-on-aws/cloud-foundations-templates/blob/main/network/network-default-vpc-deletion/README.md"};u.push(ie),d.isLegacyCurSetup;const ae={check:"CloudTrail Trail created",description:"CloudTrail should be enabled within the account.",status:W?"complete":"incomplete",required:!0,weight:6,loe:3,remediationLink:"https://docs.aws.amazon.com/awscloudtrail/latest/userguide/creating-trail-organization.html"};u.push(ae);const se={check:"CloudTrail Organization Service enabled",description:"CloudTrail should be enabled on the Organization.",status:N?"complete":"incomplete",required:!0,weight:6,loe:1,remediationLink:"https://docs.aws.amazon.com/organizations/latest/userguide/services-that-can-integrate-cloudtrail.html"};u.push(se);const re={check:"CloudTrail Org Trail deployed",description:"At least one CloudTrail Organization Trail should be enabled.",status:I?"complete":"incomplete",required:!0,weight:6,loe:1,remediationLink:"https://docs.aws.amazon.com/awscloudtrail/latest/userguide/creating-trail-organization.html"};u.push(re);const ce={check:"Config Recorder in Management Account configured",description:"Config Recorder in the Management Account should be enabled.",status:T?"complete":"incomplete",required:!0,weight:6,loe:2,remediationLink:"https://aws.amazon.com/blogs/mt/managing-aws-organizations-accounts-using-aws-config-and-aws-cloudformation-stacksets/"};u.push(ce);const le={check:"Config Delivery Channel in Management Account configured",description:"Config Delivery Channel in Management Account should be enabled.",status:L?"complete":"incomplete",required:!0,weight:6,loe:2,remediationLink:"https://aws.amazon.com/blogs/mt/managing-aws-organizations-accounts-using-aws-config-and-aws-cloudformation-stacksets/"};u.push(le);u.push({check:"CloudFormation StackSets activated",description:"CloudFormation StackSets should be activated in the CloudFormation console.",status:"incomplete",required:!1,weight:5,loe:1,remediationLink:"https://docs.aws.amazon.com/organizations/latest/userguide/services-that-can-integrate-cloudformation.html#integrate-enable-ta-cloudformation"});const de={check:"GuardDuty Organization service enabled",description:"GuardDuty Organization services should be enabled.",status:F?"complete":"incomplete",required:!1,weight:4,loe:1,remediationLink:"https://docs.aws.amazon.com/organizations/latest/userguide/services-that-can-integrate-guardduty.html#integrate-enable-ta-guardduty"};u.push(de);const ue={check:"RAM Organization service enabled",description:"Resource Access Manager (RAM) trusted access should be enabled in the AWS Organization.",status:K?"complete":"incomplete",required:!1,weight:4,loe:1,remediationLink:"https://docs.aws.amazon.com/organizations/latest/userguide/services-that-can-integrate-ram.html#integrate-enable-ta-ram"};u.push(ue);const ge={check:"Security Hub Organization service enabled",description:"Security Hub trusted access should be enabled in the AWS Organization.",status:G?"complete":"incomplete",required:!1,weight:4,loe:1,remediationLink:"https://docs.aws.amazon.com/organizations/latest/userguide/services-that-can-integrate-securityhub.html#integrate-enable-ta-securityhub"};u.push(ge);const me={check:"IAM Access Analyzer Organization service enabled",description:"IAM Access Analyzer trusted access should be enabled in the AWS Organization.",status:q?"complete":"incomplete",required:!1,weight:4,loe:1,remediationLink:"https://docs.aws.amazon.com/IAM/latest/UserGuide/access-analyzer-getting-started.html#access-analyzer-enabling"};u.push(me);const pe={check:"Config Organization service enabled",description:"AWS Config trusted access should be enabled in the AWS Organization.",status:V?"complete":"incomplete",required:!1,weight:4,loe:1,remediationLink:"https://docs.aws.amazon.com/organizations/latest/userguide/services-that-can-integrate-config.html#integrate-enable-ta-config"};u.push(pe);const fe={check:"CloudFormation Organization service enabled",description:"CloudFormation trusted access should be enabled in the AWS Organization.",status:U?"complete":"incomplete",required:!1,weight:5,loe:1,remediationLink:"https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/stacksets-orgs-activate-trusted-access.html"};u.push(fe);const Ae={check:"Top-level Infrastructure OU deployed",description:"Top-level Infrastructure OU should exist.",status:C?"complete":"incomplete",required:!1,weight:5,loe:2,remediationLink:"https://catalog.workshops.aws/control-tower/en-US/introduction/manage-ou"};u.push(Ae);const Se={check:"Top-level Security OU deployed",description:"Top-level Security OU should exist.",status:b?"complete":"incomplete",required:!0,weight:6,loe:2,remediationLink:"https://catalog.workshops.aws/control-tower/en-US/introduction/manage-ou"};u.push(Se);const he={check:"Top-level Workloads OU deployed",description:"Top-level Workloads OU should exist.",status:z?"complete":"incomplete",required:!1,weight:5,loe:2,remediationLink:"https://catalog.workshops.aws/control-tower/en-US/introduction/manage-ou"};u.push(he);const ye={check:"IAM IdC Organization service enabled",description:"IAM Identity Center trusted access should be enabled in the AWS Organization",status:k?"complete":"incomplete",required:!0,weight:6,loe:1,remediationLink:"https://docs.aws.amazon.com/singlesignon/latest/userguide/get-set-up-for-idc.html"};u.push(ye);const we={check:"IAM IdC configured",description:"IAM Identity Center should be configured.",status:E?"complete":"incomplete",required:!0,weight:6,loe:3,remediationLink:"https://docs.aws.amazon.com/singlesignon/latest/userguide/tutorials.html"};u.push(we);const ve={check:"Service Control Policies enabled",description:"Service Control Policy should be enabled within the AWS Organization.",status:P?"complete":"incomplete",required:!0,weight:6,loe:1,remediationLink:"https://docs.aws.amazon.com/organizations/latest/userguide/orgs_manage_policies_enable-disable.html"};u.push(ve);const Ce={check:"Organization Tag Policy enabled",description:"Tag Policy should be enabled within the AWS Organization.",status:R?"complete":"incomplete",required:!0,weight:6,loe:1,remediationLink:"https://docs.aws.amazon.com/organizations/latest/userguide/orgs_manage_policies_enable-disable.html"};u.push(Ce);const ze={check:"Organization Backup Policy enabled",description:"Backup Policy should be enabled within the AWS Organization.",status:M?"complete":"incomplete",required:!1,weight:5,loe:1,remediationLink:"https://docs.aws.amazon.com/organizations/latest/userguide/orgs_manage_policies_enable-disable.html"};u.push(ze);const be={check:"Control Tower deployed",description:"Control Tower should be deployed.",status:B?"complete":"incomplete",required:!0,weight:6,loe:6,remediationLink:"https://catalog.workshops.aws/control-tower/en-US/prerequisites/deploying"};u.push(be);const Oe={check:"Control Tower latest version",description:"Control Tower should be the latest version.",status:Z?"complete":"incomplete",required:!1,weight:5,loe:2,remediationLink:"https://docs.aws.amazon.com/controltower/latest/userguide/update-controltower.html"};u.push(Oe);const ke={check:"Control Tower not drifted",description:"Control Tower should not be drifted.",status:_?"complete":"incomplete",required:!0,weight:6,loe:2,remediationLink:"https://docs.aws.amazon.com/controltower/latest/userguide/resolve-drift.html"};u.push(ke);const Ee={check:"Log Archive account deployed",description:"Log Archive account should exist.",status:x?"complete":"incomplete",required:!0,weight:6,loe:2,remediationLink:"https://docs.aws.amazon.com/controltower/latest/userguide/getting-started-from-console.html"};u.push(Ee);const We={check:"Audit account deployed",description:"Audit/Security Tooling account should exist.",status:Y?"complete":"incomplete",required:!0,weight:6,loe:2,remediationLink:"https://docs.aws.amazon.com/controltower/latest/userguide/getting-started-from-console.html"};u.push(We),d.cfatChecks=u,console.table(u,["check","status","required","loe"]),console.log("writing assessment summary checks to ./cfat/cfat-checks.csv...");const Ie=function(e){const t=Array.isArray(e)?e:[e],n=t.length>0?Object.keys(t[0]):[],o=[n.join(",")];for(const e of t){const t=n.map((t=>{const n=e[t];return"string"==typeof n?`"${n.replace(/"/g,'""')}"`:n}));o.push(t.join(","))}return o.join("\n")}(u);g.writeFileSync("./cfat-checks.csv",Ie);const $e=await async function(e){let t=[],n="Cloud Foundation Assessment Tool";n+=`\nGenerated on: ${(new Date).toUTCString()} \n\n`;let o=0,i=0,a=0,s="COMPLETE";if(e.cfatChecks&&e.cfatChecks.length>0){n+="\nIncomplete Requirements:";for(const t of e.cfatChecks)a+=t.weight,!0===t.required&&"incomplete"===t.status&&(n+=`\n    INCOMPLETE: ${t.check}`,i+=t.loe,s="INCOMPLETE"),"complete"===t.status&&(o+=t.weight);n+="\n\n====================================\n",n+=`\nFoundation Status: ${s}`,"INCOMPLETE"===s&&(n+=`\nEstimate of Required Level of Effort (LOE): ${i} hours`),n+=`\nCFAT Score: ${o} out of ${a}`,n+="\n\n====================================\n",n+="\nFoundation Checks:\n",e.cfatChecks&&e.cfatChecks.length>0&&(n+=`${r=e.cfatChecks,p.table(r),(m.read()||"").toString()}`)}var r;if(n+="\n\nStart Detailed Report:\n\n",n+="\n*********************************************************",n+="\n                   MANAGEMENT ACCOUNT",n+="\n*********************************************************",n+="\n\nAWS ACCOUNT TYPE\n",n+=`\n  Is in AWS Organization: ${e.organizationDeploy}`,n+=`\n  Assessing AWS Management Account: ${e.managementAccount}`,n+="\n\nIAM USERS CHECK\n",e.iamUserChecks&&e.iamUserChecks.length>0)for(const t of e.iamUserChecks)n+=`\n  IAM User: ${t.userName}`,t.accessKeyId&&(n+=`\n    User API Key ID: ${t.accessKeyId}`),n+="\n";else n+="\n  No IAM Users found.";if(n+="\n\nEC2 INSTANCE CHECK\n",e.ec2Checks&&e.ec2Checks.find((e=>!0===e.ec2Found)))for(const t of e.ec2Checks)t.ec2Found&&(n+=`\n  ${t.region} - found EC2 Instance(s).`);else n+="\n  No EC2 instances found.";if(n+="\n\nVPC CHECK\n",e.vpcChecks&&e.vpcChecks.length>0)for(const t of e.vpcChecks)t.vpcFound&&(n+=`\n  ${t.region} - found VPC(s).`);else n+="\n  No VPCs found.";if(n+="\n\nAWS CONFIG CHECK\n",e.configDetails&&e.configDetails.find((e=>!0===e.configRecorderFound)))for(const t of e.configDetails)t.configRecorderFound&&(n+=`\n  ${t.region} - Config Recorder found`),t.configDeliveryChannelFound&&(n+=`\n  ${t.region} - Config Delivery Channel found`);else n+="\n  No AWS Config resource discovered";n+="\n\nMANAGEMENT ACCOUNT TASKS:";const c="Management Account";if(e.iamUserChecks&&e.iamUserChecks.length>0)for(const o of e.iamUserChecks){let e={title:`Remove IAM user ${o.userName}`,category:c,detail:`Review and determine if IAM user ${o.userName} can be deleted.`};const i=`${e.title} - ${e.category} - ${e.detail}`;if(t.push(e),n+=`\n  ${i}`,o.accessKeyId){let e={title:`Remove IAM user ${o.userName} API key ${o.accessKeyId} `,category:c,detail:`Review and determine if IAM user API key ${o.accessKeyId} for ${o.userName} can be removed.`};n+=`\n  ${e.title} - ${e.category} - ${e.detail}`,t.push(e)}}if(e.ec2Checks&&e.ec2Checks.find((e=>!0===e.ec2Found)))for(const o of e.ec2Checks)if(o.ec2Found&&o.region){let e={title:`Delete EC2 instance in ${o.region}`,category:c,detail:`Delete any unnecessary EC2 instance in ${o.region}`};n+=`\n  ${e.title} - ${e.category} - ${e.detail}`,t.push(e)}if(e.vpcChecks&&e.vpcChecks.length>0)for(const o of e.vpcChecks)if(o.vpcFound&&o.region){let e={title:`Delete VPC in ${o.region}`,category:c,detail:`Delete any unnecessary VPC in ${o.region} to include the default VPC.`};n+=`\n  ${e.title} - ${e.category} - ${e.detail}`,t.push(e)}if(n+="\n\n*********************************************************",n+="\n                    GOVERNANCE",n+="\n*********************************************************",n+="\n\nAWS ORGANIZATION POLICY TYPES\n",n+=`\n  Service Control Policies (SCP) enabled: ${e.scpEnabled}`,n+=`\n  Tag Policies enabled: ${e.tagPolicyEnabled}`,n+=`\n  Backup Policies enabled: ${e.backupPolicyEnabled}`,n+="\n\nAWS ORGANIZATION CLOUDFORMATION\n",n+=`\n  AWS CloudFormation Organization stack sets status : ${e.orgCloudFormationStatus}`,n+="\n\nCLOUDTRAIL CHECK\n",e.cloudTrailDetails&&e.cloudTrailDetails.length>0)for(const t of e.cloudTrailDetails)t.trailFound&&(n+=`\n  CloudTrail found in ${t.region}`,n+=`\n    Is Organization Trail: ${t.isOrgTrail}`,n+=`\n    Is MultiRegion: ${t.isMultiRegion}`,n+="\n");else n+="\n  No AWS CloudTrail resource discovered";n+="\n\nGOVERNANCE SERVICES ENABLED IN AWS ORGANIZATION:\n",e.orgServices?(e.orgServices.find((e=>"cloudtrail.amazonaws.com"===e.service))&&(n+="\n  AWS CloudTrail"),e.orgServices.find((e=>"config.amazonaws.com"===e.service))&&(n+="\n  AWS Config")):n+="\n  No governance service enabled",n+="\n\nGOVERNANCE TASKS:";const l="Governance";if(!e.orgServices||!e.orgServices.find((e=>"cloudtrail.amazonaws.com"===e.service))){const e={title:"Enable AWS CloudTrail",category:l,detail:"Enable AWS CloudTrail in AWS Organization"};t.push(e),n+=`\n  ${e.title} - ${e.category} - ${e.detail}`}if(!e.orgServices||!e.orgServices.find((e=>"config.amazonaws.com"===e.service))){const e={title:"Enable AWS Config",category:l,detail:"Enable AWS Config in AWS Organization"};t.push(e),n+=`\n  ${e.title} - ${e.category} - ${e.detail}`}if(!e.scpEnabled){const e={title:"Enable SCP",category:l,detail:"Enable SCP in AWS Organization"};t.push(e),n+=`\n  ${e.title} - ${e.category} - ${e.detail}`}if(!e.tagPolicyEnabled){let e={title:"Enable Tag Policy",category:l,detail:"Enable Tag Policy in AWS Organization"};t.push(e),n+=`\n  ${e.title} - ${e.category} - ${e.detail}`}if(!e.backupPolicyEnabled){let e={title:"Enable Backup Policy",category:l,detail:"Enable Backup Policy in AWS Organization"};t.push(e),n+=`\n  ${e.title} - ${e.category} - ${e.detail}`}if(n+="\n\n*********************************************************",n+="\n                FINANCIAL MANAGEMENT",n+="\n*********************************************************",n+="\n\nLegacy CUR",n+=`\n  Is legacy CUR setup: ${e.isLegacyCurSetup}`,n+="\n\nCLOUD FINANCIAL MANAGEMENT TASKS:",!e.isLegacyCurSetup){const e={title:"Setup legacy CUR",category:"Cloud Financial Management",detail:"Setup legacy CUR in AWS Organization"};t.push(e),n+=`\n  ${e.title} - ${e.category} - ${e.detail}`}n+="\n\n*********************************************************",n+="\n                MULTI-ACCOUNT STRATEGY",n+="\n*********************************************************",n+="\n\nAWS ORGANIZATION DETAILS\n",n+=`\n  AWS Organization Id: ${e.orgId}`,n+=`\n  AWS Organization ARN: ${e.orgArn}`,n+=`\n  AWS Organization Root OU Id: ${e.orgRootOuId}`,n+="\n\nAWS ORGANIZATION CLOUDFORMATION\n",n+=`\n  AWS CloudFormation Organization stack sets status : ${e.orgCloudFormationStatus}`;let d,u,f=!1,A=!1,S=!1;if(e.orgRootOuId)if(n+="\n\nAWS ORGANIZATION TOP-LEVEL ORGANIZATION UNITS\n",n+="\n  List of Organization's top-level OUs and AWS accounts:",e.orgOuInfo&&e.orgOuInfo.length>0)for(const t of e.orgOuInfo)if("suspended"===t.name?.toLowerCase()&&(u=!0),"transitional"===t.name?.toLowerCase()&&(d=!0),"workloads"===t.name?.toLowerCase()&&(A=!0),"security"===t.name?.toLowerCase()&&(S=!0),"infrastructure"===t.name?.toLowerCase()&&(f=!0),n+=`\n    Organizational Unit: ${t.name}`,n+=`\n      Organizational Unit Id: ${t.id}`,t.accounts&&t.accounts.length>0){n+="\n      AWS Accounts:";for(const e of t.accounts)n+=`\n        ${e.Name}`;n+="\n"}else n+="\n      AWS Accounts: None",n+="\n";else n+="\n  No top level OUs found.";if(n+="\n\nAWS ORGANIZATION MEMBER ACCOUNTS\n",e.orgMemberAccounts&&e.orgMemberAccounts.length>0)for(const t of e.orgMemberAccounts)n+=`\n  Account: ${t.accountName}`,n+=`\n  Account Email: ${t.accountEmail}\n`;else n+="No member accounts found which is amazing as this is running from one.";if(n+="\n\nAWS ORGANIZATION ENABLED SERVICES\n",n+="\n  The following AWS Services are enabled within your AWS Organization:",e.orgServices&&e.orgServices.length>0)for(const t of e.orgServices)n+=`\n    ${t.service}`;else n+="\n    No trusted access enabled in the AWS Organization";let h=!1,y=!1,w=!1,v=!1,C=!1,z=!1,b=!1,O=!1,k=!1;if(n+="\n\nAWS ORGANIZATION INTEGRATED SERVICE REGISTERED DELEGATED ADMINS\n",e.orgDelegatedAdminAccounts&&e.orgDelegatedAdminAccounts.length>0)for(const t of e.orgDelegatedAdminAccounts){if(n+=`\n  Account: ${t.accountName}`,t.services&&t.services.length>0){n+="\n  Delegated Services:";for(const e of t.services)n+=`\n    ${e.ServicePrincipal}`,"securityhub.amazonaws.com"===e.ServicePrincipal&&(y=!0),"guardduty.amazonaws.com"===e.ServicePrincipal&&(w=!0),"sso.amazonaws.com"===e.ServicePrincipal&&(h=!0),"config.amazonaws.com"===e.ServicePrincipal&&(v=!0),"access-analyzer.amazonaws.com"===e.ServicePrincipal&&(C=!0),"storage-lens.s3.amazonaws.com"===e.ServicePrincipal&&(z=!0),"ipam.amazonaws.com"===e.ServicePrincipal&&(b=!0),"account.amazonaws.com"===e.ServicePrincipal&&(O=!0),"backup.amazonaws.com"===e.ServicePrincipal&&(k=!0)}n+="\n "}else n+="\n  No delegated admin accounts in AWS Organization";n+="\n\nMULTI-ACCOUNT STRATEGY TASKS:";let E="Multi-Account Strategy";if(n+=`\n  Review Account Email Addresses - ${E} - Review Account Email Addresses in AWS Organization`,!e.scpEnabled){const e={title:"Enable Service Control Policy",category:E,detail:"Enable Service Control Policy in AWS Organization"};t.push(e),n+=`\n  ${e.title} - ${e.category} - ${e.detail}`}if(!d){const e={title:"Deploy Transitional OU",category:E,detail:"Deploy Transitional OU in AWS Organization"};t.push(e),n+=`\n  ${e.title} - ${e.category} - ${e.detail}`}if(!u){const e={title:"Deploy Suspended OU",category:E,detail:"Deploy Suspended OU in AWS Organization"};t.push(e),n+=`\n  ${e.title} - ${e.category} - ${e.detail}`}if(!A){const e={title:"Deploy Workloads OU",category:E,detail:"Deploy Workloads OU in AWS Organization"};t.push(e),n+=`\n  ${e.title} - ${e.category} - ${e.detail}`}if(!S){const e={title:"Deploy Security OU",category:E,detail:"Deploy Security OU in AWS Organization"};t.push(e),n+=`\n  ${e.title} - ${e.category} - ${e.detail}`}if(!f){const e={title:"Deploy Infrastructure OU",category:E,detail:"Deploy Infrastructure OU in AWS Organization"};t.push(e),n+=`\n  ${e.title} - ${e.category} - ${e.detail}`}n+="\n\n*********************************************************",n+="\n                  LANDING ZONE",n+="\n*********************************************************",n+="\n\nAWS CONTROL TOWER\n",e.controlTowerRegion?(n+=`\n  Control Tower home region: ${e.controlTowerRegion}`,n+=`\n  Control Tower status: ${e.controlTowerStatus}`,n+=`\n  Control Tower Landing Zone version: ${e.controlTowerDeployedVersion}`,n+=`\n  Latest available version: ${e.controlTowerLatestAvailableVersion}`,n+=`\n  Drift Status: ${e.controlTowerDriftStatus}`):n+="\n  AWS Control Tower is not deployed in the AWS Organization",n+="\n\nLANDING ZONE TASKS:";const W="Landing Zone";if(void 0===e.controlTowerRegion){const e={title:"Deploy AWS Control Tower",category:W,detail:"Deploy AWS Control Tower in AWS Organization"};t.push(e),n+=`\n  ${e.title} - ${e.category} - ${e.detail}`}if("DRIFTED"===e.controlTowerDriftStatus){const e={title:"Fix drift in deployed landing zone",category:W,detail:"Fix drift in deployed landing zone"};t.push(e),n+=`\n  ${e.title} - ${e.category} - ${e.detail}`}if(e.controlTowerDeployedVersion!==e.controlTowerLatestAvailableVersion){const o={title:"Update AWS Control Tower to latest version",category:W,detail:`Update AWS Control Tower to version ${e.controlTowerLatestAvailableVersion}`};t.push(o),n+=`\n  ${o.title} - ${o.category} - ${o.detail}`}if(!e.orgServices||!e.orgServices.find((e=>"member.org.stacksets.cloudformation.amazonaws.com"===e.service))){const e={title:"Enable AWS CloudFormation",category:W,detail:"Enable AWS CloudFormation in AWS Organization"};t.push(e),n+=`\n  ${e.title} - ${e.category} - ${e.detail}`}n+="\n\n*********************************************************",n+="\n                    IDENTITY",n+="\n*********************************************************",e.idcInfo?(n+="\n\nAWS IAM IDENTITY CENTER\n",n+=`\n  IdC Region: ${e.idcInfo.region}`,n+=`\n  IdC ARN: ${e.idcInfo.arn}`,n+=`\n  IdC Instance Id: ${e.idcInfo.id}`):n+="\n\nAWS IAM IDENTITY CENTER NOT FOUND\n",n+="\n\nIDENTITY TASKS:";const I="Identity";if(!e.orgServices||!e.orgServices.find((e=>"sso.amazonaws.com"===e.service))){const e={title:"Enable AWS Single Sign-On",category:I,detail:"Enable AWS Single Sign-On in AWS Organization"};t.push(e),n+=`\n  ${e.title} - ${e.category} - ${e.detail}`}if(!h){const e={title:"Delegate administration to AWS IAM Identity Center",category:I,detail:"Delegate administration to AWS IAM Identity Center"};t.push(e),n+=`\n  ${e.title} - ${e.category} - ${e.detail}`}if(!e.scpEnabled){const e={title:"Enable AWS Single Sign-On",category:I,detail:"Enable AWS Single Sign-On in AWS Organization"};t.push(e),n+=`\n  ${e.title} - ${e.category} - ${e.detail}`}n+="\n\n*********************************************************",n+="\n                    SECURITY",n+="\n*********************************************************",n+="\n\nAWS SECURITY SERVICES ENABLED IN AWS ORGANIZATION:\n",e.orgServices&&e.orgServices.find((e=>"guardduty.amazonaws.com"===e.service))&&(n+="\n  AWS GuardDuty"),e.orgServices&&e.orgServices.find((e=>"securityhub.amazonaws.com"===e.service))&&(n+="\n  AWS Security Hub"),e.orgServices&&e.orgServices.find((e=>"access-analyzer.amazonaws.com"===e.service))&&(n+="\n  IAM Access Analyzer"),e.orgServices&&e.orgServices.find((e=>"macie.amazonaws.com"===e.service))&&(n+="\n  Macie"),e.orgServices&&e.orgServices.find((e=>"storage-lens.s3.amazonaws.com"===e.service))&&(n+="\n  Amazon S3 Storage Lens"),e.orgServices&&e.orgServices.find((e=>"inspector2.amazonaws.com"===e.service))&&(n+="\n  Amazon Inspector"),e.orgServices&&e.orgServices.find((e=>"cloudtrail.amazonaws.com"===e.service))&&(n+="\n  AWS CloudTrail"),e.orgServices&&e.orgServices.find((e=>"config.amazonaws.com"===e.service))&&(n+="\n  AWS Config"),n+="\n\nSECURITY TASKS:";const $="Security";if(!e.scpEnabled){const e={title:"Enable AWS Single Sign-On",category:$,detail:"Enable AWS Single Sign-On in AWS Organization"};t.push(e),n+=`\n  ${e.title} - ${e.category} - ${e.detail}`}if(!e.orgServices||!e.orgServices.find((e=>"guardduty.amazonaws.com"===e.service))){const e={title:"Delegate administration to AWS GuardDuty",category:$,detail:"Delegate administration to AWS GuardDuty"};t.push(e),n+=`\n  ${e.title} - ${e.category} - ${e.detail}`}if(!e.orgServices||!e.orgServices.find((e=>"securityhub.amazonaws.com"===e.service))){const e={title:"Delegate administration to AWS Security Hub",category:$,detail:"Delegate administration to AWS Security Hub"};t.push(e),n+=`\n  ${e.title} - ${e.category} - ${e.detail}`}if(!e.orgServices||!e.orgServices.find((e=>"access-analyzer.amazonaws.com"===e.service))){const e={title:"Delegate administration to AWS IAM Access Analyzer",category:$,detail:"Delegate administration to AWS IAM Access Analyzer"};t.push(e),n+=`\n  ${e.title} - ${e.category} - ${e.detail}`}if(!e.orgServices||!e.orgServices.find((e=>"cloudtrail.amazonaws.com"===e.service))){const e={title:"Delegate administration to AWS CloudTrail",category:$,detail:"Delegate administration to AWS CloudTrail"};t.push(e),n+=`\n  ${e.title} - ${e.category} - ${e.detail}`}if(!e.orgServices||!e.orgServices.find((e=>"config.amazonaws.com"===e.service))){const e={title:"Delegate administration to AWS Config",category:$,detail:"Delegate administration to AWS Config"};t.push(e),n+=`\n  ${e.title} - ${e.category} - ${e.detail}`}if(!y){const e={title:"Delegate administration of AWS Security Hub",category:$,detail:"Delegate administration to AWS Security Hub"};t.push(e),n+=`\n  ${e.title} - ${e.category} - ${e.detail}`}if(!w){const e={title:"Delegate administration of AWS GuardDuty",category:$,detail:"Delegate administration to AWS GuardDuty"};t.push(e),n+=`\n  ${e.title} - ${e.category} - ${e.detail}`}if(!v){const e={title:"Delegate administration of AWS Config",category:$,detail:"Delegate administration to AWS Config"};t.push(e),n+=`\n  ${e.title} - ${e.category} - ${e.detail}`}if(!C){const e={title:"Delegate administration of AWS IAM Access Analyzer",category:$,detail:"Delegate administration to AWS IAM Access Analyzer"};t.push(e),n+=`\n  ${e.title} - ${e.category} - ${e.detail}`}if(!z){const e={title:"Delegate administration of Amazon S3 Storage Lens",category:$,detail:"Delegate administration to Amazon S3 Storage Lens"};t.push(e),n+=`\n  ${e.title} - ${e.category} - ${e.detail}`}n+="\n\n*********************************************************",n+="\n                    NETWORK",n+="\n*********************************************************",n+="\n\nNETWORK TASKS:";const D="Network";if(!e.orgServices||!e.orgServices.find((e=>"guardduty.amazonaws.com"===e.service))){const e={title:"Enable AWS GuardDuty",category:D,detail:"Enable AWS GuardDuty in AWS Organization"};t.push(e),n+=`\n  ${e.title} - ${e.category} - ${e.detail}`}if(!e.orgServices||!e.orgServices.find((e=>"ipam.amazonaws.com"===e.service))){const e={title:"Enable AWS IPAM",category:D,detail:"Enable AWS IPAM in AWS Organization"};t.push(e),n+=`\n  ${e.title} - ${e.category} - ${e.detail}`}if(!e.orgServices||!e.orgServices.find((e=>"ram.amazonaws.com"===e.service))){const e={title:"Enable AWS Resource Access Manager",category:D,detail:"Enable AWS Resource Access Manager in AWS Organization"};t.push(e),n+=`\n  ${e.title} - ${e.category} - ${e.detail}`}if(!b){const e={title:"Delegate administration of AWS IPAM",category:D,detail:"Delegate administration to AWS IPAM"};t.push(e),n+=`\n  ${e.title} - ${e.category} - ${e.detail}`}if(!e.scpEnabled){const e={title:"Enable AWS Service Control Policy",category:D,detail:"Enable AWS Service Control Policy in AWS Organization"};t.push(e),n+=`\n  ${e.title} - ${e.category} - ${e.detail}`}n+="\n\n*********************************************************",n+="\n                  OBSERVABILITY",n+="\n*********************************************************",n+="\n\nOBSERVABILITY TASKS:";const T="Observability";if(!e.orgServices||!e.orgServices.find((e=>"account.amazonaws.com"===e.service))){const e={title:"Enable AWS Account",category:T,detail:"Enable AWS Account in AWS Organization"};t.push(e),n+=`\n  ${e.title} - ${e.category} - ${e.detail}`}if(!O){const e={title:"Delegate administration of AWS Account",category:T,detail:"Delegate administration to AWS Account"};t.push(e),n+=`\n  ${e.title} - ${e.category} - ${e.detail}`}n+="\n\n*********************************************************",n+="\n               BACKUP AND RECOVERY",n+="\n*********************************************************",n+="\n\nBACKUP AND RECOVERY TASKS:";const L="Backup and Recovery";if(!e.orgServices||!e.orgServices.find((e=>"backup.amazonaws.com"===e.service))){const e={title:"Enable AWS Backup",category:L,detail:"Enable AWS Backup in AWS Organization"};t.push(e),n+=`\n  ${e.title} - ${e.category} - ${e.detail}`}if(!k){const e={title:"Delegate administration of AWS Backup",category:L,detail:"Delegate administration to AWS Backup"};t.push(e),n+=`\n  ${e.title} - ${e.category} - ${e.detail}`}if(!e.backupPolicyEnabled){const e={title:"Enable AWS Backup Policy",category:L,detail:"Enable AWS Backup Policy in AWS Organization"};t.push(e),n+=`\n  ${e.title} - ${e.category} - ${e.detail}`}if(!e.scpEnabled){const e={title:"Enable AWS Service Control Policy",category:L,detail:"Enable AWS Service Control Policy in AWS Organization"};t.push(e),n+=`\n  ${e.title} - ${e.category} - ${e.detail}`}return n+="\n\n\n  END REVIEW",console.log("compiling report..."),console.log("saving report to ./cfat/cfat.txt..."),g.appendFileSync("./cfat.txt",n),t}(d);await async function(e){let t=[];if(e.iamUserChecks&&e.iamUserChecks.length>0)for(const n of e.iamUserChecks){let e={title:`Remove IAM user ${n.userName}`,detail:`Review and determine if IAM user ${n.userName} can be deleted.`,remediationLink:""};if(t.push(e),n.accessKeyId){let e={title:`Remove IAM user ${n.userName} API key ${n.accessKeyId} `,detail:`Review and determine if IAM user API key ${n.accessKeyId} for ${n.userName} can be removed.`,remediationLink:"https://docs.aws.amazon.com/IAM/latest/UserGuide/id_users_manage.html#id_users_deleting"};t.push(e)}}if(e.ec2Checks&&e.ec2Checks.find((e=>!0===e.ec2Found)))for(const n of e.ec2Checks)if(n.ec2Found&&n.region){let e={title:`Delete EC2 instance in ${n.region}`,detail:`Delete any unnecessary EC2 instance in ${n.region}`,remediationLink:"https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/terminating-instances.html"};t.push(e)}if(e.vpcChecks&&e.vpcChecks.length>0)for(const n of e.vpcChecks)if(n.vpcFound&&n.region){let e={title:`Delete VPC in ${n.region}`,detail:`Delete any unnecessary VPC in ${n.region} to include the default VPC.`,remediationLink:"https://github.com/cloud-foundations-on-aws/cloud-foundations-templates/blob/main/network/network-default-vpc-deletion/README.md"};t.push(e)}if(!e.scpEnabled){const e={title:"Enable SCP",detail:"Enable SCP in AWS Organization",remediationLink:"https://docs.aws.amazon.com/organizations/latest/userguide/orgs_manage_policies_enable-disable.html"};t.push(e)}if(!e.tagPolicyEnabled){let e={title:"Enable Tag Policy",detail:"Enable Tag Policy in AWS Organization",remediationLink:"https://docs.aws.amazon.com/organizations/latest/userguide/orgs_manage_policies_enable-disable.html"};t.push(e)}if(!e.backupPolicyEnabled){let e={title:"Enable Backup Policy",detail:"Enable Backup Policy in AWS Organization",remediationLink:"https://docs.aws.amazon.com/organizations/latest/userguide/orgs_manage_policies_enable-disable.html"};t.push(e)}if(!e.isLegacyCurSetup){const e={title:"Setup legacy CUR",detail:"Setup legacy CUR in AWS Organization",remediationLink:"https://docs.aws.amazon.com/cur/latest/userguide/dataexports-create-legacy.html"};t.push(e)}let n,o,i=!1,a=!1,s=!1;if(e.orgRootOuId&&e.orgOuInfo&&e.orgOuInfo.length>0)for(const t of e.orgOuInfo)"suspended"===t.name?.toLowerCase()&&(o=!0),"transitional"===t.name?.toLowerCase()&&(n=!0),"workloads"===t.name?.toLowerCase()&&(a=!0),"security"===t.name?.toLowerCase()&&(s=!0),"infrastructure"===t.name?.toLowerCase()&&(i=!0);let r=!1,c=!1,l=!1,d=!1,u=!1,g=!1,m=!1,p=!1,f=!1;if(e.orgDelegatedAdminAccounts&&e.orgDelegatedAdminAccounts.length>0)for(const t of e.orgDelegatedAdminAccounts)if(t.services&&t.services.length>0)for(const e of t.services)"securityhub.amazonaws.com"===e.ServicePrincipal&&(c=!0),"guardduty.amazonaws.com"===e.ServicePrincipal&&(l=!0),"sso.amazonaws.com"===e.ServicePrincipal&&(r=!0),"config.amazonaws.com"===e.ServicePrincipal&&(d=!0),"access-analyzer.amazonaws.com"===e.ServicePrincipal&&(u=!0),"storage-lens.s3.amazonaws.com"===e.ServicePrincipal&&(g=!0),"ipam.amazonaws.com"===e.ServicePrincipal&&(m=!0),"account.amazonaws.com"===e.ServicePrincipal&&(p=!0),"backup.amazonaws.com"===e.ServicePrincipal&&(f=!0);if(t.push({title:"Review account email addresses",detail:"Review Account Email Addresses in AWS Organization",remediationLink:"https://docs.aws.amazon.com/IAM/latest/UserGuide/root-user-best-practices.html#ru-bp-group"}),!n){const e={title:"Deploy Transitional OU",detail:"Deploy Transitional OU in AWS Organization",remediationLink:"https://docs.aws.amazon.com/whitepapers/latest/organizing-your-aws-environment/transitional-ou.html"};t.push(e)}if(!o){const e={title:"Deploy Suspended OU",detail:"Deploy Suspended OU in AWS Organization",remediationLink:"https://docs.aws.amazon.com/whitepapers/latest/organizing-your-aws-environment/suspended-ou.html"};t.push(e)}if(!a){const e={title:"Deploy Workloads OU",detail:"Deploy Workloads OU in AWS Organization",remediationLink:"https://docs.aws.amazon.com/whitepapers/latest/organizing-your-aws-environment/workloads-ou.html"};t.push(e)}if(!s){const e={title:"Deploy Security OU",detail:"Deploy Security OU in AWS Organization",remediationLink:"https://docs.aws.amazon.com/whitepapers/latest/organizing-your-aws-environment/security-ou-and-accounts.html"};t.push(e)}if(!i){const e={title:"Deploy Infrastructure OU",detail:"Deploy Infrastructure OU in AWS Organization",remediationLink:"https://docs.aws.amazon.com/whitepapers/latest/organizing-your-aws-environment/infrastructure-ou-and-accounts.html"};t.push(e)}if(void 0===e.controlTowerRegion){const e={title:"Deploy AWS Control Tower",detail:"Deploy AWS Control Tower in AWS Organization",remediationLink:"https://catalog.workshops.aws/control-tower/en-US/prerequisites/deploying"};t.push(e)}if("DRIFTED"===e.controlTowerDriftStatus){const e={title:"Fix drift in deployed landing zone",detail:"Fix drift in deployed landing zone",remediationLink:""};t.push(e)}if(e.controlTowerDeployedVersion!==e.controlTowerLatestAvailableVersion){const n={title:"Update AWS Control Tower to latest version",detail:`Update AWS Control Tower to version ${e.controlTowerLatestAvailableVersion}`,remediationLink:"https://docs.aws.amazon.com/controltower/latest/userguide/update-controltower.html"};t.push(n)}if(!e.orgServices||!e.orgServices.find((e=>"cloudtrail.amazonaws.com"===e.service))){const e={title:"Enable AWS CloudTrail",detail:"Enable AWS CloudTrail in AWS Organization",remediationLink:"https://docs.aws.amazon.com/controltower/latest/userguide/resolve-drift.html"};t.push(e)}if(!g){const e={title:"Delegate administration of Amazon S3 Storage Lens",detail:"Delegate administration to Amazon S3 Storage Lens",remediationLink:""};t.push(e)}if(!e.orgServices||!e.orgServices.find((e=>"member.org.stacksets.cloudformation.amazonaws.com"===e.service))){const e={title:"Enable AWS CloudFormation",detail:"Enable AWS CloudFormation in AWS Organization",remediationLink:"https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/stacksets-orgs-activate-trusted-access.html"};t.push(e)}if(!e.orgServices||!e.orgServices.find((e=>"sso.amazonaws.com"===e.service))){const e={title:"Enable AWS Single Sign-On",detail:"Enable AWS Single Sign-On in AWS Organization",remediationLink:"https://docs.aws.amazon.com/singlesignon/latest/userguide/get-set-up-for-idc.html"};t.push(e)}if(!r){const e={title:"Delegate administration to AWS IAM Identity Center",detail:"Delegate administration to AWS IAM Identity Center",remediationLink:""};t.push(e)}if(!e.orgServices||!e.orgServices.find((e=>"securityhub.amazonaws.com"===e.service))){const e={title:"Delegate administration to AWS Security Hub",detail:"Delegate administration to AWS Security Hub",remediationLink:"https://docs.aws.amazon.com/organizations/latest/userguide/services-that-can-integrate-securityhub.html#integrate-enable-ta-securityhub"};t.push(e)}if(!c){const e={title:"Delegate administration of AWS Security Hub",detail:"Delegate administration to AWS Security Hub",remediationLink:""};t.push(e)}if(!e.orgServices||!e.orgServices.find((e=>"access-analyzer.amazonaws.com"===e.service))){const e={title:"Delegate administration to AWS IAM Access Analyzer",detail:"Delegate administration to AWS IAM Access Analyzer",remediationLink:"https://docs.aws.amazon.com/IAM/latest/UserGuide/access-analyzer-getting-started.html#access-analyzer-enabling"};t.push(e)}if(!u){const e={title:"Delegate administration of AWS IAM Access Analyzer",detail:"Delegate administration to AWS IAM Access Analyzer",remediationLink:""};t.push(e)}if(!e.orgServices||!e.orgServices.find((e=>"guardduty.amazonaws.com"===e.service))){const e={title:"Enable AWS GuardDuty",detail:"Enable AWS GuardDuty in AWS Organization",remediationLink:"https://docs.aws.amazon.com/organizations/latest/userguide/services-that-can-integrate-guardduty.html#integrate-enable-ta-guardduty"};t.push(e)}if(!l){const e={title:"Delegate administration of AWS GuardDuty",detail:"Delegate administration to AWS GuardDuty",remediationLink:""};t.push(e)}if(!e.orgServices||!e.orgServices.find((e=>"config.amazonaws.com"===e.service))){const e={title:"Enable AWS Config",detail:"Enable AWS Config in AWS Organization",remediationLink:"https://docs.aws.amazon.com/organizations/latest/userguide/services-that-can-integrate-config.html#integrate-enable-ta-config"};t.push(e)}if(!d){const e={title:"Delegate administration of AWS Config",detail:"Delegate administration to AWS Config",remediationLink:""};t.push(e)}if(!e.orgServices||!e.orgServices.find((e=>"ram.amazonaws.com"===e.service))){const e={title:"Enable AWS Resource Access Manager",detail:"Enable AWS Resource Access Manager in AWS Organization",remediationLink:"https://docs.aws.amazon.com/organizations/latest/userguide/services-that-can-integrate-ram.html#integrate-enable-ta-ram"};t.push(e)}if(!e.orgServices||!e.orgServices.find((e=>"ipam.amazonaws.com"===e.service))){const e={title:"Enable AWS IPAM",detail:"Enable AWS IPAM in AWS Organization",remediationLink:""};t.push(e)}if(!m){const e={title:"Delegate administration of AWS IPAM",detail:"Delegate administration to AWS IPAM",remediationLink:""};t.push(e)}if(!e.orgServices||!e.orgServices.find((e=>"account.amazonaws.com"===e.service))){const e={title:"Enable AWS Account",detail:"Enable AWS Account in AWS Organization",remediationLink:""};t.push(e)}if(!p){const e={title:"Delegate administration of AWS Account",detail:"Delegate administration to AWS Account",remediationLink:""};t.push(e)}if(!e.orgServices||!e.orgServices.find((e=>"backup.amazonaws.com"===e.service))){const e={title:"Enable AWS Backup",detail:"Enable AWS Backup in AWS Organization",remediationLink:"https://docs.aws.amazon.com/organizations/latest/userguide/services-that-can-integrate-backup.html#integrate-enable-ta-backup"};t.push(e)}if(!f){const e={title:"Delegate administration of AWS Backup",detail:"Delegate administration to AWS Backup",remediationLink:""};t.push(e)}return t}(d),console.log("cloud foundation assessment complete. Access your report at ./cfat/cfat.txt"),console.log("assessment summary checks written to ./cfat/cfat-checks.csv"),async function(e){let t='"Summary", "Description", "Status" \r\n';for(const n of e)t+=`"cfat - ${n.category} - ${n.title}", "${n.detail}", "Open" \r\n`;g.writeFileSync("./jira-import.csv",t)}($e),await async function(e){let t='"Task", "Status", Description \r\n';for(const n of e)t+=`"cfat - ${n.title}", "${n.detail} - Remediation Link: ${n.remediationLink}", "Not Started" \r\n`;g.writeFileSync("./asana-import.csv",t)}($e),await async function(){try{const e=g.createWriteStream(f.join(process.cwd(),"assessment.zip")),t=A("zip",{zlib:{level:9}});t.pipe(e),t.file(f.join(process.cwd(),"cfat.txt"),{name:"cfat.txt"}),t.file(f.join(process.cwd(),"cfat-checks.csv"),{name:"cfat-checks.csv"}),t.file(f.join(process.cwd(),"asana-import.csv"),{name:"asana-import.csv"}),t.file(f.join(process.cwd(),"jira-import.csv"),{name:"jira-import.csv"}),t.finalize(),console.log("Zip file created successfully!")}catch(e){console.error("Error creating zip file:",e)}}(),console.log("assessment files zipped to ./cfat/assessment.zip")})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,