(()=>{"use strict";const e=require("@aws-sdk/client-sts"),n=require("@aws-sdk/client-organizations"),o=require("@aws-sdk/client-iam"),t=require("@aws-sdk/client-cloudformation"),a=require("@aws-sdk/client-sso-admin"),i=require("@aws-sdk/client-ec2"),s=require("@aws-sdk/client-cloudtrail"),r=require("@aws-sdk/client-config-service"),c=require("@aws-sdk/client-controltower"),l=require("@aws-sdk/client-cost-and-usage-report-service");async function d(e,n,o){return`${n} - Task ${e} - Deploy top-level OU ${o}.`}async function u(e,n,o){return`${n} - Task ${e} - Remove IAM user ${o}`}async function g(e,n,o,t){return`${n} - Task ${e} - Remove IAM user ${o} API key: ${t}`}async function m(e,n,o){return`${n} - Task ${e} - Delete VPC in the ${o} region.`}async function f(e,n,o){return`${n} - Task ${e} - Delete VPC in the ${o} region.`}async function w(e,n,o){return`${n} - Task ${e} - Enable the AWS service ${o} within your AWS Organization`}async function A(e,n,o){return`${n} - Task ${e} - Delegate the AWS service ${o} within your AWS Organization to a member account`}async function p(e,n,o){return`${n} - Task ${e} - Enable the policy type ${o} within your AWS Organization.`}const S=require("node:console"),h=new(require("node:stream").Transform)({transform(e,n,o){o(null,e)}}),C=new S.Console({stdout:h}),v=require("fs");(async()=>{let S={},y=[];const E=process.env.AWS_REGION||"us-east-1",I=await async function(){const e=new i.EC2Client({region:"us-east-1"});try{const n=new i.DescribeRegionsCommand({}),o=await e.send(n),t=[];for(const e of o.Regions||[])t.push(e.RegionName||"");return t}catch(e){return console.error("Error retrieving regions:",e),[]}finally{e.destroy()}}();console.log("discovering your AWS environment...");const T=await(async o=>{const t=new n.OrganizationsClient({region:o});let a=!1,i=!1;try{const s=await async function(n){const o=new e.STSClient({region:n});try{const n=new e.GetCallerIdentityCommand({});return(await o.send(n)).Account}catch(e){throw console.error("Error getting account ID:",e),e}}(o);if(s){const e=new n.DescribeOrganizationCommand({}),o=await t.send(e);if(o.Organization?.MasterAccountId){const e=o.Organization?.MasterAccountId;e==s?(i=!0,a=!0):a=!0}else a=!1}}catch(e){console.error("Error:",e)}finally{t.destroy()}return{isInOrganization:a,isManagementAccount:i}})(E);let O,b,z=!1,k=!1,N=!1,$=!1,R=!1,D=!1,M=!1,W=!1,L=!0,P=!1,U=!1,F=!1,q=!1,G=!1,V=!1,K=!1,Z=!1,B=!1,Y=!1,x=!1,_=!1,H=!1,j=!1,J=!1,Q=!1,X=!1,ee=!1,ne=!0,oe=!1;T&&(S.organizationDeploy=T.isInOrganization,S.managementAccount=T.isManagementAccount,void 0===T.isManagementAccount&&(T.isManagementAccount=!1,console.log("AWS account is not the Management Account of an AWS Organization")),ne=T.isManagementAccount),console.log("discovering IAM Users...");const te=await(async()=>{const e=new o.IAMClient({region:"us-east-1"}),n=[];try{const t=new o.ListUsersCommand({}),a=await e.send(t);for(const t of a.Users||[]){const a=t.UserName||"",i=new o.ListAccessKeysCommand({UserName:a}),s=(await e.send(i)).AccessKeyMetadata||[];if(s.length>0)for(const t of s){const i=t.AccessKeyId||"",s=new o.GetAccessKeyLastUsedCommand({AccessKeyId:i}),r=await e.send(s),c={userName:a,accessKeyId:i,lastUsed:r&&r.AccessKeyLastUsed&&`${r.AccessKeyLastUsed.LastUsedDate}`||"Not available"};n.push(c)}else{const e={userName:a};n.push(e)}}}catch(e){console.error("Error:",e)}finally{e.destroy()}return n})();te&&te.length>0?(console.log("IAM Users discovered."),S.iamUserChecks=te):$=!0,console.log("discovering EC2 instances across all AWS Regions...");const ae=await async function(e){let n=[];for(const o of e){const e=new i.EC2Client({region:o}),t=new i.DescribeInstancesCommand({});try{const a=await e.send(t);if(a.Reservations)if(a.Reservations.length>0){const e={region:o,ec2Found:!0};n.push(e)}else{const e={region:o,ec2Found:!1};n.push(e)}else{const e={region:o,ec2Found:!1};n.push(e)}}catch(e){console.log(`Error checking instance: ${e}`)}finally{e.destroy()}}return n}(I);if(ae&&ae.find((e=>!0===e.ec2Found))){S.ec2Checks=ae,console.info("warning: EC2 instances discovered.");for(const e of ae)P=!1}console.log("discovering VPCs across all AWS Regions...");const ie=await async function(e){let n=[];for(const o of e){const e=new i.EC2Client({region:o}),t=new i.DescribeVpcsCommand({});try{const a=await e.send(t);if(a.Vpcs)if(a.Vpcs.length>0){const e={region:o,vpcFound:!0};n.push(e)}else{const e={region:o,vpcFound:!1};n.push(e)}else{const e={region:o,vpcFound:!1};n.push(e)}}catch(e){console.log(`Error: ${e}`)}finally{e.destroy()}}return n}(I);if(S.vpcChecks=ie,ie&&ie.length>0&&(L=!1,console.log("warning: VPCs discovered.")),console.log("discovering AWS Config configurations across all AWS Regions..."),S.cloudTrailDetails=await async function(e){let n=[];for(const o of e){const e=new s.CloudTrailClient({region:o}),t=new s.DescribeTrailsCommand({});try{const a=await e.send(t);if(a.trailList)for(const e of a.trailList){let t={};t=e.HomeRegion==o?{region:o,trailFound:!0,isOrgTrail:e.IsMultiRegionTrail,isMultiRegion:e.IsMultiRegionTrail}:{region:o,trailFound:!1},n.push(t)}}catch(e){console.log(`Error checking instance: ${e}`)}finally{e.destroy()}}return n}(I),S.configDetails=await async function(e){let n=[];for(const o of e){const e=new r.ConfigServiceClient({region:o});let t={region:o,configRecorderFound:!1,configDeliveryChannelFound:!1};try{const o=await e.send(new r.DescribeConfigurationRecorderStatusCommand({}));0!==o.ConfigurationRecordersStatus?.length&&(t.configRecorderFound=!0);const a=await e.send(new r.DescribeDeliveryChannelsCommand({}));0!==a.DeliveryChannels?.length&&(t.configDeliveryChannelFound=!0),n.push(t)}catch(e){console.error(`Error checking AWS Config in ${o}:`,e)}finally{e.destroy()}}return n}(I),S.configDetails&&S.configDetails.find((e=>!0===e.configRecorderFound)))for(const e of S.configDetails)e.configRecorderFound&&(U=!0),e.configDeliveryChannelFound&&(F=!0);if(T.isInOrganization&&T.isManagementAccount){console.log("collecting general AWS Organization details...");const e=await async function(e){const o=new n.OrganizationsClient({region:e});let t={};try{const e=new n.DescribeOrganizationCommand({}),a=await o.send(e);a.Organization&&(t.id=a.Organization.Id??"",t.arn=a.Organization.Arn??"");const i=new n.ListRootsCommand({}),s=await o.send(i);s.Roots?t.rootOuId=s.Roots[0].Id:console.log("No info found for your AWS Organization.")}catch(e){console.error(`An error occurred: ${e}`)}finally{return o.destroy(),t}}("us-east-1");console.log("collecting CUR details...");const o=await(async e=>{const n=new l.CostAndUsageReportServiceClient({region:e});let o=!1;try{const e={},t=new l.DescribeReportDefinitionsCommand(e),a=await n.send(t);return a.ReportDefinitions&&a.ReportDefinitions.length>0&&(o=!0),{isLegacyCurSetup:o}}catch(e){return console.error(`Error: ${e}`),o=!1,{isLegacyCurSetup:o}}finally{n.destroy()}})("us-east-1");console.log("collecting AWS Organization Policy details...");const i=await async function(e){const o=new n.OrganizationsClient({region:e});let t={scpEnabled:!1,tagPolicyEnabled:!1,backupPolicyEnabled:!1};try{const e={},a=new n.ListRootsCommand(e),i=await o.send(a);if(i.Roots&&i.Roots[0].PolicyTypes)for(const e of i.Roots[0].PolicyTypes)"SERVICE_CONTROL_POLICY"==e.Type&&"ENABLED"==e.Status&&(t.scpEnabled=!0),"TAG_POLICY"==e.Type&&"ENABLED"==e.Status&&(t.tagPolicyEnabled=!0),"BACKUP_POLICY"==e.Type&&"ENABLED"==e.Status&&(t.backupPolicyEnabled=!0)}catch(e){console.error(`An error occurred: ${e}`)}finally{return o.destroy(),t}}("us-east-1");console.log("collecting AWS Organization service trusted access details..."),S.orgServices=await async function(e){const o=[],t=new n.OrganizationsClient({region:e});try{const e=new n.ListAWSServiceAccessForOrganizationCommand({}),a=await t.send(e);if(a.EnabledServicePrincipals&&a.EnabledServicePrincipals.length>0){a.EnabledServicePrincipals;for(const e of a.EnabledServicePrincipals){const n={service:e.ServicePrincipal??""};o.push(n)}}}catch(e){console.error("Error checking service access:",e)}finally{return t.destroy(),o}}("us-east-1"),console.log("collecting AWS Organization CloudFormation status details...");const s=await async function(e){let n={status:"disabled"};const o=new t.CloudFormationClient({region:e});try{const e={},a=new t.DescribeOrganizationsAccessCommand(e),i=await o.send(a);n.status=i.Status??"disabled"}catch(e){console.log(`Error: ${e}`)}finally{return o.destroy(),n}}(E);console.log("collecting AWS Control Tower details...");const r=await async function(e){let n={};const o=new c.ControlTowerClient({region:e});try{const e=new c.ListLandingZonesCommand({}),t=await o.send(e);if(t.landingZones&&t.landingZones.length>0){const e={landingZoneIdentifier:t.landingZones[0].arn},o=t.landingZones[0].arn?.toString().split(":")[3]??"";if(o){n.controlTowerRegion=o;const t=new c.ControlTowerClient({region:o}),a=new c.GetLandingZoneCommand(e),i=await t.send(a);i.landingZone&&(n.status=i.landingZone.status,n.latestAvailableVersion=i.landingZone.latestAvailableVersion,n.deployedVersion=i.landingZone.version,n.driftStatus=i.landingZone.driftStatus?.status)}}}catch(n){console.error(`Error checking Control Tower in ${e}:`,n)}finally{o.destroy()}return n}(E);if(S.idcInfo=await async function(e){let n={found:!1};for(const o of e){const e=new a.SSOAdminClient({region:o});try{const t={MaxResults:Number("100")},i=new a.ListInstancesCommand(t),s=await e.send(i);if(s.Instances&&s.Instances.length>0){const e=s.Instances[0];n.found=!0,n.region=o,n.arn=e.InstanceArn,n.id=e.IdentityStoreId;break}}catch(e){console.log(`Error looking for AWS Identity Center details in region ${o}`)}finally{e.destroy()}}return n}(I),console.log("collecting AWS Organization service delegated admin details..."),S.orgDelegatedAdminAccounts=await async function(){let e=[];const o=new n.OrganizationsClient({region:"us-east-1"});let t={};try{const a=new n.ListDelegatedAdministratorsCommand({}),i=await o.send(a);if(i.DelegatedAdministrators)for(const a of i.DelegatedAdministrators){const i={AccountId:a.Id},s=new n.ListDelegatedServicesForAccountCommand(i),r=await o.send(s);r.DelegatedServices&&(t={services:r.DelegatedServices,accountName:a.Name},e.push(t))}}catch(e){console.log("Error looking for delegated services.")}finally{o.destroy()}return e}(),console.log("collecting AWS Organization member account details..."),S.orgMemberAccounts=await async function(){let e=[];const o=new n.OrganizationsClient({region:"us-east-1"});Number("200");try{let t=await o.send(new n.ListAccountsCommand({}));if(t.Accounts&&t.Accounts.length>0){for(const n of t.Accounts){let o={accountName:n.Name,accountEmail:n.Email};e.push(o)}do{if(t.NextToken&&(t=await o.send(new n.ListAccountsCommand({NextToken:t.NextToken})),t.Accounts&&t.Accounts.length>0))for(const n of t.Accounts){let o={accountName:n.Name,accountEmail:n.Email};e.push(o)}}while(t.NextToken)}}catch(e){console.error("Error listing AWS accounts:",e)}finally{o.destroy()}return e}(),S.isLegacyCurSetup=o.isLegacyCurSetup,S.orgArn=e.arn,S.orgId=e.id,S.orgRootOuId=e.rootOuId,S.backupPolicyEnabled=i.backupPolicyEnabled,S.scpEnabled=i.scpEnabled,S.tagPolicyEnabled=i.tagPolicyEnabled,S.orgCloudFormationStatus=s.status,S.controlTowerDeployedVersion=r.deployedVersion,S.controlTowerDriftStatus=r.driftStatus,S.controlTowerLatestAvailableVersion=r.latestAvailableVersion,S.controlTowerRegion=r.controlTowerRegion,S.controlTowerStatus=r.status,S.idcInfo.arn&&(D=!0),S.cloudTrailDetails&&S.cloudTrailDetails.length>0){M=!0;for(const e of S.cloudTrailDetails)e.trailFound&&e.isOrgTrail&&(W=!0)}if(S.orgServices.find((e=>"cloudtrail.amazonaws.com"===e.service))&&(q=!0),S.orgServices.find((e=>"config.amazonaws.com"===e.service))&&(_=!0),i.scpEnabled&&(V=!0),i.tagPolicyEnabled&&(G=!0),i.backupPolicyEnabled&&(K=!0),e.rootOuId&&(console.log("collecting OU and member account details..."),S.orgOuInfo=await async function(e,o){const t=new n.OrganizationsClient({region:e});let a=[];try{const e=new n.ListOrganizationalUnitsForParentCommand({ParentId:o}),i=await t.send(e);if(i.OrganizationalUnits)for(const e of i.OrganizationalUnits){let o={id:e.Id,name:e.Name};const i=await t.send(new n.ListAccountsForParentCommand({ParentId:e.Id}));i.Accounts&&i.Accounts.length>0&&(o.accounts=i.Accounts),a.push(o)}}catch(e){return console.error("Error checking service access:",e),[]}finally{t.destroy()}return a}("us-east-1",e.rootOuId),S.orgOuInfo&&S.orgOuInfo.length>0))for(const e of S.orgOuInfo)"suspended"===e.name?.toLowerCase()&&(b=!0),"transitional"===e.name?.toLowerCase()&&(O=!0),"workloads"===e.name?.toLowerCase()&&(k=!0),"security"===e.name?.toLowerCase()&&(N=!0),"infrastructure"===e.name?.toLowerCase()&&(z=!0);if(S.orgMemberAccounts&&S.orgMemberAccounts.length>0)for(const e of S.orgMemberAccounts)e.accountName&&("log archive"===e.accountName.toLowerCase()&&(X=!0),"audit"===e.accountName.toLowerCase()&&(ee=!0),"security tooling"===e.accountName.toLowerCase()&&(ee=!0));let d=!1,u=!1,g=!1,m=!1,f=!1,w=!1,A=!1,p=!1,h=!1;if(S.orgDelegatedAdminAccounts&&S.orgDelegatedAdminAccounts.length>0)for(const e of S.orgDelegatedAdminAccounts)if(e.services&&e.services.length>0)for(const n of e.services)"securityhub.amazonaws.com"===n.ServicePrincipal&&(u=!0),"guardduty.amazonaws.com"===n.ServicePrincipal&&(g=!0),"sso.amazonaws.com"===n.ServicePrincipal&&(d=!0),"config.amazonaws.com"===n.ServicePrincipal&&(m=!0),"access-analyzer.amazonaws.com"===n.ServicePrincipal&&(f=!0),"storage-lens.s3.amazonaws.com"===n.ServicePrincipal&&(w=!0),"ipam.amazonaws.com"===n.ServicePrincipal&&(A=!0),"account.amazonaws.com"===n.ServicePrincipal&&(p=!0),"backup.amazonaws.com"===n.ServicePrincipal&&(h=!0);r.controlTowerRegion&&(j=!0),"DRIFTED"!==r.driftStatus&&(J=!0),r.deployedVersion===r.latestAvailableVersion&&(Q=!0),S.orgServices.find((e=>"member.org.stacksets.cloudformation.amazonaws.com"===e.service))&&(Z=!0),S.orgServices.find((e=>"sso.amazonaws.com"===e.service))&&(R=!0),S.orgServices.find((e=>"guardduty.amazonaws.com"===e.service))&&(B=!0),S.orgServices.find((e=>"securityhub.amazonaws.com"===e.service))&&(Y=!0),S.orgServices.find((e=>"access-analyzer.amazonaws.com"===e.service))&&(x=!0),S.orgServices.find((e=>"ram.amazonaws.com"===e.service))&&(H=!0),S.orgServices.find((e=>"backup.amazonaws.com"===e.service))&&(oe=!0)}else if(T.isInOrganization&&!T.isManagementAccount){const e="\nWARNING: You are running CFAT from an account that is a member of your AWS Organization. Please run the solution from your AWS Management account.";console.warn(e)}else{const e="\nWARNING: You are running CFAT from an account that not part of an AWS Organization. This account will be treated as a standalone account.";console.warn(e)}let se={task:"AWS Organization created",description:"AWS Organization is enabled.",status:T.isInOrganization?"complete":"incomplete",required:!0,weight:6,loe:1};y.push(se);let re={task:"Management Account created",description:"AWS Management account exists.",status:ne?"complete":"incomplete",required:!0,weight:6,loe:1};y.push(re);const ce={task:"Management Account IAM Users removed",description:"IAM Users should not exist in Management Account.",status:$?"complete":"incomplete",required:!1,weight:4,loe:1};y.push(ce);const le={task:"Management Account EC2 instances removed",description:"EC2 Instances should not exist in Management Account.",status:P?"complete":"incomplete",required:!1,weight:4,loe:1};y.push(le);const de={task:"Management Account VPCs removed",description:"Management Account should not have any VPCs.",status:L?"complete":"incomplete",required:!1,weight:4,loe:1,remediationLink:"https://github.com/cloud-foundations-on-aws/cloud-foundations-templates/blob/main/network/network-default-vpc-deletion/README.md"};y.push(de);const ue={task:"CloudTrail Trail created",description:"CloudTrail should be enabled within the account.",status:M?"complete":"incomplete",required:!0,weight:6,loe:3,remediationLink:"https://docs.aws.amazon.com/awscloudtrail/latest/userguide/creating-trail-organization.html"};y.push(ue);const ge={task:"CloudTrail Organization Service enabled",description:"CloudTrail should be enabled on the Organization.",status:q?"complete":"incomplete",required:!0,weight:6,loe:1,remediationLink:"https://docs.aws.amazon.com/organizations/latest/userguide/services-that-can-integrate-cloudtrail.html"};y.push(ge);const me={task:"CloudTrail Org Trail deployed",description:"At least one CloudTrail Organization Trail should be enabled.",status:W?"complete":"incomplete",required:!0,weight:6,loe:1,remediationLink:"https://docs.aws.amazon.com/awscloudtrail/latest/userguide/creating-trail-organization.html"};y.push(me);const fe={task:"Config Recorder in Management Account configured",description:"Config Recorder in the Management Account should be enabled.",status:U?"complete":"incomplete",required:!0,weight:6,loe:2,remediationLink:"https://aws.amazon.com/blogs/mt/managing-aws-organizations-accounts-using-aws-config-and-aws-cloudformation-stacksets/"};y.push(fe);const we={task:"Config Delivery Channel in Management Account configured",description:"Config Delivery Channel in Management Account should be enabled.",status:F?"complete":"incomplete",required:!0,weight:6,loe:2,remediationLink:"https://aws.amazon.com/blogs/mt/managing-aws-organizations-accounts-using-aws-config-and-aws-cloudformation-stacksets/"};y.push(we);y.push({task:"CloudFormation StackSets activated",description:"CloudFormation StackSets should be activated in the CloudFormation console.",status:"incomplete",required:!1,weight:5,loe:1,remediationLink:"https://docs.aws.amazon.com/organizations/latest/userguide/services-that-can-integrate-cloudformation.html#integrate-enable-ta-cloudformation"});const Ae={task:"GuardDuty Organization service enabled",description:"GuardDuty Organization services should be enabled.",status:B?"complete":"incomplete",required:!1,weight:4,loe:1};y.push(Ae);const pe={task:"RAM Organization service enabled",description:"Resource Access Manager (RAM) trusted access should be enabled in the AWS Organization.",status:H?"complete":"incomplete",required:!1,weight:4,loe:1};y.push(pe);const Se={task:"Security Hub Organization service enabled",description:"Security Hub trusted access should be enabled in the AWS Organization.",status:Y?"complete":"incomplete",required:!1,weight:4,loe:1};y.push(Se);const he={task:"IAM Access Analyzer Organization service enabled",description:"IAM Access Analyzer trusted access should be enabled in the AWS Organization.",status:x?"complete":"incomplete",required:!1,weight:4,loe:1};y.push(he);const Ce={task:"Config Organization service enabled",description:"AWS Config trusted access should be enabled in the AWS Organization.",status:_?"complete":"incomplete",required:!1,weight:4,loe:1};y.push(Ce);const ve={task:"CloudFormation Organization service enabled",description:"CloudFormation trusted access should be enabled in the AWS Organization.",status:K?"complete":"incomplete",required:!1,weight:5,loe:1,remediationLink:"https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/stacksets-orgs-activate-trusted-access.html"};y.push(ve);const ye={task:"Top-level Infrastructure OU deployed",description:"Top-level Infrastructure OU should exist.",status:z?"complete":"incomplete",required:!1,weight:5,loe:2,remediationLink:"https://catalog.workshops.aws/control-tower/en-US/introduction/manage-ou"};y.push(ye);const Ee={task:"Top-level Security OU deployed",description:"Top-level Security OU should exist.",status:N?"complete":"incomplete",required:!0,weight:6,loe:2,remediationLink:"https://catalog.workshops.aws/control-tower/en-US/introduction/manage-ou"};y.push(Ee);const Ie={task:"Top-level Workloads OU deployed",description:"Top-level Workloads OU should exist.",status:k?"complete":"incomplete",required:!1,weight:5,loe:2,remediationLink:"https://catalog.workshops.aws/control-tower/en-US/introduction/manage-ou"};y.push(Ie);const Te={task:"IAM IdC Organization service enabled",description:"IAM Identity Center trusted access should be enabled in the AWS Organization",status:R?"complete":"incomplete",required:!0,weight:6,loe:1,remediationLink:"https://docs.aws.amazon.com/singlesignon/latest/userguide/get-set-up-for-idc.html"};y.push(Te);const Oe={task:"IAM IdC configured",description:"IAM Identity Center should be configured.",status:D?"complete":"incomplete",required:!0,weight:6,loe:3,remediationLink:"https://docs.aws.amazon.com/singlesignon/latest/userguide/tutorials.html"};y.push(Oe);const be={task:"Service Control Policies Enabled",description:"Service Control Policy should be enabled within the AWS Organization.",status:V?"complete":"incomplete",required:!0,weight:6,loe:1,remediationLink:"https://docs.aws.amazon.com/organizations/latest/userguide/orgs_manage_policies_enable-disable.html"};y.push(be);const ze={task:"Organization Tag Policy Enabled",description:"Tag Policy should be enabled within the AWS Organization.",status:G?"complete":"incomplete",required:!0,weight:6,loe:1,remediationLink:"https://docs.aws.amazon.com/organizations/latest/userguide/orgs_manage_policies_enable-disable.html"};y.push(ze);const ke={task:"Organization Backup Policy Enabled",description:"Backup Policy should be enabled within the AWS Organization.",status:K?"complete":"incomplete",required:!1,weight:5,loe:1,remediationLink:"https://docs.aws.amazon.com/organizations/latest/userguide/orgs_manage_policies_enable-disable.html"};y.push(ke);const Ne={task:"Control Tower Deployed",description:"Control Tower should be deployed.",status:j?"complete":"incomplete",required:!0,weight:6,loe:6,remediationLink:"https://catalog.workshops.aws/control-tower/en-US/prerequisites/deploying"};y.push(Ne);const $e={task:"Control Tower Latest Version",description:"Control Tower should be the latest version.",status:Q?"complete":"incomplete",required:!1,weight:5,loe:2,remediationLink:"https://docs.aws.amazon.com/controltower/latest/userguide/update-controltower.html"};y.push($e);const Re={task:"Control Tower not drifted",description:"Control Tower should not be drifted.",status:J?"complete":"incomplete",required:!0,weight:6,loe:2,remediationLink:"https://docs.aws.amazon.com/controltower/latest/userguide/resolve-drift.html"};y.push(Re);const De={task:"Log Archive account deployed",description:"Log Archive Account should exist.",status:X?"complete":"incomplete",required:!0,weight:6,loe:2};y.push(De);const Me={task:"Audit account deployed",description:"Audit account should exist.",status:ee?"complete":"incomplete",required:!0,weight:6,loe:2};y.push(Me),S.cfatChecks=y,console.table(y,["task","status","required","loe"]),console.log("compiling report...");const We=await async function(e){let n="Cloud Foundation Assessment Tool";n+=`\nGenerated on: ${(new Date).toUTCString()} \n\n`;let o=0,t=0,a=0,i="COMPLETE";if(e.cfatChecks&&e.cfatChecks.length>0){n+="\nIncomplete Requirements:";for(const s of e.cfatChecks)a+=s.weight,!0===s.required&&"incomplete"===s.status&&(n+=`\n    INCOMPLETE: ${s.task}`,t+=s.loe,i="INCOMPLETE"),"complete"===s.status&&(o+=s.weight);n+="\n\n====================================\n",n+=`\nFoundation Status: ${i}`,"INCOMPLETE"===i&&(n+=`\nEstimate of Required Level of Effort (LOE): ${t} hours`),n+=`\nCFAT Score: ${o} out of ${a}`,n+="\n\n====================================\n",n+="\nFoundation Checks:\n",e.cfatChecks&&e.cfatChecks.length>0&&(n+=`${s=e.cfatChecks,C.table(s),(h.read()||"").toString()}`)}var s;if(n+="\n\nStart Detailed Report:\n\n",n+="\n*********************************************************",n+="\n                   MANAGEMENT ACCOUNT",n+="\n*********************************************************",n+="\n\nAWS ACCOUNT TYPE\n",n+=`\n  Is in AWS Organization: ${e.organizationDeploy}`,n+=`\n  Assessing AWS Management Account: ${e.managementAccount}`,n+="\n\nIAM USERS CHECK\n",e.iamUserChecks&&e.iamUserChecks.length>0)for(const o of e.iamUserChecks)n+=`\n  IAM User: ${o.userName}`,o.accessKeyId&&(n+=`\n    User API Key ID: ${o.accessKeyId}`),n+="\n";else n+="\n  No IAM Users found.";if(n+="\n\nEC2 INSTANCE CHECK\n",e.ec2Checks&&e.ec2Checks.find((e=>!0===e.ec2Found)))for(const o of e.ec2Checks)o.ec2Found&&(n+=`\n  ${o.region} - found EC2 Instance(s).`);else n+="\n  No EC2 instances found.";if(n+="\n\nVPC CHECK\n",e.vpcChecks&&e.vpcChecks.length>0)for(const o of e.vpcChecks)o.vpcFound&&(n+=`\n  ${o.region} - found VPC(s).`);else n+="\n  No VPCs found.";if(n+="\n\nAWS CONFIG CHECK\n",e.configDetails&&e.configDetails.find((e=>!0===e.configRecorderFound)))for(const o of e.configDetails)o.configRecorderFound&&(n+=`\n  ${o.region} - Config Recorder found`),o.configDeliveryChannelFound&&(n+=`\n  ${o.region} - Config Delivery Channel found`);else n+="\n  No AWS Config resource discovered";n+="\n\nMANAGEMENT ACCOUNT RECOMMENDED TASKS:";let r=1;const c="Management Account";if(e.iamUserChecks&&e.iamUserChecks.length>0)for(const o of e.iamUserChecks)n+=`\n  ${await u(r,c,o.userName)}`,r++,o.accessKeyId&&(n+=`\n  ${await g(r,c,o.userName,o.accessKeyId)}`,r++);if(e.ec2Checks&&e.ec2Checks.find((e=>!0===e.ec2Found)))for(const o of e.ec2Checks)o.ec2Found&&o.region&&(n+=`\n  ${await f(r,c,o.region)}`,r++);if(e.vpcChecks&&e.vpcChecks.length>0)for(const o of e.vpcChecks)o.vpcFound&&o.region&&(n+=`\n  ${await m(r,c,o.region)}`,r++);if(n+="\n\n*********************************************************",n+="\n                    GOVERNANCE",n+="\n*********************************************************",n+="\n\nAWS ORGANIZATION POLICY TYPES\n",n+=`\n  Service Control Policies (SCP) enabled: ${e.scpEnabled}`,n+=`\n  Tag Policies enabled: ${e.tagPolicyEnabled}`,n+=`\n  Backup Policies enabled: ${e.backupPolicyEnabled}`,n+="\n\nAWS ORGANIZATION CLOUDFORMATION\n",n+=`\n  AWS CloudFormation Organization stack sets status : ${e.orgCloudFormationStatus}`,n+="\n\nCLOUDTRAIL CHECK\n",e.cloudTrailDetails&&e.cloudTrailDetails.length>0)for(const o of e.cloudTrailDetails)o.trailFound&&(n+=`\n  CloudTrail found in ${o.region}`,n+=`\n    Is Organization Trail: ${o.isOrgTrail}`,n+=`\n    Is MultiRegion: ${o.isMultiRegion}`,n+="\n");else n+="\n  No AWS CloudTrail resource discovered";n+="\n\nGOVERNANCE SERVICES ENABLED IN AWS ORGANIZATION:\n",e.orgServices?(e.orgServices.find((e=>"cloudtrail.amazonaws.com"===e.service))&&(n+="\n  AWS CloudTrail"),e.orgServices.find((e=>"config.amazonaws.com"===e.service))&&(n+="\n  AWS Config")):n+="\n  No governance service enabled",n+="\n\nGOVERNANCE RECOMMENDED TASKS:";const l="Governance";let S=1;e.orgServices&&e.orgServices.find((e=>"cloudtrail.amazonaws.com"===e.service))||(n+=`\n  ${await w(S,l,"AWS CloudTrail")}`,S++),e.orgServices&&e.orgServices.find((e=>"config.amazonaws.com"===e.service))||(n+=`\n  ${await w(S,l,"AWS Config")}`,S++),e.scpEnabled||(n+=`\n  ${await p(S,l,"Service Control Policy")}`,S++),e.tagPolicyEnabled||(n+=`\n  ${await p(S,l,"Tag Policy")}`,S++),e.backupPolicyEnabled||(n+=`\n  ${await p(S,l,"Backup Policy")}`,S++),n+="\n\n*********************************************************",n+="\n                FINANCIAL MANAGEMENT",n+="\n*********************************************************",n+="\n\nLegacy CUR",n+=`\n  Is legacy CUR setup: ${e.isLegacyCurSetup}`,n+="\n\nCLOUD FINANCIAL MANAGEMENT RECOMMENDED TASKS:",e.isLegacyCurSetup||(n+=`\n  ${await async function(e,n){return"Cloud Financial Management - Task 1 - Enable and create a Cost and Utilization Report (CUR) in the billing console."}()}`),n+="\n\n*********************************************************",n+="\n                MULTI-ACCOUNT STRATEGY",n+="\n*********************************************************",n+="\n\nAWS ORGANIZATION DETAILS\n",n+=`\n  AWS Organization Id: ${e.orgId}`,n+=`\n  AWS Organization ARN: ${e.orgArn}`,n+=`\n  AWS Organization Root OU Id: ${e.orgRootOuId}`,n+="\n\nAWS ORGANIZATION CLOUDFORMATION\n",n+=`\n  AWS CloudFormation Organization stack sets status : ${e.orgCloudFormationStatus}`;let v,y,E=!1,I=!1,T=!1;if(e.orgRootOuId)if(n+="\n\nAWS ORGANIZATION TOP-LEVEL ORGANIZATION UNITS\n",n+="\n  List of Organization's top-level OUs and AWS accounts:",e.orgOuInfo&&e.orgOuInfo.length>0)for(const o of e.orgOuInfo)if("suspended"===o.name?.toLowerCase()&&(y=!0),"transitional"===o.name?.toLowerCase()&&(v=!0),"workloads"===o.name?.toLowerCase()&&(I=!0),"security"===o.name?.toLowerCase()&&(T=!0),"infrastructure"===o.name?.toLowerCase()&&(E=!0),n+=`\n    Organizational Unit: ${o.name}`,n+=`\n      Organizational Unit Id: ${o.id}`,o.accounts&&o.accounts.length>0){n+="\n      AWS Accounts:";for(const e of o.accounts)n+=`\n        ${e.Name}`;n+="\n"}else n+="\n      AWS Accounts: None",n+="\n";else n+="\n  No top level OUs found.";if(n+="\n\nAWS ORGANIZATION MEMBER ACCOUNTS\n",e.orgMemberAccounts&&e.orgMemberAccounts.length>0)for(const o of e.orgMemberAccounts)n+=`\n  Account: ${o.accountName}`,n+=`\n  Account Email: ${o.accountEmail}\n`;else n+="No member accounts found which is amazing as this is running from one.";if(n+="\n\nAWS ORGANIZATION ENABLED SERVICES\n",n+="\n  The following AWS Services are enabled within your AWS Organization:",e.orgServices&&e.orgServices.length>0)for(const o of e.orgServices)n+=`\n    ${o.service}`;else n+="\n    No trusted access enabled in the AWS Organization";let O=!1,b=!1,z=!1,k=!1,N=!1,$=!1,R=!1,D=!1,M=!1;if(n+="\n\nAWS ORGANIZATION INTEGRATED SERVICE REGISTERED DELEGATED ADMINS\n",e.orgDelegatedAdminAccounts&&e.orgDelegatedAdminAccounts.length>0)for(const o of e.orgDelegatedAdminAccounts){if(n+=`\n  Account: ${o.accountName}`,o.services&&o.services.length>0){n+="\n  Delegated Services:";for(const e of o.services)n+=`\n    ${e.ServicePrincipal}`,"securityhub.amazonaws.com"===e.ServicePrincipal&&(b=!0),"guardduty.amazonaws.com"===e.ServicePrincipal&&(z=!0),"sso.amazonaws.com"===e.ServicePrincipal&&(O=!0),"config.amazonaws.com"===e.ServicePrincipal&&(k=!0),"access-analyzer.amazonaws.com"===e.ServicePrincipal&&(N=!0),"storage-lens.s3.amazonaws.com"===e.ServicePrincipal&&($=!0),"ipam.amazonaws.com"===e.ServicePrincipal&&(R=!0),"account.amazonaws.com"===e.ServicePrincipal&&(D=!0),"backup.amazonaws.com"===e.ServicePrincipal&&(M=!0)}n+="\n "}else n+="\n  No delegated admin accounts in AWS Organization";n+="\n\nMULTI-ACCOUNT STRATEGY RECOMMENDED TASKS:";let W=1,L="Multi-Account Strategy";n+=`\n  ${await async function(e,n){return`${n} - Task ${e} - Review and validate your email addresses and their domains for the root user administrator for management and all member accounts.`}(W,L)}`,W++,e.scpEnabled||(n+=`\n  ${await p(W,L,"Service Control Policy")}`,W++),v||(n+=`\n  ${await d(W,L,"Transitional")}`,W++),y||(n+=`\n  ${await d(W,L,"Suspended")}`,W++),I||(n+=`\n  ${await d(W,L,"Workloads")}`,W++),T||(n+=`\n  ${await d(W,L,"Security")}`,W++),E||(n+=`\n  ${await d(W,L,"Infrastructure")}`,W++),n+="\n\n*********************************************************",n+="\n                  LANDING ZONE",n+="\n*********************************************************",n+="\n\nAWS CONTROL TOWER\n",e.controlTowerRegion?(n+=`\n  Control Tower home region: ${e.controlTowerRegion}`,n+=`\n  Control Tower status: ${e.controlTowerStatus}`,n+=`\n  Control Tower Landing Zone version: ${e.controlTowerDeployedVersion}`,n+=`\n  Latest available version: ${e.controlTowerLatestAvailableVersion}`,n+=`\n  Drift Status: ${e.controlTowerDriftStatus}`):n+="\n  AWS Control Tower is not deployed in the AWS Organization",n+="\n\nLANDING ZONE RECOMMENDED TASKS:";let P=1;const U="Landing Zone";if(void 0===e.controlTowerRegion&&(n+=`\n  ${await async function(e,n){return`${n} - Task ${e} - Deploy AWS Control Tower in your home AWS Region.`}(P,U)}`,P++),"DRIFTED"===e.controlTowerDriftStatus&&(n+=`\n  ${await async function(e,n){return`${n} - Task ${e} - Fix drift in deployed landing zone.`}(P,U)}`,P++),e.controlTowerDeployedVersion!==e.controlTowerLatestAvailableVersion){const o=e.controlTowerDeployedVersion??"",t=e.controlTowerLatestAvailableVersion??"",a=await async function(e,n,o,t){return`${n} - Task ${e} - Update your AWS Control Tower Landing Zone from ${o} to ${t}.`}(P,U,o,t);n+=`\n  ${a}`,P++}e.orgServices&&e.orgServices.find((e=>"member.org.stacksets.cloudformation.amazonaws.com"===e.service))||(n+=`\n  ${await w(P,U,"AWS CloudFormation")}`,P++),n+="\n\n*********************************************************",n+="\n                    IDENTITY",n+="\n*********************************************************",e.idcInfo?(n+="\n\nAWS IAM IDENTITY CENTER\n",n+=`\n  IdC Region: ${e.idcInfo.region}`,n+=`\n  IdC ARN: ${e.idcInfo.arn}`,n+=`\n  IdC Instance Id: ${e.idcInfo.id}`):n+="\n\nAWS IAM IDENTITY CENTER NOT FOUND\n",n+="\n\nIDENTITY RECOMMENDED TASKS:";let F=1;const q="Identity";e.orgServices&&e.orgServices.find((e=>"sso.amazonaws.com"===e.service))||(n+=`\n  ${await w(F,q,"AWS IAM Identity Center")}`,F++),O||(n+=`\n  ${await A(F,q,"AWS IAM Identity Center")}`,F++),e.scpEnabled||(n+=`\n  ${await p(F,q,"Service Control Policy")}`,F++),n+="\n\n*********************************************************",n+="\n                    SECURITY",n+="\n*********************************************************",n+="\n\nAWS SECURITY SERVICES ENABLED IN AWS ORGANIZATION:\n",e.orgServices&&e.orgServices.find((e=>"guardduty.amazonaws.com"===e.service))&&(n+="\n  AWS GuardDuty"),e.orgServices&&e.orgServices.find((e=>"securityhub.amazonaws.com"===e.service))&&(n+="\n  AWS Security Hub"),e.orgServices&&e.orgServices.find((e=>"access-analyzer.amazonaws.com"===e.service))&&(n+="\n  IAM Access Analyzer"),e.orgServices&&e.orgServices.find((e=>"macie.amazonaws.com"===e.service))&&(n+="\n  Macie"),e.orgServices&&e.orgServices.find((e=>"storage-lens.s3.amazonaws.com"===e.service))&&(n+="\n  Amazon S3 Storage Lens"),e.orgServices&&e.orgServices.find((e=>"inspector2.amazonaws.com"===e.service))&&(n+="\n  Amazon Inspector"),e.orgServices&&e.orgServices.find((e=>"cloudtrail.amazonaws.com"===e.service))&&(n+="\n  AWS CloudTrail"),e.orgServices&&e.orgServices.find((e=>"config.amazonaws.com"===e.service))&&(n+="\n  AWS Config"),n+="\n\nSECURITY RECOMMENDED TASKS:";let G=1;const V="Security";e.scpEnabled||(n+=`\n  ${await p(G,V,"Service Control Policy")}`,G++),e.orgServices&&e.orgServices.find((e=>"guardduty.amazonaws.com"===e.service))||(n+=`\n  ${await w(G,V,"AWS GuardDuty")}`,G++),e.orgServices&&e.orgServices.find((e=>"securityhub.amazonaws.com"===e.service))||(n+=`\n  ${await w(G,V,"AWS SecurityHub")}`,G++),e.orgServices&&e.orgServices.find((e=>"access-analyzer.amazonaws.com"===e.service))||(n+=`\n  ${await w(G,V,"AWS IAM Access Analyzer")}`,G++),e.orgServices&&e.orgServices.find((e=>"cloudtrail.amazonaws.com"===e.service))||(n+=`\n  ${await w(G,V,"AWS CloudTrail")}`,G++),e.orgServices&&e.orgServices.find((e=>"config.amazonaws.com"===e.service))||(n+=`\n  ${await w(G,V,"AWS Config")}`,G++),b||(n+=`\n  ${await A(G,V,"Security Hub")}`,G++),z||(n+=`\n  ${await A(G,V,"GuardDuty")}`,G++),k||(n+=`\n  ${await A(G,V,"AWS Config")}`,G++),N||(n+=`\n  ${await A(G,V,"AWS IAM Access Analyzer")}`,G++),$||(n+=`\n  ${await A(G,V,"S3 Storage Lens")}`,G++),n+="\n\n*********************************************************",n+="\n                    NETWORK",n+="\n*********************************************************",n+="\n\nNETWORK RECOMMENDED TASKS:";let K=1;const Z="Network";e.orgServices&&e.orgServices.find((e=>"guardduty.amazonaws.com"===e.service))||(n+=`\n  ${await w(K,Z,"AWS GuardDuty")}`,K++),e.orgServices&&e.orgServices.find((e=>"ipam.amazonaws.com"===e.service))||(n+=`\n  ${await w(K,Z,"AWS IPAM")}`,K++),e.orgServices&&e.orgServices.find((e=>"ram.amazonaws.com"===e.service))||(n+=`\n  ${await w(K,Z,"AWS Resource Access Manager")}`,K++),R||(n+=`\n  ${await A(K,Z,"AWS IPAM")}`,K++),e.scpEnabled||(n+=`\n  ${await p(K,Z,"Service Control Policy")}`,K++),n+="\n\n*********************************************************",n+="\n                  OBSERVABILITY",n+="\n*********************************************************",n+="\n\nOBSERVABILITY RECOMMENDED TASKS:";let B=1;const Y="Observability";e.orgServices&&e.orgServices.find((e=>"account.amazonaws.com"===e.service))||(n+=`\n  ${await w(B,Y,"Account Manager")}`,B++),D||(n+=`\n  ${await A(B,Y,"Account Manager")}`,B++),n+="\n\n*********************************************************",n+="\n               BACKUP AND RECOVERY",n+="\n*********************************************************",n+="\n\nBACKUP AND RECOVERY RECOMMENDED TASKS:";let x=1;const _="Backup and Recovery";return e.orgServices&&e.orgServices.find((e=>"backup.amazonaws.com"===e.service))||(n+=`\n  ${await w(x,_,"AWS Backup")}`,x++),M||(n+=`\n  ${await A(x,_,"AWS Backup")}`,x++),e.backupPolicyEnabled||(n+=`\n  ${await p(x,_,"Backup Policy")}`,x++),e.scpEnabled||(n+=`\n  ${await p(x,_,"Service Control Policy")}`,x++),n+="\n\n\n  END REVIEW",n}(S);console.log("saving report to ./cfat/cfat.txt..."),v.appendFileSync("./cfat.txt",We),console.log("cloud foundation assessment complete. Access your report at ./cfat/cfat.txt")})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,