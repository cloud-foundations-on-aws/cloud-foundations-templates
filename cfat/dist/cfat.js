(()=>{"use strict";const e=require("@aws-sdk/client-sts"),n=require("@aws-sdk/client-organizations"),t=require("@aws-sdk/client-iam"),o=require("@aws-sdk/client-cloudformation"),i=require("@aws-sdk/client-sso-admin"),a=require("@aws-sdk/client-ec2"),s=require("@aws-sdk/client-cloudtrail"),c=require("@aws-sdk/client-config-service"),r=require("@aws-sdk/client-controltower"),l=require("@aws-sdk/client-cost-and-usage-report-service"),d=require("node:console"),g=require("node:stream"),u=require("fs"),m=new g.Transform({transform(e,n,t){t(null,e)}}),f=new d.Console({stdout:m}),A=async function(e){let n='"Summary", "Description", "Status" \r\n';for(const t of e)n+=`"cfat - ${t.category} - ${t.title}", "${t.detail}", "Open" \r\n`;u.writeFileSync("./jira-import.csv",n)},S=require("path"),p=require("archiver");(async()=>{let d={},g=[];const h=process.env.AWS_REGION||"us-east-1",y=await async function(){const e=new a.EC2Client({region:"us-east-1"});try{const n=new a.DescribeRegionsCommand({}),t=await e.send(n),o=[];for(const e of t.Regions||[])o.push(e.RegionName||"");return o}catch(e){return console.error("Error retrieving regions:",e),[]}finally{e.destroy()}}();console.log("discovering your AWS environment...");const w=await(async t=>{const o=new n.OrganizationsClient({region:t});let i=!1,a=!1;try{const s=await async function(n){const t=new e.STSClient({region:n});try{const n=new e.GetCallerIdentityCommand({});return(await t.send(n)).Account}catch(e){throw console.error("Error getting account ID:",e),e}}(t);if(s){const e=new n.DescribeOrganizationCommand({}),t=await o.send(e);if(t.Organization?.MasterAccountId){const e=t.Organization?.MasterAccountId;e==s?(a=!0,i=!0):i=!0}else i=!1}}catch(e){console.error("Error:",e)}finally{o.destroy()}return{isInOrganization:i,isManagementAccount:a}})(h);let C,v,E=!1,O=!1,$=!1,b=!1,z=!1,I=!1,T=!1,W=!1,D=!0,k=!1,N=!1,R=!1,L=!1,M=!1,P=!1,U=!1,F=!1,q=!1,G=!1,V=!1,K=!1,Z=!1,B=!1,Y=!1,x=!1,_=!1,H=!1,j=!0,J=!1;w&&(d.organizationDeploy=w.isInOrganization,d.managementAccount=w.isManagementAccount,void 0===w.isManagementAccount&&(w.isManagementAccount=!1,console.log("AWS account is not the Management Account of an AWS Organization")),j=w.isManagementAccount),console.log("discovering IAM Users...");const Q=await(async()=>{const e=new t.IAMClient({region:"us-east-1"}),n=[];try{const o=new t.ListUsersCommand({}),i=await e.send(o);for(const o of i.Users||[]){const i=o.UserName||"",a=new t.ListAccessKeysCommand({UserName:i}),s=(await e.send(a)).AccessKeyMetadata||[];if(s.length>0)for(const o of s){const a=o.AccessKeyId||"",s=new t.GetAccessKeyLastUsedCommand({AccessKeyId:a}),c=await e.send(s),r={userName:i,accessKeyId:a,lastUsed:c&&c.AccessKeyLastUsed&&`${c.AccessKeyLastUsed.LastUsedDate}`||"Not available"};n.push(r)}else{const e={userName:i};n.push(e)}}}catch(e){console.error("Error:",e)}finally{e.destroy()}return n})();Q&&Q.length>0?(console.log("IAM Users discovered."),d.iamUserChecks=Q):b=!0,console.log("discovering EC2 instances across all AWS Regions...");const X=await async function(e){let n=[];for(const t of e){const e=new a.EC2Client({region:t}),o=new a.DescribeInstancesCommand({});try{const i=await e.send(o);if(i.Reservations)if(i.Reservations.length>0){const e={region:t,ec2Found:!0};n.push(e)}else{const e={region:t,ec2Found:!1};n.push(e)}else{const e={region:t,ec2Found:!1};n.push(e)}}catch(e){console.log(`Error checking instance: ${e}`)}finally{e.destroy()}}return n}(y);if(X&&X.find((e=>!0===e.ec2Found))){d.ec2Checks=X,console.info("warning: EC2 instances discovered.");for(const e of X)k=!1}console.log("discovering VPCs across all AWS Regions...");const ee=await async function(e){let n=[];for(const t of e){const e=new a.EC2Client({region:t}),o=new a.DescribeVpcsCommand({});try{const i=await e.send(o);if(i.Vpcs)if(i.Vpcs.length>0){const e={region:t,vpcFound:!0};n.push(e)}else{const e={region:t,vpcFound:!1};n.push(e)}else{const e={region:t,vpcFound:!1};n.push(e)}}catch(e){console.log(`Error: ${e}`)}finally{e.destroy()}}return n}(y);if(d.vpcChecks=ee,ee&&ee.length>0&&(D=!1,console.log("warning: VPCs discovered.")),console.log("discovering AWS Config configurations across all AWS Regions..."),d.cloudTrailDetails=await async function(e){let n=[];for(const t of e){const e=new s.CloudTrailClient({region:t}),o=new s.DescribeTrailsCommand({});try{const i=await e.send(o);if(i.trailList)for(const e of i.trailList){let o={};o=e.HomeRegion==t?{region:t,trailFound:!0,isOrgTrail:e.IsMultiRegionTrail,isMultiRegion:e.IsMultiRegionTrail}:{region:t,trailFound:!1},n.push(o)}}catch(e){console.log(`Error checking instance: ${e}`)}finally{e.destroy()}}return n}(y),d.configDetails=await async function(e){let n=[];for(const t of e){const e=new c.ConfigServiceClient({region:t});let o={region:t,configRecorderFound:!1,configDeliveryChannelFound:!1};try{const t=await e.send(new c.DescribeConfigurationRecorderStatusCommand({}));0!==t.ConfigurationRecordersStatus?.length&&(o.configRecorderFound=!0);const i=await e.send(new c.DescribeDeliveryChannelsCommand({}));0!==i.DeliveryChannels?.length&&(o.configDeliveryChannelFound=!0),n.push(o)}catch(e){console.error(`Error checking AWS Config in ${t}:`,e)}finally{e.destroy()}}return n}(y),d.configDetails&&d.configDetails.find((e=>!0===e.configRecorderFound)))for(const e of d.configDetails)e.configRecorderFound&&(N=!0),e.configDeliveryChannelFound&&(R=!0);if(w.isInOrganization&&w.isManagementAccount){console.log("collecting general AWS Organization details...");const e=await async function(e){const t=new n.OrganizationsClient({region:e});let o={};try{const e=new n.DescribeOrganizationCommand({}),i=await t.send(e);i.Organization&&(o.id=i.Organization.Id??"",o.arn=i.Organization.Arn??"");const a=new n.ListRootsCommand({}),s=await t.send(a);s.Roots?o.rootOuId=s.Roots[0].Id:console.log("No info found for your AWS Organization.")}catch(e){console.error(`An error occurred: ${e}`)}finally{return t.destroy(),o}}("us-east-1");console.log("collecting CUR details...");const t=await(async e=>{const n=new l.CostAndUsageReportServiceClient({region:e});let t=!1;try{const e={},o=new l.DescribeReportDefinitionsCommand(e),i=await n.send(o);return i.ReportDefinitions&&i.ReportDefinitions.length>0&&(t=!0),{isLegacyCurSetup:t}}catch(e){return console.error(`Error: ${e}`),t=!1,{isLegacyCurSetup:t}}finally{n.destroy()}})("us-east-1");console.log("collecting AWS Organization Policy details...");const a=await async function(e){const t=new n.OrganizationsClient({region:e});let o={scpEnabled:!1,tagPolicyEnabled:!1,backupPolicyEnabled:!1};try{const e={},i=new n.ListRootsCommand(e),a=await t.send(i);if(a.Roots&&a.Roots[0].PolicyTypes)for(const e of a.Roots[0].PolicyTypes)"SERVICE_CONTROL_POLICY"==e.Type&&"ENABLED"==e.Status&&(o.scpEnabled=!0),"TAG_POLICY"==e.Type&&"ENABLED"==e.Status&&(o.tagPolicyEnabled=!0),"BACKUP_POLICY"==e.Type&&"ENABLED"==e.Status&&(o.backupPolicyEnabled=!0)}catch(e){console.error(`An error occurred: ${e}`)}finally{return t.destroy(),o}}("us-east-1");console.log("collecting AWS Organization service trusted access details..."),d.orgServices=await async function(e){const t=[],o=new n.OrganizationsClient({region:e});try{const e=new n.ListAWSServiceAccessForOrganizationCommand({}),i=await o.send(e);if(i.EnabledServicePrincipals&&i.EnabledServicePrincipals.length>0){i.EnabledServicePrincipals;for(const e of i.EnabledServicePrincipals){const n={service:e.ServicePrincipal??""};t.push(n)}}}catch(e){console.error("Error checking service access:",e)}finally{return o.destroy(),t}}("us-east-1"),console.log("collecting AWS Organization CloudFormation status details...");const s=await async function(e){let n={status:"disabled"};const t=new o.CloudFormationClient({region:e});try{const e={},i=new o.DescribeOrganizationsAccessCommand(e),a=await t.send(i);n.status=a.Status??"disabled"}catch(e){console.log(`Error: ${e}`)}finally{return t.destroy(),n}}(h);console.log("collecting AWS Control Tower details...");const c=await async function(e){let n={};const t=new r.ControlTowerClient({region:e});try{const e=new r.ListLandingZonesCommand({}),o=await t.send(e);if(o.landingZones&&o.landingZones.length>0){const e={landingZoneIdentifier:o.landingZones[0].arn},t=o.landingZones[0].arn?.toString().split(":")[3]??"";if(t){n.controlTowerRegion=t;const o=new r.ControlTowerClient({region:t}),i=new r.GetLandingZoneCommand(e),a=await o.send(i);a.landingZone&&(n.status=a.landingZone.status,n.latestAvailableVersion=a.landingZone.latestAvailableVersion,n.deployedVersion=a.landingZone.version,n.driftStatus=a.landingZone.driftStatus?.status)}}}catch(n){console.error(`Error checking Control Tower in ${e}:`,n)}finally{t.destroy()}return n}(h);if(d.idcInfo=await async function(e){let n={found:!1};for(const t of e){const e=new i.SSOAdminClient({region:t});try{const o={MaxResults:Number("100")},a=new i.ListInstancesCommand(o),s=await e.send(a);if(s.Instances&&s.Instances.length>0){const e=s.Instances[0];n.found=!0,n.region=t,n.arn=e.InstanceArn,n.id=e.IdentityStoreId;break}}catch(e){console.log(`Error looking for AWS Identity Center details in region ${t}`)}finally{e.destroy()}}return n}(y),console.log("collecting AWS Organization service delegated admin details..."),d.orgDelegatedAdminAccounts=await async function(){let e=[];const t=new n.OrganizationsClient({region:"us-east-1"});let o={};try{const i=new n.ListDelegatedAdministratorsCommand({}),a=await t.send(i);if(a.DelegatedAdministrators)for(const i of a.DelegatedAdministrators){const a={AccountId:i.Id},s=new n.ListDelegatedServicesForAccountCommand(a),c=await t.send(s);c.DelegatedServices&&(o={services:c.DelegatedServices,accountName:i.Name},e.push(o))}}catch(e){console.log("Error looking for delegated services.")}finally{t.destroy()}return e}(),console.log("collecting AWS Organization member account details..."),d.orgMemberAccounts=await async function(){let e=[];const t=new n.OrganizationsClient({region:"us-east-1"});Number("200");try{let o=await t.send(new n.ListAccountsCommand({}));if(o.Accounts&&o.Accounts.length>0){for(const n of o.Accounts){let t={accountName:n.Name,accountEmail:n.Email};e.push(t)}do{if(o.NextToken&&(o=await t.send(new n.ListAccountsCommand({NextToken:o.NextToken})),o.Accounts&&o.Accounts.length>0))for(const n of o.Accounts){let t={accountName:n.Name,accountEmail:n.Email};e.push(t)}}while(o.NextToken)}}catch(e){console.error("Error listing AWS accounts:",e)}finally{t.destroy()}return e}(),d.isLegacyCurSetup=t.isLegacyCurSetup,d.orgArn=e.arn,d.orgId=e.id,d.orgRootOuId=e.rootOuId,d.backupPolicyEnabled=a.backupPolicyEnabled,d.scpEnabled=a.scpEnabled,d.tagPolicyEnabled=a.tagPolicyEnabled,d.orgCloudFormationStatus=s.status,d.controlTowerDeployedVersion=c.deployedVersion,d.controlTowerDriftStatus=c.driftStatus,d.controlTowerLatestAvailableVersion=c.latestAvailableVersion,d.controlTowerRegion=c.controlTowerRegion,d.controlTowerStatus=c.status,d.idcInfo.arn&&(I=!0),d.cloudTrailDetails&&d.cloudTrailDetails.length>0){T=!0;for(const e of d.cloudTrailDetails)e.trailFound&&e.isOrgTrail&&(W=!0)}if(d.orgServices.find((e=>"cloudtrail.amazonaws.com"===e.service))&&(L=!0),d.orgServices.find((e=>"config.amazonaws.com"===e.service))&&(K=!0),a.scpEnabled&&(P=!0),a.tagPolicyEnabled&&(M=!0),a.backupPolicyEnabled&&(U=!0),e.rootOuId&&(console.log("collecting OU and member account details..."),d.orgOuInfo=await async function(e,t){const o=new n.OrganizationsClient({region:e});let i=[];try{const e=new n.ListOrganizationalUnitsForParentCommand({ParentId:t}),a=await o.send(e);if(a.OrganizationalUnits)for(const e of a.OrganizationalUnits){let t={id:e.Id,name:e.Name};const a=await o.send(new n.ListAccountsForParentCommand({ParentId:e.Id}));a.Accounts&&a.Accounts.length>0&&(t.accounts=a.Accounts),i.push(t)}}catch(e){return console.error("Error checking service access:",e),[]}finally{o.destroy()}return i}("us-east-1",e.rootOuId),d.orgOuInfo&&d.orgOuInfo.length>0))for(const e of d.orgOuInfo)"suspended"===e.name?.toLowerCase()&&(v=!0),"transitional"===e.name?.toLowerCase()&&(C=!0),"workloads"===e.name?.toLowerCase()&&(O=!0),"security"===e.name?.toLowerCase()&&($=!0),"infrastructure"===e.name?.toLowerCase()&&(E=!0);if(d.orgMemberAccounts&&d.orgMemberAccounts.length>0)for(const e of d.orgMemberAccounts)e.accountName&&("log archive"===e.accountName.toLowerCase()&&(_=!0),"audit"===e.accountName.toLowerCase()&&(H=!0),"security tooling"===e.accountName.toLowerCase()&&(H=!0));let g=!1,u=!1,m=!1,f=!1,A=!1,S=!1,p=!1,w=!1,b=!1;if(d.orgDelegatedAdminAccounts&&d.orgDelegatedAdminAccounts.length>0)for(const e of d.orgDelegatedAdminAccounts)if(e.services&&e.services.length>0)for(const n of e.services)"securityhub.amazonaws.com"===n.ServicePrincipal&&(u=!0),"guardduty.amazonaws.com"===n.ServicePrincipal&&(m=!0),"sso.amazonaws.com"===n.ServicePrincipal&&(g=!0),"config.amazonaws.com"===n.ServicePrincipal&&(f=!0),"access-analyzer.amazonaws.com"===n.ServicePrincipal&&(A=!0),"storage-lens.s3.amazonaws.com"===n.ServicePrincipal&&(S=!0),"ipam.amazonaws.com"===n.ServicePrincipal&&(p=!0),"account.amazonaws.com"===n.ServicePrincipal&&(w=!0),"backup.amazonaws.com"===n.ServicePrincipal&&(b=!0);c.controlTowerRegion&&(B=!0),"DRIFTED"!==c.driftStatus&&(Y=!0),c.deployedVersion===c.latestAvailableVersion&&(x=!0),d.orgServices.find((e=>"member.org.stacksets.cloudformation.amazonaws.com"===e.service))&&(F=!0),d.orgServices.find((e=>"sso.amazonaws.com"===e.service))&&(z=!0),d.orgServices.find((e=>"guardduty.amazonaws.com"===e.service))&&(q=!0),d.orgServices.find((e=>"securityhub.amazonaws.com"===e.service))&&(G=!0),d.orgServices.find((e=>"access-analyzer.amazonaws.com"===e.service))&&(V=!0),d.orgServices.find((e=>"ram.amazonaws.com"===e.service))&&(Z=!0),d.orgServices.find((e=>"backup.amazonaws.com"===e.service))&&(J=!0)}else if(w.isInOrganization&&!w.isManagementAccount){const e="\nWARNING: You are running CFAT from an account that is a member of your AWS Organization. Please run the solution from your AWS Management account.";console.warn(e)}else{const e="\nWARNING: You are running CFAT from an account that not part of an AWS Organization. This account will be treated as a standalone account.";console.warn(e)}let ne={check:"AWS Organization created",description:"AWS Organization is enabled.",status:w.isInOrganization?"complete":"incomplete",required:!0,weight:6,loe:1,remediationLink:" "};g.push(ne);let te={check:"Management Account created",description:"AWS Management account exists.",status:j?"complete":"incomplete",required:!0,weight:6,loe:1,remediationLink:" "};g.push(te);const oe={check:"Management Account IAM Users removed",description:"IAM Users should not exist in Management Account.",status:b?"complete":"incomplete",required:!1,weight:4,loe:1,remediationLink:" "};g.push(oe);const ie={check:"Management Account EC2 instances removed",description:"EC2 Instances should not exist in Management Account.",status:k?"complete":"incomplete",required:!1,weight:4,loe:1,remediationLink:" "};g.push(ie);const ae={check:"Management Account VPCs removed",description:"Management Account should not have any VPCs.",status:D?"complete":"incomplete",required:!1,weight:4,loe:1,remediationLink:"https://github.com/cloud-foundations-on-aws/cloud-foundations-templates/blob/main/network/network-default-vpc-deletion/README.md"};g.push(ae),d.isLegacyCurSetup;const se={check:"CloudTrail Trail created",description:"CloudTrail should be enabled within the account.",status:T?"complete":"incomplete",required:!0,weight:6,loe:3,remediationLink:"https://docs.aws.amazon.com/awscloudtrail/latest/userguide/creating-trail-organization.html"};g.push(se);const ce={check:"CloudTrail Organization Service enabled",description:"CloudTrail should be enabled on the Organization.",status:L?"complete":"incomplete",required:!0,weight:6,loe:1,remediationLink:"https://docs.aws.amazon.com/organizations/latest/userguide/services-that-can-integrate-cloudtrail.html"};g.push(ce);const re={check:"CloudTrail Org Trail deployed",description:"At least one CloudTrail Organization Trail should be enabled.",status:W?"complete":"incomplete",required:!0,weight:6,loe:1,remediationLink:"https://docs.aws.amazon.com/awscloudtrail/latest/userguide/creating-trail-organization.html"};g.push(re);const le={check:"Config Recorder in Management Account configured",description:"Config Recorder in the Management Account should be enabled.",status:N?"complete":"incomplete",required:!0,weight:6,loe:2,remediationLink:"https://aws.amazon.com/blogs/mt/managing-aws-organizations-accounts-using-aws-config-and-aws-cloudformation-stacksets/"};g.push(le);const de={check:"Config Delivery Channel in Management Account configured",description:"Config Delivery Channel in Management Account should be enabled.",status:R?"complete":"incomplete",required:!0,weight:6,loe:2,remediationLink:"https://aws.amazon.com/blogs/mt/managing-aws-organizations-accounts-using-aws-config-and-aws-cloudformation-stacksets/"};g.push(de);g.push({check:"CloudFormation StackSets activated",description:"CloudFormation StackSets should be activated in the CloudFormation console.",status:"incomplete",required:!1,weight:5,loe:1,remediationLink:"https://docs.aws.amazon.com/organizations/latest/userguide/services-that-can-integrate-cloudformation.html#integrate-enable-ta-cloudformation"});const ge={check:"GuardDuty Organization service enabled",description:"GuardDuty Organization services should be enabled.",status:q?"complete":"incomplete",required:!1,weight:4,loe:1,remediationLink:" "};g.push(ge);const ue={check:"RAM Organization service enabled",description:"Resource Access Manager (RAM) trusted access should be enabled in the AWS Organization.",status:Z?"complete":"incomplete",required:!1,weight:4,loe:1,remediationLink:" "};g.push(ue);const me={check:"Security Hub Organization service enabled",description:"Security Hub trusted access should be enabled in the AWS Organization.",status:G?"complete":"incomplete",required:!1,weight:4,loe:1,remediationLink:" "};g.push(me);const fe={check:"IAM Access Analyzer Organization service enabled",description:"IAM Access Analyzer trusted access should be enabled in the AWS Organization.",status:V?"complete":"incomplete",required:!1,weight:4,loe:1,remediationLink:" "};g.push(fe);const Ae={check:"Config Organization service enabled",description:"AWS Config trusted access should be enabled in the AWS Organization.",status:K?"complete":"incomplete",required:!1,weight:4,loe:1,remediationLink:" "};g.push(Ae);const Se={check:"CloudFormation Organization service enabled",description:"CloudFormation trusted access should be enabled in the AWS Organization.",status:F?"complete":"incomplete",required:!1,weight:5,loe:1,remediationLink:"https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/stacksets-orgs-activate-trusted-access.html"};g.push(Se);const pe={check:"Top-level Infrastructure OU deployed",description:"Top-level Infrastructure OU should exist.",status:E?"complete":"incomplete",required:!1,weight:5,loe:2,remediationLink:"https://catalog.workshops.aws/control-tower/en-US/introduction/manage-ou"};g.push(pe);const he={check:"Top-level Security OU deployed",description:"Top-level Security OU should exist.",status:$?"complete":"incomplete",required:!0,weight:6,loe:2,remediationLink:"https://catalog.workshops.aws/control-tower/en-US/introduction/manage-ou"};g.push(he);const ye={check:"Top-level Workloads OU deployed",description:"Top-level Workloads OU should exist.",status:O?"complete":"incomplete",required:!1,weight:5,loe:2,remediationLink:"https://catalog.workshops.aws/control-tower/en-US/introduction/manage-ou"};g.push(ye);const we={check:"IAM IdC Organization service enabled",description:"IAM Identity Center trusted access should be enabled in the AWS Organization",status:z?"complete":"incomplete",required:!0,weight:6,loe:1,remediationLink:"https://docs.aws.amazon.com/singlesignon/latest/userguide/get-set-up-for-idc.html"};g.push(we);const Ce={check:"IAM IdC configured",description:"IAM Identity Center should be configured.",status:I?"complete":"incomplete",required:!0,weight:6,loe:3,remediationLink:"https://docs.aws.amazon.com/singlesignon/latest/userguide/tutorials.html"};g.push(Ce);const ve={check:"Service Control Policies enabled",description:"Service Control Policy should be enabled within the AWS Organization.",status:P?"complete":"incomplete",required:!0,weight:6,loe:1,remediationLink:"https://docs.aws.amazon.com/organizations/latest/userguide/orgs_manage_policies_enable-disable.html"};g.push(ve);const Ee={check:"Organization Tag Policy enabled",description:"Tag Policy should be enabled within the AWS Organization.",status:M?"complete":"incomplete",required:!0,weight:6,loe:1,remediationLink:"https://docs.aws.amazon.com/organizations/latest/userguide/orgs_manage_policies_enable-disable.html"};g.push(Ee);const Oe={check:"Organization Backup Policy enabled",description:"Backup Policy should be enabled within the AWS Organization.",status:U?"complete":"incomplete",required:!1,weight:5,loe:1,remediationLink:"https://docs.aws.amazon.com/organizations/latest/userguide/orgs_manage_policies_enable-disable.html"};g.push(Oe);const $e={check:"Control Tower deployed",description:"Control Tower should be deployed.",status:B?"complete":"incomplete",required:!0,weight:6,loe:6,remediationLink:"https://catalog.workshops.aws/control-tower/en-US/prerequisites/deploying"};g.push($e);const be={check:"Control Tower latest version",description:"Control Tower should be the latest version.",status:x?"complete":"incomplete",required:!1,weight:5,loe:2,remediationLink:"https://docs.aws.amazon.com/controltower/latest/userguide/update-controltower.html"};g.push(be);const ze={check:"Control Tower not drifted",description:"Control Tower should not be drifted.",status:Y?"complete":"incomplete",required:!0,weight:6,loe:2,remediationLink:"https://docs.aws.amazon.com/controltower/latest/userguide/resolve-drift.html"};g.push(ze);const Ie={check:"Log Archive account deployed",description:"Log Archive account should exist.",status:_?"complete":"incomplete",required:!0,weight:6,loe:2,remediationLink:" "};g.push(Ie);const Te={check:"Audit account deployed",description:"Audit/Security Tooling account should exist.",status:H?"complete":"incomplete",required:!0,weight:6,loe:2,remediationLink:" "};g.push(Te),d.cfatChecks=g,console.table(g,["check","status","required","loe"]),console.log("writing assessment summary checks to ./cfat/cfat-checks.csv...");const We=function(e){const n=Array.isArray(e)?e:[e],t=n.length>0?Object.keys(n[0]):[],o=[t.join(",")];for(const e of n){const n=t.map((n=>{const t=e[n];return"string"==typeof t?`"${t.replace(/"/g,'""')}"`:t}));o.push(n.join(","))}return o.join("\n")}(g);u.writeFileSync("./cfat-checks.csv",We);const De=await async function(e){let n=[],t="Cloud Foundation Assessment Tool";t+=`\nGenerated on: ${(new Date).toUTCString()} \n\n`;let o=0,i=0,a=0,s="COMPLETE";if(e.cfatChecks&&e.cfatChecks.length>0){t+="\nIncomplete Requirements:";for(const n of e.cfatChecks)a+=n.weight,!0===n.required&&"incomplete"===n.status&&(t+=`\n    INCOMPLETE: ${n.check}`,i+=n.loe,s="INCOMPLETE"),"complete"===n.status&&(o+=n.weight);t+="\n\n====================================\n",t+=`\nFoundation Status: ${s}`,"INCOMPLETE"===s&&(t+=`\nEstimate of Required Level of Effort (LOE): ${i} hours`),t+=`\nCFAT Score: ${o} out of ${a}`,t+="\n\n====================================\n",t+="\nFoundation Checks:\n",e.cfatChecks&&e.cfatChecks.length>0&&(t+=`${c=e.cfatChecks,f.table(c),(m.read()||"").toString()}`)}var c;if(t+="\n\nStart Detailed Report:\n\n",t+="\n*********************************************************",t+="\n                   MANAGEMENT ACCOUNT",t+="\n*********************************************************",t+="\n\nAWS ACCOUNT TYPE\n",t+=`\n  Is in AWS Organization: ${e.organizationDeploy}`,t+=`\n  Assessing AWS Management Account: ${e.managementAccount}`,t+="\n\nIAM USERS CHECK\n",e.iamUserChecks&&e.iamUserChecks.length>0)for(const n of e.iamUserChecks)t+=`\n  IAM User: ${n.userName}`,n.accessKeyId&&(t+=`\n    User API Key ID: ${n.accessKeyId}`),t+="\n";else t+="\n  No IAM Users found.";if(t+="\n\nEC2 INSTANCE CHECK\n",e.ec2Checks&&e.ec2Checks.find((e=>!0===e.ec2Found)))for(const n of e.ec2Checks)n.ec2Found&&(t+=`\n  ${n.region} - found EC2 Instance(s).`);else t+="\n  No EC2 instances found.";if(t+="\n\nVPC CHECK\n",e.vpcChecks&&e.vpcChecks.length>0)for(const n of e.vpcChecks)n.vpcFound&&(t+=`\n  ${n.region} - found VPC(s).`);else t+="\n  No VPCs found.";if(t+="\n\nAWS CONFIG CHECK\n",e.configDetails&&e.configDetails.find((e=>!0===e.configRecorderFound)))for(const n of e.configDetails)n.configRecorderFound&&(t+=`\n  ${n.region} - Config Recorder found`),n.configDeliveryChannelFound&&(t+=`\n  ${n.region} - Config Delivery Channel found`);else t+="\n  No AWS Config resource discovered";t+="\n\nMANAGEMENT ACCOUNT RECOMMENDED TASKS:";const r="Management Account";if(e.iamUserChecks&&e.iamUserChecks.length>0)for(const o of e.iamUserChecks){let e={title:"Remove IAM user",category:r,detail:`Remove IAM user ${o.userName}`};const i=`${e.title} - ${e.category} - ${e.detail}`;if(n.push(e),t+=`\n  ${i}`,o.accessKeyId){let e={title:"Remove IAM user",category:r,detail:`Remove IAM user API key ${o.accessKeyId} for ${o.userName}`};t+=`\n  ${e.title} - ${e.category} - ${e.detail}`,n.push(e)}}if(e.ec2Checks&&e.ec2Checks.find((e=>!0===e.ec2Found)))for(const o of e.ec2Checks)if(o.ec2Found&&o.region){let e={title:"Delete EC2 instance",category:r,detail:`Delete EC2 instance in ${o.region}`};t+=`\n  ${e.title} - ${e.category} - ${e.detail}`,n.push(e)}if(e.vpcChecks&&e.vpcChecks.length>0)for(const o of e.vpcChecks)if(o.vpcFound&&o.region){let e={title:"Delete VPC",category:r,detail:`Delete VPC in ${o.region}`};t+=`\n  ${e.title} - ${e.category} - ${e.detail}`,n.push(e)}if(t+="\n\n*********************************************************",t+="\n                    GOVERNANCE",t+="\n*********************************************************",t+="\n\nAWS ORGANIZATION POLICY TYPES\n",t+=`\n  Service Control Policies (SCP) enabled: ${e.scpEnabled}`,t+=`\n  Tag Policies enabled: ${e.tagPolicyEnabled}`,t+=`\n  Backup Policies enabled: ${e.backupPolicyEnabled}`,t+="\n\nAWS ORGANIZATION CLOUDFORMATION\n",t+=`\n  AWS CloudFormation Organization stack sets status : ${e.orgCloudFormationStatus}`,t+="\n\nCLOUDTRAIL CHECK\n",e.cloudTrailDetails&&e.cloudTrailDetails.length>0)for(const n of e.cloudTrailDetails)n.trailFound&&(t+=`\n  CloudTrail found in ${n.region}`,t+=`\n    Is Organization Trail: ${n.isOrgTrail}`,t+=`\n    Is MultiRegion: ${n.isMultiRegion}`,t+="\n");else t+="\n  No AWS CloudTrail resource discovered";t+="\n\nGOVERNANCE SERVICES ENABLED IN AWS ORGANIZATION:\n",e.orgServices?(e.orgServices.find((e=>"cloudtrail.amazonaws.com"===e.service))&&(t+="\n  AWS CloudTrail"),e.orgServices.find((e=>"config.amazonaws.com"===e.service))&&(t+="\n  AWS Config")):t+="\n  No governance service enabled",t+="\n\nGOVERNANCE RECOMMENDED TASKS:";const l="Governance";if(!e.orgServices||!e.orgServices.find((e=>"cloudtrail.amazonaws.com"===e.service))){const e={title:"Enable AWS CloudTrail",category:l,detail:"Enable AWS CloudTrail in AWS Organization"};n.push(e),t+=`\n  ${e.title} - ${e.category} - ${e.detail}`}if(!e.orgServices||!e.orgServices.find((e=>"config.amazonaws.com"===e.service))){const e={title:"Enable AWS Config",category:l,detail:"Enable AWS Config in AWS Organization"};n.push(e),t+=`\n  ${e.title} - ${e.category} - ${e.detail}`}if(!e.scpEnabled){const e={title:"Enable SCP",category:l,detail:"Enable SCP in AWS Organization"};n.push(e),t+=`\n  ${e.title} - ${e.category} - ${e.detail}`}if(!e.tagPolicyEnabled){let e={title:"Enable Tag Policy",category:l,detail:"Enable Tag Policy in AWS Organization"};n.push(e),t+=`\n  ${e.title} - ${e.category} - ${e.detail}`}if(!e.backupPolicyEnabled){let e={title:"Enable Backup Policy",category:l,detail:"Enable Backup Policy in AWS Organization"};n.push(e),t+=`\n  ${e.title} - ${e.category} - ${e.detail}`}if(t+="\n\n*********************************************************",t+="\n                FINANCIAL MANAGEMENT",t+="\n*********************************************************",t+="\n\nLegacy CUR",t+=`\n  Is legacy CUR setup: ${e.isLegacyCurSetup}`,t+="\n\nCLOUD FINANCIAL MANAGEMENT RECOMMENDED TASKS:",!e.isLegacyCurSetup){const e={title:"Setup legacy CUR",category:"Cloud Financial Management",detail:"Setup legacy CUR in AWS Organization"};n.push(e),t+=`\n  ${e.title} - ${e.category} - ${e.detail}`}t+="\n\n*********************************************************",t+="\n                MULTI-ACCOUNT STRATEGY",t+="\n*********************************************************",t+="\n\nAWS ORGANIZATION DETAILS\n",t+=`\n  AWS Organization Id: ${e.orgId}`,t+=`\n  AWS Organization ARN: ${e.orgArn}`,t+=`\n  AWS Organization Root OU Id: ${e.orgRootOuId}`,t+="\n\nAWS ORGANIZATION CLOUDFORMATION\n",t+=`\n  AWS CloudFormation Organization stack sets status : ${e.orgCloudFormationStatus}`;let d,g,A=!1,S=!1,p=!1;if(e.orgRootOuId)if(t+="\n\nAWS ORGANIZATION TOP-LEVEL ORGANIZATION UNITS\n",t+="\n  List of Organization's top-level OUs and AWS accounts:",e.orgOuInfo&&e.orgOuInfo.length>0)for(const n of e.orgOuInfo)if("suspended"===n.name?.toLowerCase()&&(g=!0),"transitional"===n.name?.toLowerCase()&&(d=!0),"workloads"===n.name?.toLowerCase()&&(S=!0),"security"===n.name?.toLowerCase()&&(p=!0),"infrastructure"===n.name?.toLowerCase()&&(A=!0),t+=`\n    Organizational Unit: ${n.name}`,t+=`\n      Organizational Unit Id: ${n.id}`,n.accounts&&n.accounts.length>0){t+="\n      AWS Accounts:";for(const e of n.accounts)t+=`\n        ${e.Name}`;t+="\n"}else t+="\n      AWS Accounts: None",t+="\n";else t+="\n  No top level OUs found.";if(t+="\n\nAWS ORGANIZATION MEMBER ACCOUNTS\n",e.orgMemberAccounts&&e.orgMemberAccounts.length>0)for(const n of e.orgMemberAccounts)t+=`\n  Account: ${n.accountName}`,t+=`\n  Account Email: ${n.accountEmail}\n`;else t+="No member accounts found which is amazing as this is running from one.";if(t+="\n\nAWS ORGANIZATION ENABLED SERVICES\n",t+="\n  The following AWS Services are enabled within your AWS Organization:",e.orgServices&&e.orgServices.length>0)for(const n of e.orgServices)t+=`\n    ${n.service}`;else t+="\n    No trusted access enabled in the AWS Organization";let h=!1,y=!1,w=!1,C=!1,v=!1,E=!1,O=!1,$=!1,b=!1;if(t+="\n\nAWS ORGANIZATION INTEGRATED SERVICE REGISTERED DELEGATED ADMINS\n",e.orgDelegatedAdminAccounts&&e.orgDelegatedAdminAccounts.length>0)for(const n of e.orgDelegatedAdminAccounts){if(t+=`\n  Account: ${n.accountName}`,n.services&&n.services.length>0){t+="\n  Delegated Services:";for(const e of n.services)t+=`\n    ${e.ServicePrincipal}`,"securityhub.amazonaws.com"===e.ServicePrincipal&&(y=!0),"guardduty.amazonaws.com"===e.ServicePrincipal&&(w=!0),"sso.amazonaws.com"===e.ServicePrincipal&&(h=!0),"config.amazonaws.com"===e.ServicePrincipal&&(C=!0),"access-analyzer.amazonaws.com"===e.ServicePrincipal&&(v=!0),"storage-lens.s3.amazonaws.com"===e.ServicePrincipal&&(E=!0),"ipam.amazonaws.com"===e.ServicePrincipal&&(O=!0),"account.amazonaws.com"===e.ServicePrincipal&&($=!0),"backup.amazonaws.com"===e.ServicePrincipal&&(b=!0)}t+="\n "}else t+="\n  No delegated admin accounts in AWS Organization";t+="\n\nMULTI-ACCOUNT STRATEGY RECOMMENDED TASKS:";let z="Multi-Account Strategy";if(t+=`\n  Review Account Email Addresses - ${z} - Review Account Email Addresses in AWS Organization`,!e.scpEnabled){const e={title:"Enable Service Control Policy",category:z,detail:"Enable Service Control Policy in AWS Organization"};n.push(e),t+=`\n  ${e.title} - ${e.category} - ${e.detail}`}if(!d){const e={title:"Deploy Transitional OU",category:z,detail:"Deploy Transitional OU in AWS Organization"};n.push(e),t+=`\n  ${e.title} - ${e.category} - ${e.detail}`}if(!g){const e={title:"Deploy Suspended OU",category:z,detail:"Deploy Suspended OU in AWS Organization"};n.push(e),t+=`\n  ${e.title} - ${e.category} - ${e.detail}`}if(!S){const e={title:"Deploy Workloads OU",category:z,detail:"Deploy Workloads OU in AWS Organization"};n.push(e),t+=`\n  ${e.title} - ${e.category} - ${e.detail}`}if(!p){const e={title:"Deploy Security OU",category:z,detail:"Deploy Security OU in AWS Organization"};n.push(e),t+=`\n  ${e.title} - ${e.category} - ${e.detail}`}if(!A){const e={title:"Deploy Infrastructure OU",category:z,detail:"Deploy Infrastructure OU in AWS Organization"};n.push(e),t+=`\n  ${e.title} - ${e.category} - ${e.detail}`}t+="\n\n*********************************************************",t+="\n                  LANDING ZONE",t+="\n*********************************************************",t+="\n\nAWS CONTROL TOWER\n",e.controlTowerRegion?(t+=`\n  Control Tower home region: ${e.controlTowerRegion}`,t+=`\n  Control Tower status: ${e.controlTowerStatus}`,t+=`\n  Control Tower Landing Zone version: ${e.controlTowerDeployedVersion}`,t+=`\n  Latest available version: ${e.controlTowerLatestAvailableVersion}`,t+=`\n  Drift Status: ${e.controlTowerDriftStatus}`):t+="\n  AWS Control Tower is not deployed in the AWS Organization",t+="\n\nLANDING ZONE RECOMMENDED TASKS:";const I="Landing Zone";if(void 0===e.controlTowerRegion){const e={title:"Deploy AWS Control Tower",category:I,detail:"Deploy AWS Control Tower in AWS Organization"};n.push(e),t+=`\n  ${e.title} - ${e.category} - ${e.detail}`}if("DRIFTED"===e.controlTowerDriftStatus){const e={title:"Fix drift in deployed landing zone",category:I,detail:"Fix drift in deployed landing zone"};n.push(e),t+=`\n  ${e.title} - ${e.category} - ${e.detail}`}if(e.controlTowerDeployedVersion!==e.controlTowerLatestAvailableVersion){const o={title:"Update AWS Control Tower to latest version",category:I,detail:`Update AWS Control Tower to version ${e.controlTowerLatestAvailableVersion}`};n.push(o),t+=`\n  ${o.title} - ${o.category} - ${o.detail}`}if(!e.orgServices||!e.orgServices.find((e=>"member.org.stacksets.cloudformation.amazonaws.com"===e.service))){const e={title:"Enable AWS CloudFormation",category:I,detail:"Enable AWS CloudFormation in AWS Organization"};n.push(e),t+=`\n  ${e.title} - ${e.category} - ${e.detail}`}t+="\n\n*********************************************************",t+="\n                    IDENTITY",t+="\n*********************************************************",e.idcInfo?(t+="\n\nAWS IAM IDENTITY CENTER\n",t+=`\n  IdC Region: ${e.idcInfo.region}`,t+=`\n  IdC ARN: ${e.idcInfo.arn}`,t+=`\n  IdC Instance Id: ${e.idcInfo.id}`):t+="\n\nAWS IAM IDENTITY CENTER NOT FOUND\n",t+="\n\nIDENTITY RECOMMENDED TASKS:";const T="Identity";if(!e.orgServices||!e.orgServices.find((e=>"sso.amazonaws.com"===e.service))){const e={title:"Enable AWS Single Sign-On",category:T,detail:"Enable AWS Single Sign-On in AWS Organization"};n.push(e),t+=`\n  ${e.title} - ${e.category} - ${e.detail}`}if(!h){const e={title:"Delegate administration to AWS IAM Identity Center",category:T,detail:"Delegate administration to AWS IAM Identity Center"};n.push(e),t+=`\n  ${e.title} - ${e.category} - ${e.detail}`}if(!e.scpEnabled){const e={title:"Enable AWS Single Sign-On",category:T,detail:"Enable AWS Single Sign-On in AWS Organization"};n.push(e),t+=`\n  ${e.title} - ${e.category} - ${e.detail}`}t+="\n\n*********************************************************",t+="\n                    SECURITY",t+="\n*********************************************************",t+="\n\nAWS SECURITY SERVICES ENABLED IN AWS ORGANIZATION:\n",e.orgServices&&e.orgServices.find((e=>"guardduty.amazonaws.com"===e.service))&&(t+="\n  AWS GuardDuty"),e.orgServices&&e.orgServices.find((e=>"securityhub.amazonaws.com"===e.service))&&(t+="\n  AWS Security Hub"),e.orgServices&&e.orgServices.find((e=>"access-analyzer.amazonaws.com"===e.service))&&(t+="\n  IAM Access Analyzer"),e.orgServices&&e.orgServices.find((e=>"macie.amazonaws.com"===e.service))&&(t+="\n  Macie"),e.orgServices&&e.orgServices.find((e=>"storage-lens.s3.amazonaws.com"===e.service))&&(t+="\n  Amazon S3 Storage Lens"),e.orgServices&&e.orgServices.find((e=>"inspector2.amazonaws.com"===e.service))&&(t+="\n  Amazon Inspector"),e.orgServices&&e.orgServices.find((e=>"cloudtrail.amazonaws.com"===e.service))&&(t+="\n  AWS CloudTrail"),e.orgServices&&e.orgServices.find((e=>"config.amazonaws.com"===e.service))&&(t+="\n  AWS Config"),t+="\n\nSECURITY TASKS:";const W="Security";if(!e.scpEnabled){const e={title:"Enable AWS Single Sign-On",category:W,detail:"Enable AWS Single Sign-On in AWS Organization"};n.push(e),t+=`\n  ${e.title} - ${e.category} - ${e.detail}`}if(!e.orgServices||!e.orgServices.find((e=>"guardduty.amazonaws.com"===e.service))){const e={title:"Delegate administration to AWS GuardDuty",category:W,detail:"Delegate administration to AWS GuardDuty"};n.push(e),t+=`\n  ${e.title} - ${e.category} - ${e.detail}`}if(!e.orgServices||!e.orgServices.find((e=>"securityhub.amazonaws.com"===e.service))){const e={title:"Delegate administration to AWS Security Hub",category:W,detail:"Delegate administration to AWS Security Hub"};n.push(e),t+=`\n  ${e.title} - ${e.category} - ${e.detail}`}if(!e.orgServices||!e.orgServices.find((e=>"access-analyzer.amazonaws.com"===e.service))){const e={title:"Delegate administration to AWS IAM Access Analyzer",category:W,detail:"Delegate administration to AWS IAM Access Analyzer"};n.push(e),t+=`\n  ${e.title} - ${e.category} - ${e.detail}`}if(!e.orgServices||!e.orgServices.find((e=>"cloudtrail.amazonaws.com"===e.service))){const e={title:"Delegate administration to AWS CloudTrail",category:W,detail:"Delegate administration to AWS CloudTrail"};n.push(e),t+=`\n  ${e.title} - ${e.category} - ${e.detail}`}if(!e.orgServices||!e.orgServices.find((e=>"config.amazonaws.com"===e.service))){const e={title:"Delegate administration to AWS Config",category:W,detail:"Delegate administration to AWS Config"};n.push(e),t+=`\n  ${e.title} - ${e.category} - ${e.detail}`}if(!y){const e={title:"Delegate administration of AWS Security Hub",category:W,detail:"Delegate administration to AWS Security Hub"};n.push(e),t+=`\n  ${e.title} - ${e.category} - ${e.detail}`}if(!w){const e={title:"Delegate administration of AWS GuardDuty",category:W,detail:"Delegate administration to AWS GuardDuty"};n.push(e),t+=`\n  ${e.title} - ${e.category} - ${e.detail}`}if(!C){const e={title:"Delegate administration of AWS Config",category:W,detail:"Delegate administration to AWS Config"};n.push(e),t+=`\n  ${e.title} - ${e.category} - ${e.detail}`}if(!v){const e={title:"Delegate administration of AWS IAM Access Analyzer",category:W,detail:"Delegate administration to AWS IAM Access Analyzer"};n.push(e),t+=`\n  ${e.title} - ${e.category} - ${e.detail}`}if(!E){const e={title:"Delegate administration of Amazon S3 Storage Lens",category:W,detail:"Delegate administration to Amazon S3 Storage Lens"};n.push(e),t+=`\n  ${e.title} - ${e.category} - ${e.detail}`}t+="\n\n*********************************************************",t+="\n                    NETWORK",t+="\n*********************************************************",t+="\n\nNETWORK RECOMMENDED TASKS:";const D="Network";if(!e.orgServices||!e.orgServices.find((e=>"guardduty.amazonaws.com"===e.service))){const e={title:"Enable AWS GuardDuty",category:D,detail:"Enable AWS GuardDuty in AWS Organization"};n.push(e),t+=`\n  ${e.title} - ${e.category} - ${e.detail}`}if(!e.orgServices||!e.orgServices.find((e=>"ipam.amazonaws.com"===e.service))){const e={title:"Enable AWS IPAM",category:D,detail:"Enable AWS IPAM in AWS Organization"};n.push(e),t+=`\n  ${e.title} - ${e.category} - ${e.detail}`}if(!e.orgServices||!e.orgServices.find((e=>"ram.amazonaws.com"===e.service))){const e={title:"Enable AWS Resource Access Manager",category:D,detail:"Enable AWS Resource Access Manager in AWS Organization"};n.push(e),t+=`\n  ${e.title} - ${e.category} - ${e.detail}`}if(!O){const e={title:"Delegate administration of AWS IPAM",category:D,detail:"Delegate administration to AWS IPAM"};n.push(e),t+=`\n  ${e.title} - ${e.category} - ${e.detail}`}if(!e.scpEnabled){const e={title:"Enable AWS Service Control Policy",category:D,detail:"Enable AWS Service Control Policy in AWS Organization"};n.push(e),t+=`\n  ${e.title} - ${e.category} - ${e.detail}`}t+="\n\n*********************************************************",t+="\n                  OBSERVABILITY",t+="\n*********************************************************",t+="\n\nOBSERVABILITY RECOMMENDED TASKS:";const k="Observability";if(!e.orgServices||!e.orgServices.find((e=>"account.amazonaws.com"===e.service))){const e={title:"Enable AWS Account",category:k,detail:"Enable AWS Account in AWS Organization"};n.push(e),t+=`\n  ${e.title} - ${e.category} - ${e.detail}`}if(!$){const e={title:"Delegate administration of AWS Account",category:k,detail:"Delegate administration to AWS Account"};n.push(e),t+=`\n  ${e.title} - ${e.category} - ${e.detail}`}t+="\n\n*********************************************************",t+="\n               BACKUP AND RECOVERY",t+="\n*********************************************************",t+="\n\nBACKUP AND RECOVERY RECOMMENDED TASKS:";const N="Backup and Recovery";if(!e.orgServices||!e.orgServices.find((e=>"backup.amazonaws.com"===e.service))){const e={title:"Enable AWS Backup",category:N,detail:"Enable AWS Backup in AWS Organization"};n.push(e),t+=`\n  ${e.title} - ${e.category} - ${e.detail}`}if(!b){const e={title:"Delegate administration of AWS Backup",category:N,detail:"Delegate administration to AWS Backup"};n.push(e),t+=`\n  ${e.title} - ${e.category} - ${e.detail}`}if(!e.backupPolicyEnabled){const e={title:"Enable AWS Backup Policy",category:N,detail:"Enable AWS Backup Policy in AWS Organization"};n.push(e),t+=`\n  ${e.title} - ${e.category} - ${e.detail}`}if(!e.scpEnabled){const e={title:"Enable AWS Service Control Policy",category:N,detail:"Enable AWS Service Control Policy in AWS Organization"};n.push(e),t+=`\n  ${e.title} - ${e.category} - ${e.detail}`}return t+="\n\n\n  END REVIEW",console.log("compiling report..."),console.log("saving report to ./cfat/cfat.txt..."),u.appendFileSync("./cfat.txt",t),n}(d);console.log("cloud foundation assessment complete. Access your report at ./cfat/cfat.txt"),console.log("assessment summary checks written to ./cfat/cfat-checks.csv"),A(De),await A(De),await async function(e){let n='"Task", "Status" \r\n';const t=new Set;for(const n of e){const e=n.detail??"UNDEFINED";"UNDEFINED"!==e&&t.add(e)}const o=Array.from(t);for(const e of o)n+=`"cfat - ${e}", "Not Started" \r\n`;u.writeFileSync("./asana-import.csv",n)}(De),await async function(){try{const e=u.createWriteStream(S.join(process.cwd(),"assessment.zip")),n=p("zip",{zlib:{level:9}});n.pipe(e),n.file(S.join(process.cwd(),"cfat.txt"),{name:"cfat.txt"}),n.file(S.join(process.cwd(),"cfat-checks.csv"),{name:"cfat-checks.csv"}),n.file(S.join(process.cwd(),"asana-import.csv"),{name:"asana-import.csv"}),n.file(S.join(process.cwd(),"jira-import.csv"),{name:"jira-import.csv"}),n.finalize(),console.log("Zip file created successfully!")}catch(e){console.error("Error creating zip file:",e)}}(),console.log("assessment files zipped to ./cfat/assessment.zip")})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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cy1zZGsvY2xpZW50LXN0c1wiIiwid2VicGFjazovLy9leHRlcm5hbCBjb21tb25qcyBcIkBhd3Mtc2RrL2NsaWVudC1vcmdhbml6YXRpb25zXCIiLCJ3ZWJwYWNrOi8vL2V4dGVybmFsIGNvbW1vbmpzIFwiQGF3cy1zZGsvY2xpZW50LWlhbVwiIiwid2VicGFjazovLy9leHRlcm5hbCBjb21tb25qcyBcIkBhd3Mtc2RrL2NsaWVudC1jbG91ZGZvcm1hdGlvblwiIiwid2VicGFjazovLy9leHRlcm5hbCBjb21tb25qcyBcIkBhd3Mtc2RrL2NsaWVudC1zc28tYWRtaW5cIiIsIndlYnBhY2s6Ly8vZXh0ZXJuYWwgY29tbW9uanMgXCJAYXdzLXNkay9jbGllbnQtZWMyXCIiLCJ3ZWJwYWNrOi8vL2V4dGVybmFsIGNvbW1vbmpzIFwiQGF3cy1zZGsvY2xpZW50LWNsb3VkdHJhaWxcIiIsIndlYnBhY2s6Ly8vZXh0ZXJuYWwgY29tbW9uanMgXCJAYXdzLXNkay9jbGllbnQtY29uZmlnLXNlcnZpY2VcIiIsIndlYnBhY2s6Ly8vZXh0ZXJuYWwgY29tbW9uanMgXCJAYXdzLXNkay9jbGllbnQtY29udHJvbHRvd2VyXCIiLCJ3ZWJwYWNrOi8vL2V4dGVybmFsIGNvbW1vbmpzIFwiQGF3cy1zZGsvY2xpZW50LWNvc3QtYW5kLXVzYWdlLXJlcG9ydC1zZXJ2aWNlXCIiLCJ3ZWJwYWNrOi8vL2V4dGVybmFsIG5vZGUtY29tbW9uanMgXCJub2RlOmNvbnNvbGVcIiIsIndlYnBhY2s6Ly8vZXh0ZXJuYWwgbm9kZS1jb21tb25qcyBcIm5vZGU6c3RyZWFtXCIiLCJ3ZWJwYWNrOi8vL2V4dGVybmFsIG5vZGUtY29tbW9uanMgXCJmc1wiIiwid2VicGFjazovLy8uL2J1aWxkL3NyYy9hY3Rpb25zL2NyZWF0ZS1yZXBvcnQuanMiLCJ3ZWJwYWNrOi8vLy4vYnVpbGQvc3JjL2FjdGlvbnMvY3JlYXRlLWppcmFpbXBvcnQuanMiLCJ3ZWJwYWNrOi8vL2V4dGVybmFsIG5vZGUtY29tbW9uanMgXCJwYXRoXCIiLCJ3ZWJwYWNrOi8vL2V4dGVybmFsIGNvbW1vbmpzIFwiYXJjaGl2ZXJcIiIsIndlYnBhY2s6Ly8vLi9idWlsZC9hcHAuanMiLCJ3ZWJwYWNrOi8vLy4vYnVpbGQvc3JjL2FjdGlvbnMvZ2V0LXJlZ2lvbnMuanMiLCJ3ZWJwYWNrOi8vLy4vYnVpbGQvc3JjL2FjdGlvbnMvZGVmaW5lLWFjY291bnQtdHlwZS5qcyIsIndlYnBhY2s6Ly8vLi9idWlsZC9zcmMvYWN0aW9ucy9jaGVjay1pYW0tdXNlcnMuanMiLCJ3ZWJwYWNrOi8vLy4vYnVpbGQvc3JjL2FjdGlvbnMvY2hlY2stZWMyLWV4aXN0ZW5jZS5qcyIsIndlYnBhY2s6Ly8vLi9idWlsZC9zcmMvYWN0aW9ucy9jaGVjay12cGMtZXhpc3RlbmNlLmpzIiwid2VicGFjazovLy8uL2J1aWxkL3NyYy9hY3Rpb25zL2NoZWNrLWNsb3VkdHJhaWwtZXhpc3RlbmNlLmpzIiwid2VicGFjazovLy8uL2J1aWxkL3NyYy9hY3Rpb25zL2NoZWNrLWNvbmZpZy1leGlzdGVuY2UuanMiLCJ3ZWJwYWNrOi8vLy4vYnVpbGQvc3JjL2FjdGlvbnMvZ2V0LW9yZy1kZXRhaWxzLmpzIiwid2VicGFjazovLy8uL2J1aWxkL3NyYy9hY3Rpb25zL2NoZWNrLWxlZ2FjeS1jdXIuanMiLCJ3ZWJwYWNrOi8vLy4vYnVpbGQvc3JjL2FjdGlvbnMvZ2V0LWVuYWJsZWQtb3JnLXBvbGljeS10eXBlcy5qcyIsIndlYnBhY2s6Ly8vLi9idWlsZC9zcmMvYWN0aW9ucy9nZXQtZW5hYmxlZC1vcmctc2VydmljZXMuanMiLCJ3ZWJwYWNrOi8vLy4vYnVpbGQvc3JjL2FjdGlvbnMvY2hlY2stb3JnLWNsb3VkZm9ybWF0aW9uLmpzIiwid2VicGFjazovLy8uL2J1aWxkL3NyYy9hY3Rpb25zL2NoZWNrLWNvbnRyb2wtdG93ZXIuanMiLCJ3ZWJwYWNrOi8vLy4vYnVpbGQvc3JjL2FjdGlvbnMvZ2V0LWlkYy1pbmZvLmpzIiwid2VicGFjazovLy8uL2J1aWxkL3NyYy9hY3Rpb25zL2dldC1vcmctZGEtYWNjb3VudHMuanMiLCJ3ZWJwYWNrOi8vLy4vYnVpbGQvc3JjL2FjdGlvbnMvZ2V0LW9yZy1tZW1iZXItYWNjb3VudHMuanMiLCJ3ZWJwYWNrOi8vLy4vYnVpbGQvc3JjL2FjdGlvbnMvZ2V0LW9yZy1vdXMuanMiLCJ3ZWJwYWNrOi8vLy4vYnVpbGQvc3JjL2FjdGlvbnMvY3JlYXRlLWFzYW5haW1wb3J0LmpzIiwid2VicGFjazovLy8uL2J1aWxkL3NyYy9hY3Rpb25zL3ppcC1hc3Nlc3NtZW50LmpzIl0sInNvdXJjZXNDb250ZW50IjpbImNvbnN0IF9fV0VCUEFDS19OQU1FU1BBQ0VfT0JKRUNUX18gPSByZXF1aXJlKFwiQGF3cy1zZGsvY2xpZW50LXN0c1wiKTsiLCJjb25zdCBfX1dFQlBBQ0tfTkFNRVNQQUNFX09CSkVDVF9fID0gcmVxdWlyZShcIkBhd3Mtc2RrL2NsaWVudC1vcmdhbml6YXRpb25zXCIpOyIsImNvbnN0IF9fV0VCUEFDS19OQU1FU1BBQ0VfT0JKRUNUX18gPSByZXF1aXJlKFwiQGF3cy1zZGsvY2xpZW50LWlhbVwiKTsiLCJjb25zdCBfX1dFQlBBQ0tfTkFNRVNQQUNFX09CSkVDVF9fID0gcmVxdWlyZShcIkBhd3Mtc2RrL2NsaWVudC1jbG91ZGZvcm1hdGlvblwiKTsiLCJjb25zdCBfX1dFQlBBQ0tfTkFNRVNQQUNFX09CSkVDVF9fID0gcmVxdWlyZShcIkBhd3Mtc2RrL2NsaWVudC1zc28tYWRtaW5cIik7IiwiY29uc3QgX19XRUJQQUNLX05BTUVTUEFDRV9PQkpFQ1RfXyA9IHJlcXVpcmUoXCJAYXdzLXNkay9jbGllbnQtZWMyXCIpOyIsImNvbnN0IF9fV0VCUEFDS19OQU1FU1BBQ0VfT0JKRUNUX18gPSByZXF1aXJlKFwiQGF3cy1zZGsvY2xpZW50LWNsb3VkdHJhaWxcIik7IiwiY29uc3QgX19XRUJQQUNLX05BTUVTUEFDRV9PQkpFQ1RfXyA9IHJlcXVpcmUoXCJAYXdzLXNkay9jbGllbnQtY29uZmlnLXNlcnZpY2VcIik7IiwiY29uc3QgX19XRUJQQUNLX05BTUVTUEFDRV9PQkpFQ1RfXyA9IHJlcXVpcmUoXCJAYXdzLXNkay9jbGllbnQtY29udHJvbHRvd2VyXCIpOyIsImNvbnN0IF9fV0VCUEFDS19OQU1FU1BBQ0VfT0JKRUNUX18gPSByZXF1aXJlKFwiQGF3cy1zZGsvY2xpZW50LWNvc3QtYW5kLXVzYWdlLXJlcG9ydC1zZXJ2aWNlXCIpOyIsImNvbnN0IF9fV0VCUEFDS19OQU1FU1BBQ0VfT0JKRUNUX18gPSByZXF1aXJlKFwibm9kZTpjb25zb2xlXCIpOyIsImNvbnN0IF9fV0VCUEFDS19OQU1FU1BBQ0VfT0JKRUNUX18gPSByZXF1aXJlKFwibm9kZTpzdHJlYW1cIik7IiwiY29uc3QgX19XRUJQQUNLX05BTUVTUEFDRV9PQkpFQ1RfXyA9IHJlcXVpcmUoXCJmc1wiKTsiLCJpbXBvcnQgeyBDb25zb2xlIH0gZnJvbSAnbm9kZTpjb25zb2xlJztcbmltcG9ydCB7IFRyYW5zZm9ybSB9IGZyb20gJ25vZGU6c3RyZWFtJztcbmltcG9ydCAqIGFzIGZzIGZyb20gJ2ZzJztcbmNvbnN0IHRzID0gbmV3IFRyYW5zZm9ybSh7IHRyYW5zZm9ybShjaHVuaywgZW5jLCBjYikgeyBjYihudWxsLCBjaHVuayk7IH0gfSk7XG5jb25zdCBsb2dnZXIgPSBuZXcgQ29uc29sZSh7IHN0ZG91dDogdHMgfSk7XG5mdW5jdGlvbiBnZXRUYWJsZShkYXRhKSB7XG4gICAgbG9nZ2VyLnRhYmxlKGRhdGEpO1xuICAgIHJldHVybiAodHMucmVhZCgpIHx8ICcnKS50b1N0cmluZygpO1xufVxuYXN5bmMgZnVuY3Rpb24gY3JlYXRlUmVwb3J0KGFzc2Vzc21lbnQpIHtcbiAgICBsZXQgdGFza3MgPSBbXTtcbiAgICBsZXQgZGF0ZVRpbWUgPSBuZXcgRGF0ZSgpO1xuICAgIGNvbnN0IHJlcG9ydEZpbGUgPSBcIi4vY2ZhdC50eHRcIjtcbiAgICBsZXQgcmVwb3J0ID0gXCJDbG91ZCBGb3VuZGF0aW9uIEFzc2Vzc21lbnQgVG9vbFwiO1xuICAgIHJlcG9ydCArPSBgXFxuR2VuZXJhdGVkIG9uOiAke2RhdGVUaW1lLnRvVVRDU3RyaW5nKCl9IFxcblxcbmA7XG4gICAgbGV0IHNjb3JlID0gMDtcbiAgICBsZXQgdG90YWxSZXF1aXJlZExvZSA9IDA7XG4gICAgbGV0IHRvdGFsU2NvcmUgPSAwO1xuICAgIGxldCBjZmF0U3RhdHVzID0gXCJDT01QTEVURVwiO1xuICAgIGlmIChhc3Nlc3NtZW50LmNmYXRDaGVja3MgJiYgYXNzZXNzbWVudC5jZmF0Q2hlY2tzLmxlbmd0aCA+IDApIHtcbiAgICAgICAgcmVwb3J0ICs9IGBcXG5JbmNvbXBsZXRlIFJlcXVpcmVtZW50czpgO1xuICAgICAgICBmb3IgKGNvbnN0IGNoZWNrIG9mIGFzc2Vzc21lbnQuY2ZhdENoZWNrcykge1xuICAgICAgICAgICAgdG90YWxTY29yZSArPSBjaGVjay53ZWlnaHQ7XG4gICAgICAgICAgICBpZiAoY2hlY2sucmVxdWlyZWQgPT09IHRydWUgJiYgY2hlY2suc3RhdHVzID09PSAnaW5jb21wbGV0ZScpIHtcbiAgICAgICAgICAgICAgICByZXBvcnQgKz0gYFxcbiAgICBJTkNPTVBMRVRFOiAke2NoZWNrLmNoZWNrfWA7XG4gICAgICAgICAgICAgICAgdG90YWxSZXF1aXJlZExvZSArPSBjaGVjay5sb2U7XG4gICAgICAgICAgICAgICAgY2ZhdFN0YXR1cyA9IFwiSU5DT01QTEVURVwiO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGNoZWNrLnN0YXR1cyA9PT0gJ2NvbXBsZXRlJykge1xuICAgICAgICAgICAgICAgIHNjb3JlICs9IGNoZWNrLndlaWdodDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXBvcnQgKz0gYFxcblxcbj09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxcbmA7XG4gICAgICAgIHJlcG9ydCArPSBgXFxuRm91bmRhdGlvbiBTdGF0dXM6ICR7Y2ZhdFN0YXR1c31gO1xuICAgICAgICBpZiAoY2ZhdFN0YXR1cyA9PT0gXCJJTkNPTVBMRVRFXCIpIHtcbiAgICAgICAgICAgIHJlcG9ydCArPSBgXFxuRXN0aW1hdGUgb2YgUmVxdWlyZWQgTGV2ZWwgb2YgRWZmb3J0IChMT0UpOiAke3RvdGFsUmVxdWlyZWRMb2V9IGhvdXJzYDtcbiAgICAgICAgfVxuICAgICAgICByZXBvcnQgKz0gYFxcbkNGQVQgU2NvcmU6ICR7c2NvcmV9IG91dCBvZiAke3RvdGFsU2NvcmV9YDtcbiAgICAgICAgcmVwb3J0ICs9IGBcXG5cXG49PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cXG5gO1xuICAgICAgICByZXBvcnQgKz0gYFxcbkZvdW5kYXRpb24gQ2hlY2tzOlxcbmA7XG4gICAgICAgIGlmIChhc3Nlc3NtZW50LmNmYXRDaGVja3MgJiYgYXNzZXNzbWVudC5jZmF0Q2hlY2tzLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgIGNvbnN0IHN0clRhYmxlID0gZ2V0VGFibGUoYXNzZXNzbWVudC5jZmF0Q2hlY2tzKTtcbiAgICAgICAgICAgIHJlcG9ydCArPSBgJHtzdHJUYWJsZX1gO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJlcG9ydCArPSBgXFxuXFxuU3RhcnQgRGV0YWlsZWQgUmVwb3J0OlxcblxcbmA7XG4gICAgcmVwb3J0ICs9IGBcXG4qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKipgO1xuICAgIHJlcG9ydCArPSBgXFxuICAgICAgICAgICAgICAgICAgIE1BTkFHRU1FTlQgQUNDT1VOVGA7XG4gICAgcmVwb3J0ICs9IGBcXG4qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKipgO1xuICAgIHJlcG9ydCArPSBgXFxuXFxuQVdTIEFDQ09VTlQgVFlQRVxcbmA7XG4gICAgcmVwb3J0ICs9IGBcXG4gIElzIGluIEFXUyBPcmdhbml6YXRpb246ICR7YXNzZXNzbWVudC5vcmdhbml6YXRpb25EZXBsb3l9YDtcbiAgICByZXBvcnQgKz0gYFxcbiAgQXNzZXNzaW5nIEFXUyBNYW5hZ2VtZW50IEFjY291bnQ6ICR7YXNzZXNzbWVudC5tYW5hZ2VtZW50QWNjb3VudH1gO1xuICAgIHJlcG9ydCArPSBgXFxuXFxuSUFNIFVTRVJTIENIRUNLXFxuYDtcbiAgICBpZiAoYXNzZXNzbWVudC5pYW1Vc2VyQ2hlY2tzICYmIGFzc2Vzc21lbnQuaWFtVXNlckNoZWNrcy5sZW5ndGggPiAwKSB7XG4gICAgICAgIGZvciAoY29uc3QgaWFtVXNlciBvZiBhc3Nlc3NtZW50LmlhbVVzZXJDaGVja3MpIHtcbiAgICAgICAgICAgIHJlcG9ydCArPSBgXFxuICBJQU0gVXNlcjogJHtpYW1Vc2VyLnVzZXJOYW1lfWA7XG4gICAgICAgICAgICBpZiAoaWFtVXNlci5hY2Nlc3NLZXlJZCkge1xuICAgICAgICAgICAgICAgIHJlcG9ydCArPSBgXFxuICAgIFVzZXIgQVBJIEtleSBJRDogJHtpYW1Vc2VyLmFjY2Vzc0tleUlkfWA7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXBvcnQgKz0gYFxcbmA7XG4gICAgICAgIH1cbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIHJlcG9ydCArPSBgXFxuICBObyBJQU0gVXNlcnMgZm91bmQuYDtcbiAgICB9XG4gICAgcmVwb3J0ICs9IGBcXG5cXG5FQzIgSU5TVEFOQ0UgQ0hFQ0tcXG5gO1xuICAgIGlmIChhc3Nlc3NtZW50LmVjMkNoZWNrcyAmJiBhc3Nlc3NtZW50LmVjMkNoZWNrcy5maW5kKHBhcmFtID0+IHBhcmFtLmVjMkZvdW5kID09PSB0cnVlKSkge1xuICAgICAgICBmb3IgKGNvbnN0IGVjMiBvZiBhc3Nlc3NtZW50LmVjMkNoZWNrcykge1xuICAgICAgICAgICAgaWYgKGVjMi5lYzJGb3VuZCkge1xuICAgICAgICAgICAgICAgIHJlcG9ydCArPSBgXFxuICAke2VjMi5yZWdpb259IC0gZm91bmQgRUMyIEluc3RhbmNlKHMpLmA7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIHJlcG9ydCArPSBgXFxuICBObyBFQzIgaW5zdGFuY2VzIGZvdW5kLmA7XG4gICAgfVxuICAgIHJlcG9ydCArPSBgXFxuXFxuVlBDIENIRUNLXFxuYDtcbiAgICBpZiAoYXNzZXNzbWVudC52cGNDaGVja3MgJiYgYXNzZXNzbWVudC52cGNDaGVja3MubGVuZ3RoID4gMCkge1xuICAgICAgICBmb3IgKGNvbnN0IHZwY0ZpbmQgb2YgYXNzZXNzbWVudC52cGNDaGVja3MpIHtcbiAgICAgICAgICAgIGlmICh2cGNGaW5kLnZwY0ZvdW5kKSB7XG4gICAgICAgICAgICAgICAgcmVwb3J0ICs9IGBcXG4gICR7dnBjRmluZC5yZWdpb259IC0gZm91bmQgVlBDKHMpLmA7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIHJlcG9ydCArPSBgXFxuICBObyBWUENzIGZvdW5kLmA7XG4gICAgfVxuICAgIHJlcG9ydCArPSBgXFxuXFxuQVdTIENPTkZJRyBDSEVDS1xcbmA7XG4gICAgaWYgKGFzc2Vzc21lbnQuY29uZmlnRGV0YWlscyAmJiBhc3Nlc3NtZW50LmNvbmZpZ0RldGFpbHMuZmluZChwYXJhbSA9PiBwYXJhbS5jb25maWdSZWNvcmRlckZvdW5kID09PSB0cnVlKSkge1xuICAgICAgICBmb3IgKGNvbnN0IGNvbmZpZ0ZpbmQgb2YgYXNzZXNzbWVudC5jb25maWdEZXRhaWxzKSB7XG4gICAgICAgICAgICBpZiAoY29uZmlnRmluZC5jb25maWdSZWNvcmRlckZvdW5kKSB7XG4gICAgICAgICAgICAgICAgcmVwb3J0ICs9IGBcXG4gICR7Y29uZmlnRmluZC5yZWdpb259IC0gQ29uZmlnIFJlY29yZGVyIGZvdW5kYDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChjb25maWdGaW5kLmNvbmZpZ0RlbGl2ZXJ5Q2hhbm5lbEZvdW5kKSB7XG4gICAgICAgICAgICAgICAgcmVwb3J0ICs9IGBcXG4gICR7Y29uZmlnRmluZC5yZWdpb259IC0gQ29uZmlnIERlbGl2ZXJ5IENoYW5uZWwgZm91bmRgO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICByZXBvcnQgKz0gYFxcbiAgTm8gQVdTIENvbmZpZyByZXNvdXJjZSBkaXNjb3ZlcmVkYDtcbiAgICB9XG4gICAgcmVwb3J0ICs9IGBcXG5cXG5NQU5BR0VNRU5UIEFDQ09VTlQgUkVDT01NRU5ERUQgVEFTS1M6YDtcbiAgICBjb25zdCBtYUNhdGVnb3J5ID0gXCJNYW5hZ2VtZW50IEFjY291bnRcIjtcbiAgICBpZiAoYXNzZXNzbWVudC5pYW1Vc2VyQ2hlY2tzICYmIGFzc2Vzc21lbnQuaWFtVXNlckNoZWNrcy5sZW5ndGggPiAwKSB7XG4gICAgICAgIGZvciAoY29uc3QgaWFtVXNlciBvZiBhc3Nlc3NtZW50LmlhbVVzZXJDaGVja3MpIHtcbiAgICAgICAgICAgIGxldCBpYW1UYXNrID0geyB0aXRsZTogJ1JlbW92ZSBJQU0gdXNlcicsIGNhdGVnb3J5OiBtYUNhdGVnb3J5LCBkZXRhaWw6IGBSZW1vdmUgSUFNIHVzZXIgJHtpYW1Vc2VyLnVzZXJOYW1lfWAgfTtcbiAgICAgICAgICAgIGNvbnN0IG1lc3NhZ2UgPSBgJHtpYW1UYXNrLnRpdGxlfSAtICR7aWFtVGFzay5jYXRlZ29yeX0gLSAke2lhbVRhc2suZGV0YWlsfWA7XG4gICAgICAgICAgICB0YXNrcy5wdXNoKGlhbVRhc2spO1xuICAgICAgICAgICAgcmVwb3J0ICs9IGBcXG4gICR7bWVzc2FnZX1gO1xuICAgICAgICAgICAgaWYgKGlhbVVzZXIuYWNjZXNzS2V5SWQpIHtcbiAgICAgICAgICAgICAgICBsZXQgaWFtQXBpVGFzayA9IHsgdGl0bGU6ICdSZW1vdmUgSUFNIHVzZXInLCBjYXRlZ29yeTogbWFDYXRlZ29yeSwgZGV0YWlsOiBgUmVtb3ZlIElBTSB1c2VyIEFQSSBrZXkgJHtpYW1Vc2VyLmFjY2Vzc0tleUlkfSBmb3IgJHtpYW1Vc2VyLnVzZXJOYW1lfWAgfTtcbiAgICAgICAgICAgICAgICBjb25zdCBtZXNzYWdlID0gYCR7aWFtQXBpVGFzay50aXRsZX0gLSAke2lhbUFwaVRhc2suY2F0ZWdvcnl9IC0gJHtpYW1BcGlUYXNrLmRldGFpbH1gO1xuICAgICAgICAgICAgICAgIHJlcG9ydCArPSBgXFxuICAke21lc3NhZ2V9YDtcbiAgICAgICAgICAgICAgICB0YXNrcy5wdXNoKGlhbUFwaVRhc2spO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICAgIGlmIChhc3Nlc3NtZW50LmVjMkNoZWNrcyAmJiBhc3Nlc3NtZW50LmVjMkNoZWNrcy5maW5kKHBhcmFtID0+IHBhcmFtLmVjMkZvdW5kID09PSB0cnVlKSkge1xuICAgICAgICBmb3IgKGNvbnN0IGVjMiBvZiBhc3Nlc3NtZW50LmVjMkNoZWNrcykge1xuICAgICAgICAgICAgaWYgKGVjMi5lYzJGb3VuZCAmJiBlYzIucmVnaW9uKSB7XG4gICAgICAgICAgICAgICAgbGV0IGVjMlRhc2sgPSB7IHRpdGxlOiAnRGVsZXRlIEVDMiBpbnN0YW5jZScsIGNhdGVnb3J5OiBtYUNhdGVnb3J5LCBkZXRhaWw6IGBEZWxldGUgRUMyIGluc3RhbmNlIGluICR7ZWMyLnJlZ2lvbn1gIH07XG4gICAgICAgICAgICAgICAgY29uc3QgbWVzc2FnZSA9IGAke2VjMlRhc2sudGl0bGV9IC0gJHtlYzJUYXNrLmNhdGVnb3J5fSAtICR7ZWMyVGFzay5kZXRhaWx9YDtcbiAgICAgICAgICAgICAgICByZXBvcnQgKz0gYFxcbiAgJHttZXNzYWdlfWA7XG4gICAgICAgICAgICAgICAgdGFza3MucHVzaChlYzJUYXNrKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbiAgICBpZiAoYXNzZXNzbWVudC52cGNDaGVja3MgJiYgYXNzZXNzbWVudC52cGNDaGVja3MubGVuZ3RoID4gMCkge1xuICAgICAgICBmb3IgKGNvbnN0IHZwY0ZpbmQgb2YgYXNzZXNzbWVudC52cGNDaGVja3MpIHtcbiAgICAgICAgICAgIGlmICh2cGNGaW5kLnZwY0ZvdW5kICYmIHZwY0ZpbmQucmVnaW9uKSB7XG4gICAgICAgICAgICAgICAgbGV0IHZwY1Rhc2sgPSB7IHRpdGxlOiAnRGVsZXRlIFZQQycsIGNhdGVnb3J5OiBtYUNhdGVnb3J5LCBkZXRhaWw6IGBEZWxldGUgVlBDIGluICR7dnBjRmluZC5yZWdpb259YCB9O1xuICAgICAgICAgICAgICAgIGNvbnN0IG1lc3NhZ2UgPSBgJHt2cGNUYXNrLnRpdGxlfSAtICR7dnBjVGFzay5jYXRlZ29yeX0gLSAke3ZwY1Rhc2suZGV0YWlsfWA7XG4gICAgICAgICAgICAgICAgcmVwb3J0ICs9IGBcXG4gICR7bWVzc2FnZX1gO1xuICAgICAgICAgICAgICAgIHRhc2tzLnB1c2godnBjVGFzayk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmVwb3J0ICs9IGBcXG5cXG4qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKipgO1xuICAgIHJlcG9ydCArPSBgXFxuICAgICAgICAgICAgICAgICAgICBHT1ZFUk5BTkNFYDtcbiAgICByZXBvcnQgKz0gYFxcbioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKmA7XG4gICAgcmVwb3J0ICs9IGBcXG5cXG5BV1MgT1JHQU5JWkFUSU9OIFBPTElDWSBUWVBFU1xcbmA7XG4gICAgcmVwb3J0ICs9IGBcXG4gIFNlcnZpY2UgQ29udHJvbCBQb2xpY2llcyAoU0NQKSBlbmFibGVkOiAke2Fzc2Vzc21lbnQuc2NwRW5hYmxlZH1gO1xuICAgIHJlcG9ydCArPSBgXFxuICBUYWcgUG9saWNpZXMgZW5hYmxlZDogJHthc3Nlc3NtZW50LnRhZ1BvbGljeUVuYWJsZWR9YDtcbiAgICByZXBvcnQgKz0gYFxcbiAgQmFja3VwIFBvbGljaWVzIGVuYWJsZWQ6ICR7YXNzZXNzbWVudC5iYWNrdXBQb2xpY3lFbmFibGVkfWA7XG4gICAgcmVwb3J0ICs9IGBcXG5cXG5BV1MgT1JHQU5JWkFUSU9OIENMT1VERk9STUFUSU9OXFxuYDtcbiAgICByZXBvcnQgKz0gYFxcbiAgQVdTIENsb3VkRm9ybWF0aW9uIE9yZ2FuaXphdGlvbiBzdGFjayBzZXRzIHN0YXR1cyA6ICR7YXNzZXNzbWVudC5vcmdDbG91ZEZvcm1hdGlvblN0YXR1c31gO1xuICAgIHJlcG9ydCArPSBgXFxuXFxuQ0xPVURUUkFJTCBDSEVDS1xcbmA7XG4gICAgaWYgKGFzc2Vzc21lbnQuY2xvdWRUcmFpbERldGFpbHMgJiYgYXNzZXNzbWVudC5jbG91ZFRyYWlsRGV0YWlscy5sZW5ndGggPiAwKSB7XG4gICAgICAgIGZvciAoY29uc3QgY3RGaW5kIG9mIGFzc2Vzc21lbnQuY2xvdWRUcmFpbERldGFpbHMpIHtcbiAgICAgICAgICAgIGlmIChjdEZpbmQudHJhaWxGb3VuZCkge1xuICAgICAgICAgICAgICAgIHJlcG9ydCArPSBgXFxuICBDbG91ZFRyYWlsIGZvdW5kIGluICR7Y3RGaW5kLnJlZ2lvbn1gO1xuICAgICAgICAgICAgICAgIHJlcG9ydCArPSBgXFxuICAgIElzIE9yZ2FuaXphdGlvbiBUcmFpbDogJHtjdEZpbmQuaXNPcmdUcmFpbH1gO1xuICAgICAgICAgICAgICAgIHJlcG9ydCArPSBgXFxuICAgIElzIE11bHRpUmVnaW9uOiAke2N0RmluZC5pc011bHRpUmVnaW9ufWA7XG4gICAgICAgICAgICAgICAgcmVwb3J0ICs9IGBcXG5gO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICByZXBvcnQgKz0gYFxcbiAgTm8gQVdTIENsb3VkVHJhaWwgcmVzb3VyY2UgZGlzY292ZXJlZGA7XG4gICAgfVxuICAgIHJlcG9ydCArPSBgXFxuXFxuR09WRVJOQU5DRSBTRVJWSUNFUyBFTkFCTEVEIElOIEFXUyBPUkdBTklaQVRJT046XFxuYDtcbiAgICBpZiAoYXNzZXNzbWVudC5vcmdTZXJ2aWNlcykge1xuICAgICAgICBpZiAoYXNzZXNzbWVudC5vcmdTZXJ2aWNlcy5maW5kKHBhcmFtID0+IHBhcmFtLnNlcnZpY2UgPT09ICdjbG91ZHRyYWlsLmFtYXpvbmF3cy5jb20nKSkge1xuICAgICAgICAgICAgcmVwb3J0ICs9IGBcXG4gIEFXUyBDbG91ZFRyYWlsYDtcbiAgICAgICAgfVxuICAgICAgICBpZiAoYXNzZXNzbWVudC5vcmdTZXJ2aWNlcy5maW5kKHBhcmFtID0+IHBhcmFtLnNlcnZpY2UgPT09ICdjb25maWcuYW1hem9uYXdzLmNvbScpKSB7XG4gICAgICAgICAgICByZXBvcnQgKz0gYFxcbiAgQVdTIENvbmZpZ2A7XG4gICAgICAgIH1cbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIHJlcG9ydCArPSBgXFxuICBObyBnb3Zlcm5hbmNlIHNlcnZpY2UgZW5hYmxlZGA7XG4gICAgfVxuICAgIC8vLy8vIFNFVCBUSEUgQkFDS0xPRyBUQVNLIEZPUiBHT1ZFUk5BTkNFIC8vLy8vXG4gICAgcmVwb3J0ICs9IGBcXG5cXG5HT1ZFUk5BTkNFIFJFQ09NTUVOREVEIFRBU0tTOmA7XG4gICAgY29uc3QgZ292Q2F0ZWdvcnkgPSBcIkdvdmVybmFuY2VcIjtcbiAgICBpZiAoIWFzc2Vzc21lbnQub3JnU2VydmljZXMgfHwgIWFzc2Vzc21lbnQub3JnU2VydmljZXMuZmluZChwYXJhbSA9PiBwYXJhbS5zZXJ2aWNlID09PSAnY2xvdWR0cmFpbC5hbWF6b25hd3MuY29tJykpIHtcbiAgICAgICAgY29uc3QgY3RPcmdTZXJ2aWNlVGFzayA9IHsgdGl0bGU6ICdFbmFibGUgQVdTIENsb3VkVHJhaWwnLCBjYXRlZ29yeTogZ292Q2F0ZWdvcnksIGRldGFpbDogYEVuYWJsZSBBV1MgQ2xvdWRUcmFpbCBpbiBBV1MgT3JnYW5pemF0aW9uYCB9O1xuICAgICAgICB0YXNrcy5wdXNoKGN0T3JnU2VydmljZVRhc2spO1xuICAgICAgICBjb25zdCBtZXNzYWdlID0gYCR7Y3RPcmdTZXJ2aWNlVGFzay50aXRsZX0gLSAke2N0T3JnU2VydmljZVRhc2suY2F0ZWdvcnl9IC0gJHtjdE9yZ1NlcnZpY2VUYXNrLmRldGFpbH1gO1xuICAgICAgICByZXBvcnQgKz0gYFxcbiAgJHttZXNzYWdlfWA7XG4gICAgfVxuICAgIGlmICghYXNzZXNzbWVudC5vcmdTZXJ2aWNlcyB8fCAhYXNzZXNzbWVudC5vcmdTZXJ2aWNlcy5maW5kKHBhcmFtID0+IHBhcmFtLnNlcnZpY2UgPT09ICdjb25maWcuYW1hem9uYXdzLmNvbScpKSB7XG4gICAgICAgIGNvbnN0IGNvbmZpZ09yZ1NlcnZpY2VUYXNrID0geyB0aXRsZTogJ0VuYWJsZSBBV1MgQ29uZmlnJywgY2F0ZWdvcnk6IGdvdkNhdGVnb3J5LCBkZXRhaWw6IGBFbmFibGUgQVdTIENvbmZpZyBpbiBBV1MgT3JnYW5pemF0aW9uYCB9O1xuICAgICAgICB0YXNrcy5wdXNoKGNvbmZpZ09yZ1NlcnZpY2VUYXNrKTtcbiAgICAgICAgY29uc3QgbWVzc2FnZSA9IGAke2NvbmZpZ09yZ1NlcnZpY2VUYXNrLnRpdGxlfSAtICR7Y29uZmlnT3JnU2VydmljZVRhc2suY2F0ZWdvcnl9IC0gJHtjb25maWdPcmdTZXJ2aWNlVGFzay5kZXRhaWx9YDtcbiAgICAgICAgcmVwb3J0ICs9IGBcXG4gICR7bWVzc2FnZX1gO1xuICAgIH1cbiAgICBpZiAoIWFzc2Vzc21lbnQuc2NwRW5hYmxlZCkge1xuICAgICAgICBjb25zdCBzY3BFbmFibGVkVGFzayA9IHsgdGl0bGU6ICdFbmFibGUgU0NQJywgY2F0ZWdvcnk6IGdvdkNhdGVnb3J5LCBkZXRhaWw6IGBFbmFibGUgU0NQIGluIEFXUyBPcmdhbml6YXRpb25gIH07XG4gICAgICAgIHRhc2tzLnB1c2goc2NwRW5hYmxlZFRhc2spO1xuICAgICAgICBjb25zdCBtZXNzYWdlID0gYCR7c2NwRW5hYmxlZFRhc2sudGl0bGV9IC0gJHtzY3BFbmFibGVkVGFzay5jYXRlZ29yeX0gLSAke3NjcEVuYWJsZWRUYXNrLmRldGFpbH1gO1xuICAgICAgICByZXBvcnQgKz0gYFxcbiAgJHttZXNzYWdlfWA7XG4gICAgfVxuICAgIGlmICghYXNzZXNzbWVudC50YWdQb2xpY3lFbmFibGVkKSB7XG4gICAgICAgIGxldCB0YWdQb2xpY3lFbmFibGVkVGFzayA9IHsgdGl0bGU6ICdFbmFibGUgVGFnIFBvbGljeScsIGNhdGVnb3J5OiBnb3ZDYXRlZ29yeSwgZGV0YWlsOiBgRW5hYmxlIFRhZyBQb2xpY3kgaW4gQVdTIE9yZ2FuaXphdGlvbmAgfTtcbiAgICAgICAgdGFza3MucHVzaCh0YWdQb2xpY3lFbmFibGVkVGFzayk7XG4gICAgICAgIGNvbnN0IG1lc3NhZ2UgPSBgJHt0YWdQb2xpY3lFbmFibGVkVGFzay50aXRsZX0gLSAke3RhZ1BvbGljeUVuYWJsZWRUYXNrLmNhdGVnb3J5fSAtICR7dGFnUG9saWN5RW5hYmxlZFRhc2suZGV0YWlsfWA7XG4gICAgICAgIHJlcG9ydCArPSBgXFxuICAke21lc3NhZ2V9YDtcbiAgICB9XG4gICAgaWYgKCFhc3Nlc3NtZW50LmJhY2t1cFBvbGljeUVuYWJsZWQpIHtcbiAgICAgICAgbGV0IGJhY2t1cFBvbGljeUVuYWJsZWRUYXNrID0geyB0aXRsZTogJ0VuYWJsZSBCYWNrdXAgUG9saWN5JywgY2F0ZWdvcnk6IGdvdkNhdGVnb3J5LCBkZXRhaWw6IGBFbmFibGUgQmFja3VwIFBvbGljeSBpbiBBV1MgT3JnYW5pemF0aW9uYCB9O1xuICAgICAgICB0YXNrcy5wdXNoKGJhY2t1cFBvbGljeUVuYWJsZWRUYXNrKTtcbiAgICAgICAgY29uc3QgbWVzc2FnZSA9IGAke2JhY2t1cFBvbGljeUVuYWJsZWRUYXNrLnRpdGxlfSAtICR7YmFja3VwUG9saWN5RW5hYmxlZFRhc2suY2F0ZWdvcnl9IC0gJHtiYWNrdXBQb2xpY3lFbmFibGVkVGFzay5kZXRhaWx9YDtcbiAgICAgICAgcmVwb3J0ICs9IGBcXG4gICR7bWVzc2FnZX1gO1xuICAgIH1cbiAgICByZXBvcnQgKz0gYFxcblxcbioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKmA7XG4gICAgcmVwb3J0ICs9IGBcXG4gICAgICAgICAgICAgICAgRklOQU5DSUFMIE1BTkFHRU1FTlRgO1xuICAgIHJlcG9ydCArPSBgXFxuKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqYDtcbiAgICByZXBvcnQgKz0gYFxcblxcbkxlZ2FjeSBDVVJgO1xuICAgIHJlcG9ydCArPSBgXFxuICBJcyBsZWdhY3kgQ1VSIHNldHVwOiAke2Fzc2Vzc21lbnQuaXNMZWdhY3lDdXJTZXR1cH1gO1xuICAgIHJlcG9ydCArPSBgXFxuXFxuQ0xPVUQgRklOQU5DSUFMIE1BTkFHRU1FTlQgUkVDT01NRU5ERUQgVEFTS1M6YDtcbiAgICBjb25zdCBmaW5DYXRlZ29yeSA9IFwiQ2xvdWQgRmluYW5jaWFsIE1hbmFnZW1lbnRcIjtcbiAgICBpZiAoIWFzc2Vzc21lbnQuaXNMZWdhY3lDdXJTZXR1cCkge1xuICAgICAgICBjb25zdCBsZWdhY3lDdXJTZXR1cFRhc2sgPSB7IHRpdGxlOiAnU2V0dXAgbGVnYWN5IENVUicsIGNhdGVnb3J5OiBmaW5DYXRlZ29yeSwgZGV0YWlsOiBgU2V0dXAgbGVnYWN5IENVUiBpbiBBV1MgT3JnYW5pemF0aW9uYCB9O1xuICAgICAgICB0YXNrcy5wdXNoKGxlZ2FjeUN1clNldHVwVGFzayk7XG4gICAgICAgIGNvbnN0IG1lc3NhZ2UgPSBgJHtsZWdhY3lDdXJTZXR1cFRhc2sudGl0bGV9IC0gJHtsZWdhY3lDdXJTZXR1cFRhc2suY2F0ZWdvcnl9IC0gJHtsZWdhY3lDdXJTZXR1cFRhc2suZGV0YWlsfWA7XG4gICAgICAgIHJlcG9ydCArPSBgXFxuICAke21lc3NhZ2V9YDtcbiAgICB9XG4gICAgcmVwb3J0ICs9IGBcXG5cXG4qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKipgO1xuICAgIHJlcG9ydCArPSBgXFxuICAgICAgICAgICAgICAgIE1VTFRJLUFDQ09VTlQgU1RSQVRFR1lgO1xuICAgIHJlcG9ydCArPSBgXFxuKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqYDtcbiAgICByZXBvcnQgKz0gYFxcblxcbkFXUyBPUkdBTklaQVRJT04gREVUQUlMU1xcbmA7XG4gICAgcmVwb3J0ICs9IGBcXG4gIEFXUyBPcmdhbml6YXRpb24gSWQ6ICR7YXNzZXNzbWVudC5vcmdJZH1gO1xuICAgIHJlcG9ydCArPSBgXFxuICBBV1MgT3JnYW5pemF0aW9uIEFSTjogJHthc3Nlc3NtZW50Lm9yZ0Fybn1gO1xuICAgIHJlcG9ydCArPSBgXFxuICBBV1MgT3JnYW5pemF0aW9uIFJvb3QgT1UgSWQ6ICR7YXNzZXNzbWVudC5vcmdSb290T3VJZH1gO1xuICAgIHJlcG9ydCArPSBgXFxuXFxuQVdTIE9SR0FOSVpBVElPTiBDTE9VREZPUk1BVElPTlxcbmA7XG4gICAgcmVwb3J0ICs9IGBcXG4gIEFXUyBDbG91ZEZvcm1hdGlvbiBPcmdhbml6YXRpb24gc3RhY2sgc2V0cyBzdGF0dXMgOiAke2Fzc2Vzc21lbnQub3JnQ2xvdWRGb3JtYXRpb25TdGF0dXN9YDtcbiAgICBsZXQgdHJhbnNpdGlvbmFsRm91bmQsIHN1c3BlbmRlZEZvdW5kLCBpbmZyYXN0cnVjdHVyZUZvdW5kID0gZmFsc2U7XG4gICAgbGV0IHdvcmtsb2Fkc0ZvdW5kID0gZmFsc2U7XG4gICAgbGV0IHNlY3VyaXR5Rm91bmQgPSBmYWxzZTtcbiAgICBpZiAoYXNzZXNzbWVudC5vcmdSb290T3VJZCkge1xuICAgICAgICByZXBvcnQgKz0gYFxcblxcbkFXUyBPUkdBTklaQVRJT04gVE9QLUxFVkVMIE9SR0FOSVpBVElPTiBVTklUU1xcbmA7XG4gICAgICAgIHJlcG9ydCArPSBgXFxuICBMaXN0IG9mIE9yZ2FuaXphdGlvbidzIHRvcC1sZXZlbCBPVXMgYW5kIEFXUyBhY2NvdW50czpgO1xuICAgICAgICBpZiAoYXNzZXNzbWVudC5vcmdPdUluZm8gJiYgYXNzZXNzbWVudC5vcmdPdUluZm8ubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgZm9yIChjb25zdCBvdSBvZiBhc3Nlc3NtZW50Lm9yZ091SW5mbykge1xuICAgICAgICAgICAgICAgIGlmIChvdS5uYW1lPy50b0xvd2VyQ2FzZSgpID09PSAnc3VzcGVuZGVkJykge1xuICAgICAgICAgICAgICAgICAgICBzdXNwZW5kZWRGb3VuZCA9IHRydWU7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmIChvdS5uYW1lPy50b0xvd2VyQ2FzZSgpID09PSAndHJhbnNpdGlvbmFsJykge1xuICAgICAgICAgICAgICAgICAgICB0cmFuc2l0aW9uYWxGb3VuZCA9IHRydWU7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmIChvdS5uYW1lPy50b0xvd2VyQ2FzZSgpID09PSAnd29ya2xvYWRzJykge1xuICAgICAgICAgICAgICAgICAgICB3b3JrbG9hZHNGb3VuZCA9IHRydWU7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmIChvdS5uYW1lPy50b0xvd2VyQ2FzZSgpID09PSAnc2VjdXJpdHknKSB7XG4gICAgICAgICAgICAgICAgICAgIHNlY3VyaXR5Rm91bmQgPSB0cnVlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAob3UubmFtZT8udG9Mb3dlckNhc2UoKSA9PT0gJ2luZnJhc3RydWN0dXJlJykge1xuICAgICAgICAgICAgICAgICAgICBpbmZyYXN0cnVjdHVyZUZvdW5kID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmVwb3J0ICs9IGBcXG4gICAgT3JnYW5pemF0aW9uYWwgVW5pdDogJHtvdS5uYW1lfWA7XG4gICAgICAgICAgICAgICAgcmVwb3J0ICs9IGBcXG4gICAgICBPcmdhbml6YXRpb25hbCBVbml0IElkOiAke291LmlkfWA7XG4gICAgICAgICAgICAgICAgaWYgKG91LmFjY291bnRzICYmIG91LmFjY291bnRzLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgICAgICAgICAgcmVwb3J0ICs9IGBcXG4gICAgICBBV1MgQWNjb3VudHM6YDtcbiAgICAgICAgICAgICAgICAgICAgZm9yIChjb25zdCBhY2NvdW50IG9mIG91LmFjY291bnRzKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXBvcnQgKz0gYFxcbiAgICAgICAgJHthY2NvdW50Lk5hbWV9YDtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICByZXBvcnQgKz0gYFxcbmA7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICByZXBvcnQgKz0gYFxcbiAgICAgIEFXUyBBY2NvdW50czogTm9uZWA7XG4gICAgICAgICAgICAgICAgICAgIHJlcG9ydCArPSBgXFxuYDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICByZXBvcnQgKz0gYFxcbiAgTm8gdG9wIGxldmVsIE9VcyBmb3VuZC5gO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJlcG9ydCArPSBgXFxuXFxuQVdTIE9SR0FOSVpBVElPTiBNRU1CRVIgQUNDT1VOVFNcXG5gO1xuICAgIGlmIChhc3Nlc3NtZW50Lm9yZ01lbWJlckFjY291bnRzICYmIGFzc2Vzc21lbnQub3JnTWVtYmVyQWNjb3VudHMubGVuZ3RoID4gMCkge1xuICAgICAgICBmb3IgKGNvbnN0IG1lbWJlckFjY291bnQgb2YgYXNzZXNzbWVudC5vcmdNZW1iZXJBY2NvdW50cykge1xuICAgICAgICAgICAgcmVwb3J0ICs9IGBcXG4gIEFjY291bnQ6ICR7bWVtYmVyQWNjb3VudC5hY2NvdW50TmFtZX1gO1xuICAgICAgICAgICAgcmVwb3J0ICs9IGBcXG4gIEFjY291bnQgRW1haWw6ICR7bWVtYmVyQWNjb3VudC5hY2NvdW50RW1haWx9XFxuYDtcbiAgICAgICAgfVxuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgcmVwb3J0ICs9IGBObyBtZW1iZXIgYWNjb3VudHMgZm91bmQgd2hpY2ggaXMgYW1hemluZyBhcyB0aGlzIGlzIHJ1bm5pbmcgZnJvbSBvbmUuYDtcbiAgICB9XG4gICAgcmVwb3J0ICs9IGBcXG5cXG5BV1MgT1JHQU5JWkFUSU9OIEVOQUJMRUQgU0VSVklDRVNcXG5gO1xuICAgIHJlcG9ydCArPSBgXFxuICBUaGUgZm9sbG93aW5nIEFXUyBTZXJ2aWNlcyBhcmUgZW5hYmxlZCB3aXRoaW4geW91ciBBV1MgT3JnYW5pemF0aW9uOmA7XG4gICAgaWYgKGFzc2Vzc21lbnQub3JnU2VydmljZXMgJiYgYXNzZXNzbWVudC5vcmdTZXJ2aWNlcy5sZW5ndGggPiAwKSB7XG4gICAgICAgIGZvciAoY29uc3Qgb3JnU2VydmljZSBvZiBhc3Nlc3NtZW50Lm9yZ1NlcnZpY2VzKSB7XG4gICAgICAgICAgICByZXBvcnQgKz0gYFxcbiAgICAke29yZ1NlcnZpY2Uuc2VydmljZX1gO1xuICAgICAgICB9XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICByZXBvcnQgKz0gYFxcbiAgICBObyB0cnVzdGVkIGFjY2VzcyBlbmFibGVkIGluIHRoZSBBV1MgT3JnYW5pemF0aW9uYDtcbiAgICB9XG4gICAgbGV0IGlkZW50aXR5RGVsZWdhdGVkID0gZmFsc2U7XG4gICAgbGV0IHNlY3VyaXR5SHViRGVsZWdhdGVkID0gZmFsc2U7XG4gICAgbGV0IGd1YXJkRHV0eURlbGVnYXRlZCA9IGZhbHNlO1xuICAgIGxldCBjb25maWdEZWxlZ2F0ZWQgPSBmYWxzZTtcbiAgICBsZXQgaWFtQWNjZXNzQW5hbHl6ZXJEZWxlZ2F0ZWQgPSBmYWxzZTtcbiAgICBsZXQgczNTdG9yYWdlTGVuc0RlbGVnYXRlZCA9IGZhbHNlO1xuICAgIGxldCBpcGFtRGVsZWdhdGVkID0gZmFsc2U7XG4gICAgbGV0IGFjY291bnREZWxlZ2F0ZWQgPSBmYWxzZTtcbiAgICBsZXQgYmFja3VwRGVsZWdhdGVkID0gZmFsc2U7XG4gICAgcmVwb3J0ICs9IGBcXG5cXG5BV1MgT1JHQU5JWkFUSU9OIElOVEVHUkFURUQgU0VSVklDRSBSRUdJU1RFUkVEIERFTEVHQVRFRCBBRE1JTlNcXG5gO1xuICAgIGlmIChhc3Nlc3NtZW50Lm9yZ0RlbGVnYXRlZEFkbWluQWNjb3VudHMgJiYgYXNzZXNzbWVudC5vcmdEZWxlZ2F0ZWRBZG1pbkFjY291bnRzLmxlbmd0aCA+IDApIHtcbiAgICAgICAgZm9yIChjb25zdCBhY2NvdW50IG9mIGFzc2Vzc21lbnQub3JnRGVsZWdhdGVkQWRtaW5BY2NvdW50cykge1xuICAgICAgICAgICAgcmVwb3J0ICs9IGBcXG4gIEFjY291bnQ6ICR7YWNjb3VudC5hY2NvdW50TmFtZX1gO1xuICAgICAgICAgICAgaWYgKGFjY291bnQuc2VydmljZXMgJiYgYWNjb3VudC5zZXJ2aWNlcy5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICAgICAgcmVwb3J0ICs9IGBcXG4gIERlbGVnYXRlZCBTZXJ2aWNlczpgO1xuICAgICAgICAgICAgICAgIGZvciAoY29uc3Qgc3J2IG9mIGFjY291bnQuc2VydmljZXMpIHtcbiAgICAgICAgICAgICAgICAgICAgcmVwb3J0ICs9IGBcXG4gICAgJHtzcnYuU2VydmljZVByaW5jaXBhbH1gO1xuICAgICAgICAgICAgICAgICAgICBpZiAoc3J2LlNlcnZpY2VQcmluY2lwYWwgPT09ICdzZWN1cml0eWh1Yi5hbWF6b25hd3MuY29tJykge1xuICAgICAgICAgICAgICAgICAgICAgICAgc2VjdXJpdHlIdWJEZWxlZ2F0ZWQgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGlmIChzcnYuU2VydmljZVByaW5jaXBhbCA9PT0gJ2d1YXJkZHV0eS5hbWF6b25hd3MuY29tJykge1xuICAgICAgICAgICAgICAgICAgICAgICAgZ3VhcmREdXR5RGVsZWdhdGVkID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBpZiAoc3J2LlNlcnZpY2VQcmluY2lwYWwgPT09ICdzc28uYW1hem9uYXdzLmNvbScpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlkZW50aXR5RGVsZWdhdGVkID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBpZiAoc3J2LlNlcnZpY2VQcmluY2lwYWwgPT09ICdjb25maWcuYW1hem9uYXdzLmNvbScpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbmZpZ0RlbGVnYXRlZCA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgaWYgKHNydi5TZXJ2aWNlUHJpbmNpcGFsID09PSAnYWNjZXNzLWFuYWx5emVyLmFtYXpvbmF3cy5jb20nKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpYW1BY2Nlc3NBbmFseXplckRlbGVnYXRlZCA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgaWYgKHNydi5TZXJ2aWNlUHJpbmNpcGFsID09PSAnc3RvcmFnZS1sZW5zLnMzLmFtYXpvbmF3cy5jb20nKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBzM1N0b3JhZ2VMZW5zRGVsZWdhdGVkID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBpZiAoc3J2LlNlcnZpY2VQcmluY2lwYWwgPT09ICdpcGFtLmFtYXpvbmF3cy5jb20nKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpcGFtRGVsZWdhdGVkID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBpZiAoc3J2LlNlcnZpY2VQcmluY2lwYWwgPT09ICdhY2NvdW50LmFtYXpvbmF3cy5jb20nKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBhY2NvdW50RGVsZWdhdGVkID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBpZiAoc3J2LlNlcnZpY2VQcmluY2lwYWwgPT09ICdiYWNrdXAuYW1hem9uYXdzLmNvbScpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJhY2t1cERlbGVnYXRlZCA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXBvcnQgKz0gYFxcbiBgO1xuICAgICAgICB9XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICByZXBvcnQgKz0gYFxcbiAgTm8gZGVsZWdhdGVkIGFkbWluIGFjY291bnRzIGluIEFXUyBPcmdhbml6YXRpb25gO1xuICAgIH1cbiAgICByZXBvcnQgKz0gYFxcblxcbk1VTFRJLUFDQ09VTlQgU1RSQVRFR1kgUkVDT01NRU5ERUQgVEFTS1M6YDtcbiAgICBsZXQgbWFzQ2F0ZWdvcnkgPSAnTXVsdGktQWNjb3VudCBTdHJhdGVneSc7XG4gICAgY29uc3QgYWNjb3VudEVtYWlsUmV2aWV3VGFzayA9IHsgdGl0bGU6ICdSZXZpZXcgQWNjb3VudCBFbWFpbCBBZGRyZXNzZXMnLCBjYXRlZ29yeTogbWFzQ2F0ZWdvcnksIGRldGFpbDogYFJldmlldyBBY2NvdW50IEVtYWlsIEFkZHJlc3NlcyBpbiBBV1MgT3JnYW5pemF0aW9uYCB9O1xuICAgIGNvbnN0IG1lc3NhZ2UgPSBgJHthY2NvdW50RW1haWxSZXZpZXdUYXNrLnRpdGxlfSAtICR7YWNjb3VudEVtYWlsUmV2aWV3VGFzay5jYXRlZ29yeX0gLSAke2FjY291bnRFbWFpbFJldmlld1Rhc2suZGV0YWlsfWA7XG4gICAgcmVwb3J0ICs9IGBcXG4gICR7bWVzc2FnZX1gO1xuICAgIGlmICghYXNzZXNzbWVudC5zY3BFbmFibGVkKSB7XG4gICAgICAgIGNvbnN0IHNjcEVuYWJsZWRUYXNrID0geyB0aXRsZTogJ0VuYWJsZSBTZXJ2aWNlIENvbnRyb2wgUG9saWN5JywgY2F0ZWdvcnk6IG1hc0NhdGVnb3J5LCBkZXRhaWw6IGBFbmFibGUgU2VydmljZSBDb250cm9sIFBvbGljeSBpbiBBV1MgT3JnYW5pemF0aW9uYCB9O1xuICAgICAgICB0YXNrcy5wdXNoKHNjcEVuYWJsZWRUYXNrKTtcbiAgICAgICAgY29uc3QgbWVzc2FnZSA9IGAke3NjcEVuYWJsZWRUYXNrLnRpdGxlfSAtICR7c2NwRW5hYmxlZFRhc2suY2F0ZWdvcnl9IC0gJHtzY3BFbmFibGVkVGFzay5kZXRhaWx9YDtcbiAgICAgICAgcmVwb3J0ICs9IGBcXG4gICR7bWVzc2FnZX1gO1xuICAgIH1cbiAgICBpZiAoIXRyYW5zaXRpb25hbEZvdW5kKSB7XG4gICAgICAgIGNvbnN0IHRyYW5zaXRpb25hbFRhc2sgPSB7IHRpdGxlOiAnRGVwbG95IFRyYW5zaXRpb25hbCBPVScsIGNhdGVnb3J5OiBtYXNDYXRlZ29yeSwgZGV0YWlsOiBgRGVwbG95IFRyYW5zaXRpb25hbCBPVSBpbiBBV1MgT3JnYW5pemF0aW9uYCB9O1xuICAgICAgICB0YXNrcy5wdXNoKHRyYW5zaXRpb25hbFRhc2spO1xuICAgICAgICBjb25zdCBtZXNzYWdlID0gYCR7dHJhbnNpdGlvbmFsVGFzay50aXRsZX0gLSAke3RyYW5zaXRpb25hbFRhc2suY2F0ZWdvcnl9IC0gJHt0cmFuc2l0aW9uYWxUYXNrLmRldGFpbH1gO1xuICAgICAgICByZXBvcnQgKz0gYFxcbiAgJHttZXNzYWdlfWA7XG4gICAgfVxuICAgIGlmICghc3VzcGVuZGVkRm91bmQpIHtcbiAgICAgICAgY29uc3Qgc3VzcGVuZGVkVGFzayA9IHsgdGl0bGU6ICdEZXBsb3kgU3VzcGVuZGVkIE9VJywgY2F0ZWdvcnk6IG1hc0NhdGVnb3J5LCBkZXRhaWw6IGBEZXBsb3kgU3VzcGVuZGVkIE9VIGluIEFXUyBPcmdhbml6YXRpb25gIH07XG4gICAgICAgIHRhc2tzLnB1c2goc3VzcGVuZGVkVGFzayk7XG4gICAgICAgIGNvbnN0IG1lc3NhZ2UgPSBgJHtzdXNwZW5kZWRUYXNrLnRpdGxlfSAtICR7c3VzcGVuZGVkVGFzay5jYXRlZ29yeX0gLSAke3N1c3BlbmRlZFRhc2suZGV0YWlsfWA7XG4gICAgICAgIHJlcG9ydCArPSBgXFxuICAke21lc3NhZ2V9YDtcbiAgICB9XG4gICAgaWYgKCF3b3JrbG9hZHNGb3VuZCkge1xuICAgICAgICBjb25zdCB3b3JrbG9hZHNUYXNrID0geyB0aXRsZTogJ0RlcGxveSBXb3JrbG9hZHMgT1UnLCBjYXRlZ29yeTogbWFzQ2F0ZWdvcnksIGRldGFpbDogYERlcGxveSBXb3JrbG9hZHMgT1UgaW4gQVdTIE9yZ2FuaXphdGlvbmAgfTtcbiAgICAgICAgdGFza3MucHVzaCh3b3JrbG9hZHNUYXNrKTtcbiAgICAgICAgY29uc3QgbWVzc2FnZSA9IGAke3dvcmtsb2Fkc1Rhc2sudGl0bGV9IC0gJHt3b3JrbG9hZHNUYXNrLmNhdGVnb3J5fSAtICR7d29ya2xvYWRzVGFzay5kZXRhaWx9YDtcbiAgICAgICAgcmVwb3J0ICs9IGBcXG4gICR7bWVzc2FnZX1gO1xuICAgIH1cbiAgICBpZiAoIXNlY3VyaXR5Rm91bmQpIHtcbiAgICAgICAgY29uc3Qgc2VjdXJpdHlUYXNrID0geyB0aXRsZTogJ0RlcGxveSBTZWN1cml0eSBPVScsIGNhdGVnb3J5OiBtYXNDYXRlZ29yeSwgZGV0YWlsOiBgRGVwbG95IFNlY3VyaXR5IE9VIGluIEFXUyBPcmdhbml6YXRpb25gIH07XG4gICAgICAgIHRhc2tzLnB1c2goc2VjdXJpdHlUYXNrKTtcbiAgICAgICAgY29uc3QgbWVzc2FnZSA9IGAke3NlY3VyaXR5VGFzay50aXRsZX0gLSAke3NlY3VyaXR5VGFzay5jYXRlZ29yeX0gLSAke3NlY3VyaXR5VGFzay5kZXRhaWx9YDtcbiAgICAgICAgcmVwb3J0ICs9IGBcXG4gICR7bWVzc2FnZX1gO1xuICAgIH1cbiAgICBpZiAoIWluZnJhc3RydWN0dXJlRm91bmQpIHtcbiAgICAgICAgY29uc3QgaW5mcmFzdHJ1Y3R1cmVUYXNrID0geyB0aXRsZTogJ0RlcGxveSBJbmZyYXN0cnVjdHVyZSBPVScsIGNhdGVnb3J5OiBtYXNDYXRlZ29yeSwgZGV0YWlsOiBgRGVwbG95IEluZnJhc3RydWN0dXJlIE9VIGluIEFXUyBPcmdhbml6YXRpb25gIH07XG4gICAgICAgIHRhc2tzLnB1c2goaW5mcmFzdHJ1Y3R1cmVUYXNrKTtcbiAgICAgICAgY29uc3QgbWVzc2FnZSA9IGAke2luZnJhc3RydWN0dXJlVGFzay50aXRsZX0gLSAke2luZnJhc3RydWN0dXJlVGFzay5jYXRlZ29yeX0gLSAke2luZnJhc3RydWN0dXJlVGFzay5kZXRhaWx9YDtcbiAgICAgICAgcmVwb3J0ICs9IGBcXG4gICR7bWVzc2FnZX1gO1xuICAgIH1cbiAgICByZXBvcnQgKz0gYFxcblxcbioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKmA7XG4gICAgcmVwb3J0ICs9IGBcXG4gICAgICAgICAgICAgICAgICBMQU5ESU5HIFpPTkVgO1xuICAgIHJlcG9ydCArPSBgXFxuKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqYDtcbiAgICByZXBvcnQgKz0gYFxcblxcbkFXUyBDT05UUk9MIFRPV0VSXFxuYDtcbiAgICBpZiAoYXNzZXNzbWVudC5jb250cm9sVG93ZXJSZWdpb24pIHtcbiAgICAgICAgcmVwb3J0ICs9IGBcXG4gIENvbnRyb2wgVG93ZXIgaG9tZSByZWdpb246ICR7YXNzZXNzbWVudC5jb250cm9sVG93ZXJSZWdpb259YDtcbiAgICAgICAgcmVwb3J0ICs9IGBcXG4gIENvbnRyb2wgVG93ZXIgc3RhdHVzOiAke2Fzc2Vzc21lbnQuY29udHJvbFRvd2VyU3RhdHVzfWA7XG4gICAgICAgIHJlcG9ydCArPSBgXFxuICBDb250cm9sIFRvd2VyIExhbmRpbmcgWm9uZSB2ZXJzaW9uOiAke2Fzc2Vzc21lbnQuY29udHJvbFRvd2VyRGVwbG95ZWRWZXJzaW9ufWA7XG4gICAgICAgIHJlcG9ydCArPSBgXFxuICBMYXRlc3QgYXZhaWxhYmxlIHZlcnNpb246ICR7YXNzZXNzbWVudC5jb250cm9sVG93ZXJMYXRlc3RBdmFpbGFibGVWZXJzaW9ufWA7XG4gICAgICAgIHJlcG9ydCArPSBgXFxuICBEcmlmdCBTdGF0dXM6ICR7YXNzZXNzbWVudC5jb250cm9sVG93ZXJEcmlmdFN0YXR1c31gO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgcmVwb3J0ICs9IGBcXG4gIEFXUyBDb250cm9sIFRvd2VyIGlzIG5vdCBkZXBsb3llZCBpbiB0aGUgQVdTIE9yZ2FuaXphdGlvbmA7XG4gICAgfVxuICAgIHJlcG9ydCArPSBgXFxuXFxuTEFORElORyBaT05FIFJFQ09NTUVOREVEIFRBU0tTOmA7XG4gICAgbGV0IGx6VGFza051bWJlciA9IDE7XG4gICAgY29uc3QgbHpXYXlwb2ludCA9IFwiTGFuZGluZyBab25lXCI7XG4gICAgaWYgKGFzc2Vzc21lbnQuY29udHJvbFRvd2VyUmVnaW9uID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgY29uc3QgZGVwbG95Q29udHJvbFRvd2VyVGFzayA9IHsgdGl0bGU6ICdEZXBsb3kgQVdTIENvbnRyb2wgVG93ZXInLCBjYXRlZ29yeTogbHpXYXlwb2ludCwgZGV0YWlsOiBgRGVwbG95IEFXUyBDb250cm9sIFRvd2VyIGluIEFXUyBPcmdhbml6YXRpb25gIH07XG4gICAgICAgIHRhc2tzLnB1c2goZGVwbG95Q29udHJvbFRvd2VyVGFzayk7XG4gICAgICAgIGNvbnN0IG1lc3NhZ2UgPSBgJHtkZXBsb3lDb250cm9sVG93ZXJUYXNrLnRpdGxlfSAtICR7ZGVwbG95Q29udHJvbFRvd2VyVGFzay5jYXRlZ29yeX0gLSAke2RlcGxveUNvbnRyb2xUb3dlclRhc2suZGV0YWlsfWA7XG4gICAgICAgIHJlcG9ydCArPSBgXFxuICAke21lc3NhZ2V9YDtcbiAgICB9XG4gICAgaWYgKGFzc2Vzc21lbnQuY29udHJvbFRvd2VyRHJpZnRTdGF0dXMgPT09ICdEUklGVEVEJykge1xuICAgICAgICBjb25zdCBmaXhMekRyaWZ0VGFzayA9IHsgdGl0bGU6ICdGaXggZHJpZnQgaW4gZGVwbG95ZWQgbGFuZGluZyB6b25lJywgY2F0ZWdvcnk6IGx6V2F5cG9pbnQsIGRldGFpbDogYEZpeCBkcmlmdCBpbiBkZXBsb3llZCBsYW5kaW5nIHpvbmVgIH07XG4gICAgICAgIHRhc2tzLnB1c2goZml4THpEcmlmdFRhc2spO1xuICAgICAgICBjb25zdCBtZXNzYWdlID0gYCR7Zml4THpEcmlmdFRhc2sudGl0bGV9IC0gJHtmaXhMekRyaWZ0VGFzay5jYXRlZ29yeX0gLSAke2ZpeEx6RHJpZnRUYXNrLmRldGFpbH1gO1xuICAgICAgICByZXBvcnQgKz0gYFxcbiAgJHttZXNzYWdlfWA7XG4gICAgfVxuICAgIGlmIChhc3Nlc3NtZW50LmNvbnRyb2xUb3dlckRlcGxveWVkVmVyc2lvbiAhPT0gYXNzZXNzbWVudC5jb250cm9sVG93ZXJMYXRlc3RBdmFpbGFibGVWZXJzaW9uKSB7XG4gICAgICAgIGNvbnN0IHVwZGF0ZUNvbnRyb2xUb3dlclRhc2sgPSB7IHRpdGxlOiBgVXBkYXRlIEFXUyBDb250cm9sIFRvd2VyIHRvIGxhdGVzdCB2ZXJzaW9uYCwgY2F0ZWdvcnk6IGx6V2F5cG9pbnQsIGRldGFpbDogYFVwZGF0ZSBBV1MgQ29udHJvbCBUb3dlciB0byB2ZXJzaW9uICR7YXNzZXNzbWVudC5jb250cm9sVG93ZXJMYXRlc3RBdmFpbGFibGVWZXJzaW9ufWAgfTtcbiAgICAgICAgdGFza3MucHVzaCh1cGRhdGVDb250cm9sVG93ZXJUYXNrKTtcbiAgICAgICAgY29uc3QgbWVzc2FnZSA9IGAke3VwZGF0ZUNvbnRyb2xUb3dlclRhc2sudGl0bGV9IC0gJHt1cGRhdGVDb250cm9sVG93ZXJUYXNrLmNhdGVnb3J5fSAtICR7dXBkYXRlQ29udHJvbFRvd2VyVGFzay5kZXRhaWx9YDtcbiAgICAgICAgcmVwb3J0ICs9IGBcXG4gICR7bWVzc2FnZX1gO1xuICAgIH1cbiAgICBpZiAoIWFzc2Vzc21lbnQub3JnU2VydmljZXMgfHwgIWFzc2Vzc21lbnQub3JnU2VydmljZXMuZmluZChwYXJhbSA9PiBwYXJhbS5zZXJ2aWNlID09PSAnbWVtYmVyLm9yZy5zdGFja3NldHMuY2xvdWRmb3JtYXRpb24uYW1hem9uYXdzLmNvbScpKSB7XG4gICAgICAgIGNvbnN0IG9yZ1NlcnZpY2VDZm5FbmFibGVUYXNrID0geyB0aXRsZTogJ0VuYWJsZSBBV1MgQ2xvdWRGb3JtYXRpb24nLCBjYXRlZ29yeTogbHpXYXlwb2ludCwgZGV0YWlsOiBgRW5hYmxlIEFXUyBDbG91ZEZvcm1hdGlvbiBpbiBBV1MgT3JnYW5pemF0aW9uYCB9O1xuICAgICAgICB0YXNrcy5wdXNoKG9yZ1NlcnZpY2VDZm5FbmFibGVUYXNrKTtcbiAgICAgICAgY29uc3QgbWVzc2FnZSA9IGAke29yZ1NlcnZpY2VDZm5FbmFibGVUYXNrLnRpdGxlfSAtICR7b3JnU2VydmljZUNmbkVuYWJsZVRhc2suY2F0ZWdvcnl9IC0gJHtvcmdTZXJ2aWNlQ2ZuRW5hYmxlVGFzay5kZXRhaWx9YDtcbiAgICAgICAgcmVwb3J0ICs9IGBcXG4gICR7bWVzc2FnZX1gO1xuICAgIH1cbiAgICByZXBvcnQgKz0gYFxcblxcbioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKmA7XG4gICAgcmVwb3J0ICs9IGBcXG4gICAgICAgICAgICAgICAgICAgIElERU5USVRZYDtcbiAgICByZXBvcnQgKz0gYFxcbioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKmA7XG4gICAgaWYgKGFzc2Vzc21lbnQuaWRjSW5mbykge1xuICAgICAgICByZXBvcnQgKz0gYFxcblxcbkFXUyBJQU0gSURFTlRJVFkgQ0VOVEVSXFxuYDtcbiAgICAgICAgcmVwb3J0ICs9IGBcXG4gIElkQyBSZWdpb246ICR7YXNzZXNzbWVudC5pZGNJbmZvLnJlZ2lvbn1gO1xuICAgICAgICByZXBvcnQgKz0gYFxcbiAgSWRDIEFSTjogJHthc3Nlc3NtZW50LmlkY0luZm8uYXJufWA7XG4gICAgICAgIHJlcG9ydCArPSBgXFxuICBJZEMgSW5zdGFuY2UgSWQ6ICR7YXNzZXNzbWVudC5pZGNJbmZvLmlkfWA7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICByZXBvcnQgKz0gYFxcblxcbkFXUyBJQU0gSURFTlRJVFkgQ0VOVEVSIE5PVCBGT1VORFxcbmA7XG4gICAgfVxuICAgIHJlcG9ydCArPSBgXFxuXFxuSURFTlRJVFkgUkVDT01NRU5ERUQgVEFTS1M6YDtcbiAgICBjb25zdCBzc29DYXRlZ29yeSA9ICdJZGVudGl0eSc7XG4gICAgaWYgKCFhc3Nlc3NtZW50Lm9yZ1NlcnZpY2VzIHx8ICFhc3Nlc3NtZW50Lm9yZ1NlcnZpY2VzLmZpbmQocGFyYW0gPT4gcGFyYW0uc2VydmljZSA9PT0gJ3Nzby5hbWF6b25hd3MuY29tJykpIHtcbiAgICAgICAgY29uc3Qgc3NvVGFzayA9IHsgdGl0bGU6ICdFbmFibGUgQVdTIFNpbmdsZSBTaWduLU9uJywgY2F0ZWdvcnk6IHNzb0NhdGVnb3J5LCBkZXRhaWw6IGBFbmFibGUgQVdTIFNpbmdsZSBTaWduLU9uIGluIEFXUyBPcmdhbml6YXRpb25gIH07XG4gICAgICAgIHRhc2tzLnB1c2goc3NvVGFzayk7XG4gICAgICAgIGNvbnN0IG1lc3NhZ2UgPSBgJHtzc29UYXNrLnRpdGxlfSAtICR7c3NvVGFzay5jYXRlZ29yeX0gLSAke3Nzb1Rhc2suZGV0YWlsfWA7XG4gICAgICAgIHJlcG9ydCArPSBgXFxuICAke21lc3NhZ2V9YDtcbiAgICB9XG4gICAgaWYgKCFpZGVudGl0eURlbGVnYXRlZCkge1xuICAgICAgICBjb25zdCBpZGVudGl0eURlbGVnYXRlZFRhc2sgPSB7IHRpdGxlOiAnRGVsZWdhdGUgYWRtaW5pc3RyYXRpb24gdG8gQVdTIElBTSBJZGVudGl0eSBDZW50ZXInLCBjYXRlZ29yeTogc3NvQ2F0ZWdvcnksIGRldGFpbDogYERlbGVnYXRlIGFkbWluaXN0cmF0aW9uIHRvIEFXUyBJQU0gSWRlbnRpdHkgQ2VudGVyYCB9O1xuICAgICAgICB0YXNrcy5wdXNoKGlkZW50aXR5RGVsZWdhdGVkVGFzayk7XG4gICAgICAgIGNvbnN0IG1lc3NhZ2UgPSBgJHtpZGVudGl0eURlbGVnYXRlZFRhc2sudGl0bGV9IC0gJHtpZGVudGl0eURlbGVnYXRlZFRhc2suY2F0ZWdvcnl9IC0gJHtpZGVudGl0eURlbGVnYXRlZFRhc2suZGV0YWlsfWA7XG4gICAgICAgIHJlcG9ydCArPSBgXFxuICAke21lc3NhZ2V9YDtcbiAgICB9XG4gICAgaWYgKCFhc3Nlc3NtZW50LnNjcEVuYWJsZWQpIHtcbiAgICAgICAgY29uc3Qgc3NvVGFzayA9IHsgdGl0bGU6ICdFbmFibGUgQVdTIFNpbmdsZSBTaWduLU9uJywgY2F0ZWdvcnk6IHNzb0NhdGVnb3J5LCBkZXRhaWw6IGBFbmFibGUgQVdTIFNpbmdsZSBTaWduLU9uIGluIEFXUyBPcmdhbml6YXRpb25gIH07XG4gICAgICAgIHRhc2tzLnB1c2goc3NvVGFzayk7XG4gICAgICAgIGNvbnN0IG1lc3NhZ2UgPSBgJHtzc29UYXNrLnRpdGxlfSAtICR7c3NvVGFzay5jYXRlZ29yeX0gLSAke3Nzb1Rhc2suZGV0YWlsfWA7XG4gICAgICAgIHJlcG9ydCArPSBgXFxuICAke21lc3NhZ2V9YDtcbiAgICB9XG4gICAgcmVwb3J0ICs9IGBcXG5cXG4qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKipgO1xuICAgIHJlcG9ydCArPSBgXFxuICAgICAgICAgICAgICAgICAgICBTRUNVUklUWWA7XG4gICAgcmVwb3J0ICs9IGBcXG4qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKipgO1xuICAgIHJlcG9ydCArPSBgXFxuXFxuQVdTIFNFQ1VSSVRZIFNFUlZJQ0VTIEVOQUJMRUQgSU4gQVdTIE9SR0FOSVpBVElPTjpcXG5gO1xuICAgIGlmIChhc3Nlc3NtZW50Lm9yZ1NlcnZpY2VzICYmIGFzc2Vzc21lbnQub3JnU2VydmljZXMuZmluZChwYXJhbSA9PiBwYXJhbS5zZXJ2aWNlID09PSAnZ3VhcmRkdXR5LmFtYXpvbmF3cy5jb20nKSkge1xuICAgICAgICByZXBvcnQgKz0gYFxcbiAgQVdTIEd1YXJkRHV0eWA7XG4gICAgfVxuICAgIGlmIChhc3Nlc3NtZW50Lm9yZ1NlcnZpY2VzICYmIGFzc2Vzc21lbnQub3JnU2VydmljZXMuZmluZChwYXJhbSA9PiBwYXJhbS5zZXJ2aWNlID09PSAnc2VjdXJpdHlodWIuYW1hem9uYXdzLmNvbScpKSB7XG4gICAgICAgIHJlcG9ydCArPSBgXFxuICBBV1MgU2VjdXJpdHkgSHViYDtcbiAgICB9XG4gICAgaWYgKGFzc2Vzc21lbnQub3JnU2VydmljZXMgJiYgYXNzZXNzbWVudC5vcmdTZXJ2aWNlcy5maW5kKHBhcmFtID0+IHBhcmFtLnNlcnZpY2UgPT09ICdhY2Nlc3MtYW5hbHl6ZXIuYW1hem9uYXdzLmNvbScpKSB7XG4gICAgICAgIHJlcG9ydCArPSBgXFxuICBJQU0gQWNjZXNzIEFuYWx5emVyYDtcbiAgICB9XG4gICAgaWYgKGFzc2Vzc21lbnQub3JnU2VydmljZXMgJiYgYXNzZXNzbWVudC5vcmdTZXJ2aWNlcy5maW5kKHBhcmFtID0+IHBhcmFtLnNlcnZpY2UgPT09ICdtYWNpZS5hbWF6b25hd3MuY29tJykpIHtcbiAgICAgICAgcmVwb3J0ICs9IGBcXG4gIE1hY2llYDtcbiAgICB9XG4gICAgaWYgKGFzc2Vzc21lbnQub3JnU2VydmljZXMgJiYgYXNzZXNzbWVudC5vcmdTZXJ2aWNlcy5maW5kKHBhcmFtID0+IHBhcmFtLnNlcnZpY2UgPT09ICdzdG9yYWdlLWxlbnMuczMuYW1hem9uYXdzLmNvbScpKSB7XG4gICAgICAgIHJlcG9ydCArPSBgXFxuICBBbWF6b24gUzMgU3RvcmFnZSBMZW5zYDtcbiAgICB9XG4gICAgaWYgKGFzc2Vzc21lbnQub3JnU2VydmljZXMgJiYgYXNzZXNzbWVudC5vcmdTZXJ2aWNlcy5maW5kKHBhcmFtID0+IHBhcmFtLnNlcnZpY2UgPT09ICdpbnNwZWN0b3IyLmFtYXpvbmF3cy5jb20nKSkge1xuICAgICAgICByZXBvcnQgKz0gYFxcbiAgQW1hem9uIEluc3BlY3RvcmA7XG4gICAgfVxuICAgIGlmIChhc3Nlc3NtZW50Lm9yZ1NlcnZpY2VzICYmIGFzc2Vzc21lbnQub3JnU2VydmljZXMuZmluZChwYXJhbSA9PiBwYXJhbS5zZXJ2aWNlID09PSAnY2xvdWR0cmFpbC5hbWF6b25hd3MuY29tJykpIHtcbiAgICAgICAgcmVwb3J0ICs9IGBcXG4gIEFXUyBDbG91ZFRyYWlsYDtcbiAgICB9XG4gICAgaWYgKGFzc2Vzc21lbnQub3JnU2VydmljZXMgJiYgYXNzZXNzbWVudC5vcmdTZXJ2aWNlcy5maW5kKHBhcmFtID0+IHBhcmFtLnNlcnZpY2UgPT09ICdjb25maWcuYW1hem9uYXdzLmNvbScpKSB7XG4gICAgICAgIHJlcG9ydCArPSBgXFxuICBBV1MgQ29uZmlnYDtcbiAgICB9XG4gICAgcmVwb3J0ICs9IGBcXG5cXG5TRUNVUklUWSBUQVNLUzpgO1xuICAgIGNvbnN0IHNlY0NhdGVnb3J5ID0gXCJTZWN1cml0eVwiO1xuICAgIGlmICghYXNzZXNzbWVudC5zY3BFbmFibGVkKSB7XG4gICAgICAgIGNvbnN0IHNzb1Rhc2sgPSB7IHRpdGxlOiAnRW5hYmxlIEFXUyBTaW5nbGUgU2lnbi1PbicsIGNhdGVnb3J5OiBzZWNDYXRlZ29yeSwgZGV0YWlsOiBgRW5hYmxlIEFXUyBTaW5nbGUgU2lnbi1PbiBpbiBBV1MgT3JnYW5pemF0aW9uYCB9O1xuICAgICAgICB0YXNrcy5wdXNoKHNzb1Rhc2spO1xuICAgICAgICBjb25zdCBtZXNzYWdlID0gYCR7c3NvVGFzay50aXRsZX0gLSAke3Nzb1Rhc2suY2F0ZWdvcnl9IC0gJHtzc29UYXNrLmRldGFpbH1gO1xuICAgICAgICByZXBvcnQgKz0gYFxcbiAgJHttZXNzYWdlfWA7XG4gICAgfVxuICAgIGlmICghYXNzZXNzbWVudC5vcmdTZXJ2aWNlcyB8fCAhYXNzZXNzbWVudC5vcmdTZXJ2aWNlcy5maW5kKHBhcmFtID0+IHBhcmFtLnNlcnZpY2UgPT09ICdndWFyZGR1dHkuYW1hem9uYXdzLmNvbScpKSB7XG4gICAgICAgIGNvbnN0IHRhc2tHdWFyZER1dHlEZWxlZ2F0ZWQgPSB7IHRpdGxlOiAnRGVsZWdhdGUgYWRtaW5pc3RyYXRpb24gdG8gQVdTIEd1YXJkRHV0eScsIGNhdGVnb3J5OiBzZWNDYXRlZ29yeSwgZGV0YWlsOiBgRGVsZWdhdGUgYWRtaW5pc3RyYXRpb24gdG8gQVdTIEd1YXJkRHV0eWAgfTtcbiAgICAgICAgdGFza3MucHVzaCh0YXNrR3VhcmREdXR5RGVsZWdhdGVkKTtcbiAgICAgICAgY29uc3QgbWVzc2FnZSA9IGAke3Rhc2tHdWFyZER1dHlEZWxlZ2F0ZWQudGl0bGV9IC0gJHt0YXNrR3VhcmREdXR5RGVsZWdhdGVkLmNhdGVnb3J5fSAtICR7dGFza0d1YXJkRHV0eURlbGVnYXRlZC5kZXRhaWx9YDtcbiAgICAgICAgcmVwb3J0ICs9IGBcXG4gICR7bWVzc2FnZX1gO1xuICAgIH1cbiAgICBpZiAoIWFzc2Vzc21lbnQub3JnU2VydmljZXMgfHwgIWFzc2Vzc21lbnQub3JnU2VydmljZXMuZmluZChwYXJhbSA9PiBwYXJhbS5zZXJ2aWNlID09PSAnc2VjdXJpdHlodWIuYW1hem9uYXdzLmNvbScpKSB7XG4gICAgICAgIGNvbnN0IHRhc2tTZWN1cml0eUh1YkRlbGVnYXRlZCA9IHsgdGl0bGU6ICdEZWxlZ2F0ZSBhZG1pbmlzdHJhdGlvbiB0byBBV1MgU2VjdXJpdHkgSHViJywgY2F0ZWdvcnk6IHNlY0NhdGVnb3J5LCBkZXRhaWw6IGBEZWxlZ2F0ZSBhZG1pbmlzdHJhdGlvbiB0byBBV1MgU2VjdXJpdHkgSHViYCB9O1xuICAgICAgICB0YXNrcy5wdXNoKHRhc2tTZWN1cml0eUh1YkRlbGVnYXRlZCk7XG4gICAgICAgIGNvbnN0IG1lc3NhZ2UgPSBgJHt0YXNrU2VjdXJpdHlIdWJEZWxlZ2F0ZWQudGl0bGV9IC0gJHt0YXNrU2VjdXJpdHlIdWJEZWxlZ2F0ZWQuY2F0ZWdvcnl9IC0gJHt0YXNrU2VjdXJpdHlIdWJEZWxlZ2F0ZWQuZGV0YWlsfWA7XG4gICAgICAgIHJlcG9ydCArPSBgXFxuICAke21lc3NhZ2V9YDtcbiAgICB9XG4gICAgaWYgKCFhc3Nlc3NtZW50Lm9yZ1NlcnZpY2VzIHx8ICFhc3Nlc3NtZW50Lm9yZ1NlcnZpY2VzLmZpbmQocGFyYW0gPT4gcGFyYW0uc2VydmljZSA9PT0gJ2FjY2Vzcy1hbmFseXplci5hbWF6b25hd3MuY29tJykpIHtcbiAgICAgICAgY29uc3QgdGFza0lhbUFjY2Vzc0FuYWx5emVyRGVsZWdhdGVkID0geyB0aXRsZTogJ0RlbGVnYXRlIGFkbWluaXN0cmF0aW9uIHRvIEFXUyBJQU0gQWNjZXNzIEFuYWx5emVyJywgY2F0ZWdvcnk6IHNlY0NhdGVnb3J5LCBkZXRhaWw6IGBEZWxlZ2F0ZSBhZG1pbmlzdHJhdGlvbiB0byBBV1MgSUFNIEFjY2VzcyBBbmFseXplcmAgfTtcbiAgICAgICAgdGFza3MucHVzaCh0YXNrSWFtQWNjZXNzQW5hbHl6ZXJEZWxlZ2F0ZWQpO1xuICAgICAgICBjb25zdCBtZXNzYWdlID0gYCR7dGFza0lhbUFjY2Vzc0FuYWx5emVyRGVsZWdhdGVkLnRpdGxlfSAtICR7dGFza0lhbUFjY2Vzc0FuYWx5emVyRGVsZWdhdGVkLmNhdGVnb3J5fSAtICR7dGFza0lhbUFjY2Vzc0FuYWx5emVyRGVsZWdhdGVkLmRldGFpbH1gO1xuICAgICAgICByZXBvcnQgKz0gYFxcbiAgJHttZXNzYWdlfWA7XG4gICAgfVxuICAgIGlmICghYXNzZXNzbWVudC5vcmdTZXJ2aWNlcyB8fCAhYXNzZXNzbWVudC5vcmdTZXJ2aWNlcy5maW5kKHBhcmFtID0+IHBhcmFtLnNlcnZpY2UgPT09ICdjbG91ZHRyYWlsLmFtYXpvbmF3cy5jb20nKSkge1xuICAgICAgICBjb25zdCB0YXNrQ2xvdWRUcmFpbERlbGVnYXRlZCA9IHsgdGl0bGU6ICdEZWxlZ2F0ZSBhZG1pbmlzdHJhdGlvbiB0byBBV1MgQ2xvdWRUcmFpbCcsIGNhdGVnb3J5OiBzZWNDYXRlZ29yeSwgZGV0YWlsOiBgRGVsZWdhdGUgYWRtaW5pc3RyYXRpb24gdG8gQVdTIENsb3VkVHJhaWxgIH07XG4gICAgICAgIHRhc2tzLnB1c2godGFza0Nsb3VkVHJhaWxEZWxlZ2F0ZWQpO1xuICAgICAgICBjb25zdCBtZXNzYWdlID0gYCR7dGFza0Nsb3VkVHJhaWxEZWxlZ2F0ZWQudGl0bGV9IC0gJHt0YXNrQ2xvdWRUcmFpbERlbGVnYXRlZC5jYXRlZ29yeX0gLSAke3Rhc2tDbG91ZFRyYWlsRGVsZWdhdGVkLmRldGFpbH1gO1xuICAgICAgICByZXBvcnQgKz0gYFxcbiAgJHttZXNzYWdlfWA7XG4gICAgfVxuICAgIGlmICghYXNzZXNzbWVudC5vcmdTZXJ2aWNlcyB8fCAhYXNzZXNzbWVudC5vcmdTZXJ2aWNlcy5maW5kKHBhcmFtID0+IHBhcmFtLnNlcnZpY2UgPT09ICdjb25maWcuYW1hem9uYXdzLmNvbScpKSB7XG4gICAgICAgIGNvbnN0IHRhc2tDb25maWdEZWxlZ2F0ZWQgPSB7IHRpdGxlOiAnRGVsZWdhdGUgYWRtaW5pc3RyYXRpb24gdG8gQVdTIENvbmZpZycsIGNhdGVnb3J5OiBzZWNDYXRlZ29yeSwgZGV0YWlsOiBgRGVsZWdhdGUgYWRtaW5pc3RyYXRpb24gdG8gQVdTIENvbmZpZ2AgfTtcbiAgICAgICAgdGFza3MucHVzaCh0YXNrQ29uZmlnRGVsZWdhdGVkKTtcbiAgICAgICAgY29uc3QgbWVzc2FnZSA9IGAke3Rhc2tDb25maWdEZWxlZ2F0ZWQudGl0bGV9IC0gJHt0YXNrQ29uZmlnRGVsZWdhdGVkLmNhdGVnb3J5fSAtICR7dGFza0NvbmZpZ0RlbGVnYXRlZC5kZXRhaWx9YDtcbiAgICAgICAgcmVwb3J0ICs9IGBcXG4gICR7bWVzc2FnZX1gO1xuICAgIH1cbiAgICBpZiAoIXNlY3VyaXR5SHViRGVsZWdhdGVkKSB7XG4gICAgICAgIGNvbnN0IHRhc2tTZWN1cml0eUh1YkRlbGVnYXRlZCA9IHsgdGl0bGU6ICdEZWxlZ2F0ZSBhZG1pbmlzdHJhdGlvbiBvZiBBV1MgU2VjdXJpdHkgSHViJywgY2F0ZWdvcnk6IHNlY0NhdGVnb3J5LCBkZXRhaWw6IGBEZWxlZ2F0ZSBhZG1pbmlzdHJhdGlvbiB0byBBV1MgU2VjdXJpdHkgSHViYCB9O1xuICAgICAgICB0YXNrcy5wdXNoKHRhc2tTZWN1cml0eUh1YkRlbGVnYXRlZCk7XG4gICAgICAgIGNvbnN0IG1lc3NhZ2UgPSBgJHt0YXNrU2VjdXJpdHlIdWJEZWxlZ2F0ZWQudGl0bGV9IC0gJHt0YXNrU2VjdXJpdHlIdWJEZWxlZ2F0ZWQuY2F0ZWdvcnl9IC0gJHt0YXNrU2VjdXJpdHlIdWJEZWxlZ2F0ZWQuZGV0YWlsfWA7XG4gICAgICAgIHJlcG9ydCArPSBgXFxuICAke21lc3NhZ2V9YDtcbiAgICB9XG4gICAgaWYgKCFndWFyZER1dHlEZWxlZ2F0ZWQpIHtcbiAgICAgICAgY29uc3QgdGFza0d1YXJkRHV0eURlbGVnYXRlZCA9IHsgdGl0bGU6ICdEZWxlZ2F0ZSBhZG1pbmlzdHJhdGlvbiBvZiBBV1MgR3VhcmREdXR5JywgY2F0ZWdvcnk6IHNlY0NhdGVnb3J5LCBkZXRhaWw6IGBEZWxlZ2F0ZSBhZG1pbmlzdHJhdGlvbiB0byBBV1MgR3VhcmREdXR5YCB9O1xuICAgICAgICB0YXNrcy5wdXNoKHRhc2tHdWFyZER1dHlEZWxlZ2F0ZWQpO1xuICAgICAgICBjb25zdCBtZXNzYWdlID0gYCR7dGFza0d1YXJkRHV0eURlbGVnYXRlZC50aXRsZX0gLSAke3Rhc2tHdWFyZER1dHlEZWxlZ2F0ZWQuY2F0ZWdvcnl9IC0gJHt0YXNrR3VhcmREdXR5RGVsZWdhdGVkLmRldGFpbH1gO1xuICAgICAgICByZXBvcnQgKz0gYFxcbiAgJHttZXNzYWdlfWA7XG4gICAgfVxuICAgIGlmICghY29uZmlnRGVsZWdhdGVkKSB7XG4gICAgICAgIGNvbnN0IHRhc2tDb25maWdEZWxlZ2F0ZWQgPSB7IHRpdGxlOiAnRGVsZWdhdGUgYWRtaW5pc3RyYXRpb24gb2YgQVdTIENvbmZpZycsIGNhdGVnb3J5OiBzZWNDYXRlZ29yeSwgZGV0YWlsOiBgRGVsZWdhdGUgYWRtaW5pc3RyYXRpb24gdG8gQVdTIENvbmZpZ2AgfTtcbiAgICAgICAgdGFza3MucHVzaCh0YXNrQ29uZmlnRGVsZWdhdGVkKTtcbiAgICAgICAgY29uc3QgbWVzc2FnZSA9IGAke3Rhc2tDb25maWdEZWxlZ2F0ZWQudGl0bGV9IC0gJHt0YXNrQ29uZmlnRGVsZWdhdGVkLmNhdGVnb3J5fSAtICR7dGFza0NvbmZpZ0RlbGVnYXRlZC5kZXRhaWx9YDtcbiAgICAgICAgcmVwb3J0ICs9IGBcXG4gICR7bWVzc2FnZX1gO1xuICAgIH1cbiAgICBpZiAoIWlhbUFjY2Vzc0FuYWx5emVyRGVsZWdhdGVkKSB7XG4gICAgICAgIGNvbnN0IHRhc2tJYW1BY2Nlc3NBbmFseXplckRlbGVnYXRlZCA9IHsgdGl0bGU6ICdEZWxlZ2F0ZSBhZG1pbmlzdHJhdGlvbiBvZiBBV1MgSUFNIEFjY2VzcyBBbmFseXplcicsIGNhdGVnb3J5OiBzZWNDYXRlZ29yeSwgZGV0YWlsOiBgRGVsZWdhdGUgYWRtaW5pc3RyYXRpb24gdG8gQVdTIElBTSBBY2Nlc3MgQW5hbHl6ZXJgIH07XG4gICAgICAgIHRhc2tzLnB1c2godGFza0lhbUFjY2Vzc0FuYWx5emVyRGVsZWdhdGVkKTtcbiAgICAgICAgY29uc3QgbWVzc2FnZSA9IGAke3Rhc2tJYW1BY2Nlc3NBbmFseXplckRlbGVnYXRlZC50aXRsZX0gLSAke3Rhc2tJYW1BY2Nlc3NBbmFseXplckRlbGVnYXRlZC5jYXRlZ29yeX0gLSAke3Rhc2tJYW1BY2Nlc3NBbmFseXplckRlbGVnYXRlZC5kZXRhaWx9YDtcbiAgICAgICAgcmVwb3J0ICs9IGBcXG4gICR7bWVzc2FnZX1gO1xuICAgIH1cbiAgICBpZiAoIXMzU3RvcmFnZUxlbnNEZWxlZ2F0ZWQpIHtcbiAgICAgICAgY29uc3QgdGFza1MzU3RvcmFnZUxlbnNEZWxlZ2F0ZWQgPSB7IHRpdGxlOiAnRGVsZWdhdGUgYWRtaW5pc3RyYXRpb24gb2YgQW1hem9uIFMzIFN0b3JhZ2UgTGVucycsIGNhdGVnb3J5OiBzZWNDYXRlZ29yeSwgZGV0YWlsOiBgRGVsZWdhdGUgYWRtaW5pc3RyYXRpb24gdG8gQW1hem9uIFMzIFN0b3JhZ2UgTGVuc2AgfTtcbiAgICAgICAgdGFza3MucHVzaCh0YXNrUzNTdG9yYWdlTGVuc0RlbGVnYXRlZCk7XG4gICAgICAgIGNvbnN0IG1lc3NhZ2UgPSBgJHt0YXNrUzNTdG9yYWdlTGVuc0RlbGVnYXRlZC50aXRsZX0gLSAke3Rhc2tTM1N0b3JhZ2VMZW5zRGVsZWdhdGVkLmNhdGVnb3J5fSAtICR7dGFza1MzU3RvcmFnZUxlbnNEZWxlZ2F0ZWQuZGV0YWlsfWA7XG4gICAgICAgIHJlcG9ydCArPSBgXFxuICAke21lc3NhZ2V9YDtcbiAgICB9XG4gICAgcmVwb3J0ICs9IGBcXG5cXG4qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKipgO1xuICAgIHJlcG9ydCArPSBgXFxuICAgICAgICAgICAgICAgICAgICBORVRXT1JLYDtcbiAgICByZXBvcnQgKz0gYFxcbioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKmA7XG4gICAgcmVwb3J0ICs9IGBcXG5cXG5ORVRXT1JLIFJFQ09NTUVOREVEIFRBU0tTOmA7XG4gICAgY29uc3QgbmV0d29ya0NhdGVnb3J5ID0gJ05ldHdvcmsnO1xuICAgIGlmICghYXNzZXNzbWVudC5vcmdTZXJ2aWNlcyB8fCAhYXNzZXNzbWVudC5vcmdTZXJ2aWNlcy5maW5kKHBhcmFtID0+IHBhcmFtLnNlcnZpY2UgPT09ICdndWFyZGR1dHkuYW1hem9uYXdzLmNvbScpKSB7XG4gICAgICAgIGNvbnN0IHRhc2tHdWFyZER1dHlEZWxlZ2F0ZWQgPSB7IHRpdGxlOiAnRW5hYmxlIEFXUyBHdWFyZER1dHknLCBjYXRlZ29yeTogbmV0d29ya0NhdGVnb3J5LCBkZXRhaWw6IGBFbmFibGUgQVdTIEd1YXJkRHV0eSBpbiBBV1MgT3JnYW5pemF0aW9uYCB9O1xuICAgICAgICB0YXNrcy5wdXNoKHRhc2tHdWFyZER1dHlEZWxlZ2F0ZWQpO1xuICAgICAgICBjb25zdCBtZXNzYWdlID0gYCR7dGFza0d1YXJkRHV0eURlbGVnYXRlZC50aXRsZX0gLSAke3Rhc2tHdWFyZER1dHlEZWxlZ2F0ZWQuY2F0ZWdvcnl9IC0gJHt0YXNrR3VhcmREdXR5RGVsZWdhdGVkLmRldGFpbH1gO1xuICAgICAgICByZXBvcnQgKz0gYFxcbiAgJHttZXNzYWdlfWA7XG4gICAgfVxuICAgIGlmICghYXNzZXNzbWVudC5vcmdTZXJ2aWNlcyB8fCAhYXNzZXNzbWVudC5vcmdTZXJ2aWNlcy5maW5kKHBhcmFtID0+IHBhcmFtLnNlcnZpY2UgPT09ICdpcGFtLmFtYXpvbmF3cy5jb20nKSkge1xuICAgICAgICBjb25zdCBvcmdTZXJ2aWNlSXBhbVRhc2sgPSB7IHRpdGxlOiAnRW5hYmxlIEFXUyBJUEFNJywgY2F0ZWdvcnk6IG5ldHdvcmtDYXRlZ29yeSwgZGV0YWlsOiBgRW5hYmxlIEFXUyBJUEFNIGluIEFXUyBPcmdhbml6YXRpb25gIH07XG4gICAgICAgIHRhc2tzLnB1c2gob3JnU2VydmljZUlwYW1UYXNrKTtcbiAgICAgICAgY29uc3QgbWVzc2FnZSA9IGAke29yZ1NlcnZpY2VJcGFtVGFzay50aXRsZX0gLSAke29yZ1NlcnZpY2VJcGFtVGFzay5jYXRlZ29yeX0gLSAke29yZ1NlcnZpY2VJcGFtVGFzay5kZXRhaWx9YDtcbiAgICAgICAgcmVwb3J0ICs9IGBcXG4gICR7bWVzc2FnZX1gO1xuICAgIH1cbiAgICBpZiAoIWFzc2Vzc21lbnQub3JnU2VydmljZXMgfHwgIWFzc2Vzc21lbnQub3JnU2VydmljZXMuZmluZChwYXJhbSA9PiBwYXJhbS5zZXJ2aWNlID09PSAncmFtLmFtYXpvbmF3cy5jb20nKSkge1xuICAgICAgICBjb25zdCBvcmdTZXJ2aWNlUmFtVGFzayA9IHsgdGl0bGU6ICdFbmFibGUgQVdTIFJlc291cmNlIEFjY2VzcyBNYW5hZ2VyJywgY2F0ZWdvcnk6IG5ldHdvcmtDYXRlZ29yeSwgZGV0YWlsOiBgRW5hYmxlIEFXUyBSZXNvdXJjZSBBY2Nlc3MgTWFuYWdlciBpbiBBV1MgT3JnYW5pemF0aW9uYCB9O1xuICAgICAgICB0YXNrcy5wdXNoKG9yZ1NlcnZpY2VSYW1UYXNrKTtcbiAgICAgICAgY29uc3QgbWVzc2FnZSA9IGAke29yZ1NlcnZpY2VSYW1UYXNrLnRpdGxlfSAtICR7b3JnU2VydmljZVJhbVRhc2suY2F0ZWdvcnl9IC0gJHtvcmdTZXJ2aWNlUmFtVGFzay5kZXRhaWx9YDtcbiAgICAgICAgcmVwb3J0ICs9IGBcXG4gICR7bWVzc2FnZX1gO1xuICAgIH1cbiAgICBpZiAoIWlwYW1EZWxlZ2F0ZWQpIHtcbiAgICAgICAgY29uc3QgdGFza0lwYW1EZWxlZ2F0ZWQgPSB7IHRpdGxlOiAnRGVsZWdhdGUgYWRtaW5pc3RyYXRpb24gb2YgQVdTIElQQU0nLCBjYXRlZ29yeTogbmV0d29ya0NhdGVnb3J5LCBkZXRhaWw6IGBEZWxlZ2F0ZSBhZG1pbmlzdHJhdGlvbiB0byBBV1MgSVBBTWAgfTtcbiAgICAgICAgdGFza3MucHVzaCh0YXNrSXBhbURlbGVnYXRlZCk7XG4gICAgICAgIGNvbnN0IG1lc3NhZ2UgPSBgJHt0YXNrSXBhbURlbGVnYXRlZC50aXRsZX0gLSAke3Rhc2tJcGFtRGVsZWdhdGVkLmNhdGVnb3J5fSAtICR7dGFza0lwYW1EZWxlZ2F0ZWQuZGV0YWlsfWA7XG4gICAgICAgIHJlcG9ydCArPSBgXFxuICAke21lc3NhZ2V9YDtcbiAgICB9XG4gICAgaWYgKCFhc3Nlc3NtZW50LnNjcEVuYWJsZWQpIHtcbiAgICAgICAgY29uc3QgdGFza1NjcERlbGVnYXRlZCA9IHsgdGl0bGU6ICdFbmFibGUgQVdTIFNlcnZpY2UgQ29udHJvbCBQb2xpY3knLCBjYXRlZ29yeTogbmV0d29ya0NhdGVnb3J5LCBkZXRhaWw6IGBFbmFibGUgQVdTIFNlcnZpY2UgQ29udHJvbCBQb2xpY3kgaW4gQVdTIE9yZ2FuaXphdGlvbmAgfTtcbiAgICAgICAgdGFza3MucHVzaCh0YXNrU2NwRGVsZWdhdGVkKTtcbiAgICAgICAgY29uc3QgbWVzc2FnZSA9IGAke3Rhc2tTY3BEZWxlZ2F0ZWQudGl0bGV9IC0gJHt0YXNrU2NwRGVsZWdhdGVkLmNhdGVnb3J5fSAtICR7dGFza1NjcERlbGVnYXRlZC5kZXRhaWx9YDtcbiAgICAgICAgcmVwb3J0ICs9IGBcXG4gICR7bWVzc2FnZX1gO1xuICAgIH1cbiAgICByZXBvcnQgKz0gYFxcblxcbioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKmA7XG4gICAgcmVwb3J0ICs9IGBcXG4gICAgICAgICAgICAgICAgICBPQlNFUlZBQklMSVRZYDtcbiAgICByZXBvcnQgKz0gYFxcbioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKmA7XG4gICAgcmVwb3J0ICs9IGBcXG5cXG5PQlNFUlZBQklMSVRZIFJFQ09NTUVOREVEIFRBU0tTOmA7XG4gICAgY29uc3Qgb2JDYXRlZ29yeSA9ICdPYnNlcnZhYmlsaXR5JztcbiAgICBpZiAoIWFzc2Vzc21lbnQub3JnU2VydmljZXMgfHwgIWFzc2Vzc21lbnQub3JnU2VydmljZXMuZmluZChwYXJhbSA9PiBwYXJhbS5zZXJ2aWNlID09PSAnYWNjb3VudC5hbWF6b25hd3MuY29tJykpIHtcbiAgICAgICAgY29uc3Qgb3JnU2VydmljZUFjY291bnRUYXNrID0geyB0aXRsZTogJ0VuYWJsZSBBV1MgQWNjb3VudCcsIGNhdGVnb3J5OiBvYkNhdGVnb3J5LCBkZXRhaWw6IGBFbmFibGUgQVdTIEFjY291bnQgaW4gQVdTIE9yZ2FuaXphdGlvbmAgfTtcbiAgICAgICAgdGFza3MucHVzaChvcmdTZXJ2aWNlQWNjb3VudFRhc2spO1xuICAgICAgICBjb25zdCBtZXNzYWdlID0gYCR7b3JnU2VydmljZUFjY291bnRUYXNrLnRpdGxlfSAtICR7b3JnU2VydmljZUFjY291bnRUYXNrLmNhdGVnb3J5fSAtICR7b3JnU2VydmljZUFjY291bnRUYXNrLmRldGFpbH1gO1xuICAgICAgICByZXBvcnQgKz0gYFxcbiAgJHttZXNzYWdlfWA7XG4gICAgfVxuICAgIGlmICghYWNjb3VudERlbGVnYXRlZCkge1xuICAgICAgICBjb25zdCB0YXNrQWNjb3VudERlbGVnYXRlZCA9IHsgdGl0bGU6ICdEZWxlZ2F0ZSBhZG1pbmlzdHJhdGlvbiBvZiBBV1MgQWNjb3VudCcsIGNhdGVnb3J5OiBvYkNhdGVnb3J5LCBkZXRhaWw6IGBEZWxlZ2F0ZSBhZG1pbmlzdHJhdGlvbiB0byBBV1MgQWNjb3VudGAgfTtcbiAgICAgICAgdGFza3MucHVzaCh0YXNrQWNjb3VudERlbGVnYXRlZCk7XG4gICAgICAgIGNvbnN0IG1lc3NhZ2UgPSBgJHt0YXNrQWNjb3VudERlbGVnYXRlZC50aXRsZX0gLSAke3Rhc2tBY2NvdW50RGVsZWdhdGVkLmNhdGVnb3J5fSAtICR7dGFza0FjY291bnREZWxlZ2F0ZWQuZGV0YWlsfWA7XG4gICAgICAgIHJlcG9ydCArPSBgXFxuICAke21lc3NhZ2V9YDtcbiAgICB9XG4gICAgcmVwb3J0ICs9IGBcXG5cXG4qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKipgO1xuICAgIHJlcG9ydCArPSBgXFxuICAgICAgICAgICAgICAgQkFDS1VQIEFORCBSRUNPVkVSWWA7XG4gICAgcmVwb3J0ICs9IGBcXG4qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKipgO1xuICAgIHJlcG9ydCArPSBgXFxuXFxuQkFDS1VQIEFORCBSRUNPVkVSWSBSRUNPTU1FTkRFRCBUQVNLUzpgO1xuICAgIGNvbnN0IGJhY2t1cFdheXBvaW50ID0gJ0JhY2t1cCBhbmQgUmVjb3ZlcnknO1xuICAgIGlmICghYXNzZXNzbWVudC5vcmdTZXJ2aWNlcyB8fCAhYXNzZXNzbWVudC5vcmdTZXJ2aWNlcy5maW5kKHBhcmFtID0+IHBhcmFtLnNlcnZpY2UgPT09ICdiYWNrdXAuYW1hem9uYXdzLmNvbScpKSB7XG4gICAgICAgIGNvbnN0IG9yZ1NlcnZpY2VCYWNrdXBUYXNrID0geyB0aXRsZTogJ0VuYWJsZSBBV1MgQmFja3VwJywgY2F0ZWdvcnk6IGJhY2t1cFdheXBvaW50LCBkZXRhaWw6IGBFbmFibGUgQVdTIEJhY2t1cCBpbiBBV1MgT3JnYW5pemF0aW9uYCB9O1xuICAgICAgICB0YXNrcy5wdXNoKG9yZ1NlcnZpY2VCYWNrdXBUYXNrKTtcbiAgICAgICAgY29uc3QgbWVzc2FnZSA9IGAke29yZ1NlcnZpY2VCYWNrdXBUYXNrLnRpdGxlfSAtICR7b3JnU2VydmljZUJhY2t1cFRhc2suY2F0ZWdvcnl9IC0gJHtvcmdTZXJ2aWNlQmFja3VwVGFzay5kZXRhaWx9YDtcbiAgICAgICAgcmVwb3J0ICs9IGBcXG4gICR7bWVzc2FnZX1gO1xuICAgIH1cbiAgICBpZiAoIWJhY2t1cERlbGVnYXRlZCkge1xuICAgICAgICBjb25zdCB0YXNrQmFja3VwRGVsZWdhdGVkID0geyB0aXRsZTogJ0RlbGVnYXRlIGFkbWluaXN0cmF0aW9uIG9mIEFXUyBCYWNrdXAnLCBjYXRlZ29yeTogYmFja3VwV2F5cG9pbnQsIGRldGFpbDogYERlbGVnYXRlIGFkbWluaXN0cmF0aW9uIHRvIEFXUyBCYWNrdXBgIH07XG4gICAgICAgIHRhc2tzLnB1c2godGFza0JhY2t1cERlbGVnYXRlZCk7XG4gICAgICAgIGNvbnN0IG1lc3NhZ2UgPSBgJHt0YXNrQmFja3VwRGVsZWdhdGVkLnRpdGxlfSAtICR7dGFza0JhY2t1cERlbGVnYXRlZC5jYXRlZ29yeX0gLSAke3Rhc2tCYWNrdXBEZWxlZ2F0ZWQuZGV0YWlsfWA7XG4gICAgICAgIHJlcG9ydCArPSBgXFxuICAke21lc3NhZ2V9YDtcbiAgICB9XG4gICAgaWYgKCFhc3Nlc3NtZW50LmJhY2t1cFBvbGljeUVuYWJsZWQpIHtcbiAgICAgICAgY29uc3QgYmFja3VwUG9saWN5RW5hYmxlZFRhc2sgPSB7IHRpdGxlOiAnRW5hYmxlIEFXUyBCYWNrdXAgUG9saWN5JywgY2F0ZWdvcnk6IGJhY2t1cFdheXBvaW50LCBkZXRhaWw6IGBFbmFibGUgQVdTIEJhY2t1cCBQb2xpY3kgaW4gQVdTIE9yZ2FuaXphdGlvbmAgfTtcbiAgICAgICAgdGFza3MucHVzaChiYWNrdXBQb2xpY3lFbmFibGVkVGFzayk7XG4gICAgICAgIGNvbnN0IG1lc3NhZ2UgPSBgJHtiYWNrdXBQb2xpY3lFbmFibGVkVGFzay50aXRsZX0gLSAke2JhY2t1cFBvbGljeUVuYWJsZWRUYXNrLmNhdGVnb3J5fSAtICR7YmFja3VwUG9saWN5RW5hYmxlZFRhc2suZGV0YWlsfWA7XG4gICAgICAgIHJlcG9ydCArPSBgXFxuICAke21lc3NhZ2V9YDtcbiAgICB9XG4gICAgaWYgKCFhc3Nlc3NtZW50LnNjcEVuYWJsZWQpIHtcbiAgICAgICAgY29uc3QgZW5hYmxlUG9saWN5VHlwZVRhc2sgPSB7IHRpdGxlOiAnRW5hYmxlIEFXUyBTZXJ2aWNlIENvbnRyb2wgUG9saWN5JywgY2F0ZWdvcnk6IGJhY2t1cFdheXBvaW50LCBkZXRhaWw6IGBFbmFibGUgQVdTIFNlcnZpY2UgQ29udHJvbCBQb2xpY3kgaW4gQVdTIE9yZ2FuaXphdGlvbmAgfTtcbiAgICAgICAgdGFza3MucHVzaChlbmFibGVQb2xpY3lUeXBlVGFzayk7XG4gICAgICAgIGNvbnN0IG1lc3NhZ2UgPSBgJHtlbmFibGVQb2xpY3lUeXBlVGFzay50aXRsZX0gLSAke2VuYWJsZVBvbGljeVR5cGVUYXNrLmNhdGVnb3J5fSAtICR7ZW5hYmxlUG9saWN5VHlwZVRhc2suZGV0YWlsfWA7XG4gICAgICAgIHJlcG9ydCArPSBgXFxuICAke21lc3NhZ2V9YDtcbiAgICB9XG4gICAgcmVwb3J0ICs9IGBcXG5cXG5cXG4gIEVORCBSRVZJRVdgO1xuICAgIGNvbnN0IHJlcG9ydEZpbGVQYXRoID0gXCIuL2NmYXQudHh0XCI7XG4gICAgY29uc29sZS5sb2coYGNvbXBpbGluZyByZXBvcnQuLi5gKTtcbiAgICBjb25zb2xlLmxvZyhgc2F2aW5nIHJlcG9ydCB0byAuL2NmYXQvY2ZhdC50eHQuLi5gKTtcbiAgICBmcy5hcHBlbmRGaWxlU3luYyhyZXBvcnRGaWxlUGF0aCwgcmVwb3J0KTtcbiAgICByZXR1cm4gdGFza3M7XG59XG5leHBvcnQgZGVmYXVsdCBjcmVhdGVSZXBvcnQ7XG4iLCJpbXBvcnQgKiBhcyBmcyBmcm9tICdmcyc7XG5hc3luYyBmdW5jdGlvbiBjcmVhdGVKaXJhSW1wb3J0KHRhc2tzKSB7XG4gICAgbGV0IGNzdiA9ICdcIlN1bW1hcnlcIiwgXCJEZXNjcmlwdGlvblwiLCBcIlN0YXR1c1wiIFxcclxcbic7XG4gICAgZm9yIChjb25zdCB0YXNrIG9mIHRhc2tzKSB7XG4gICAgICAgIGNzdiArPSBgXCJjZmF0IC0gJHt0YXNrLmNhdGVnb3J5fSAtICR7dGFzay50aXRsZX1cIiwgXCIke3Rhc2suZGV0YWlsfVwiLCBcIk9wZW5cIiBcXHJcXG5gO1xuICAgIH1cbiAgICBmcy53cml0ZUZpbGVTeW5jKCcuL2ppcmEtaW1wb3J0LmNzdicsIGNzdik7XG4gICAgcmV0dXJuO1xufVxuZXhwb3J0IGRlZmF1bHQgY3JlYXRlSmlyYUltcG9ydDtcbiIsImNvbnN0IF9fV0VCUEFDS19OQU1FU1BBQ0VfT0JKRUNUX18gPSByZXF1aXJlKFwicGF0aFwiKTsiLCJjb25zdCBfX1dFQlBBQ0tfTkFNRVNQQUNFX09CSkVDVF9fID0gcmVxdWlyZShcImFyY2hpdmVyXCIpOyIsImltcG9ydCB7IGRlZmluZUFjY291bnRUeXBlIH0gZnJvbSAnLi9zcmMvYWN0aW9ucy9kZWZpbmUtYWNjb3VudC10eXBlLmpzJztcbmltcG9ydCBjaGVja0lhbVVzZXJzIGZyb20gJy4vc3JjL2FjdGlvbnMvY2hlY2staWFtLXVzZXJzLmpzJztcbmltcG9ydCBnZXRFbmFibGVkT3JnUG9saWN5VHlwZXMgZnJvbSAnLi9zcmMvYWN0aW9ucy9nZXQtZW5hYmxlZC1vcmctcG9saWN5LXR5cGVzLmpzJztcbmltcG9ydCBnZXRFbmFibGVkT3JnU2VydmljZXMgZnJvbSAnLi9zcmMvYWN0aW9ucy9nZXQtZW5hYmxlZC1vcmctc2VydmljZXMuanMnO1xuaW1wb3J0IGdldE9yZ0Nsb3VkRm9ybWF0aW9uIGZyb20gJy4vc3JjL2FjdGlvbnMvY2hlY2stb3JnLWNsb3VkZm9ybWF0aW9uLmpzJztcbmltcG9ydCBnZXRJZGNJbmZvIGZyb20gJy4vc3JjL2FjdGlvbnMvZ2V0LWlkYy1pbmZvLmpzJztcbmltcG9ydCBnZXRPcmdEZXRhaWxzIGZyb20gJy4vc3JjL2FjdGlvbnMvZ2V0LW9yZy1kZXRhaWxzLmpzJztcbmltcG9ydCBnZXRPcmdUb3BMZXZlbE91cyBmcm9tICcuL3NyYy9hY3Rpb25zL2dldC1vcmctb3VzLmpzJztcbmltcG9ydCBnZXRBbGxSZWdpb25zIGZyb20gJy4vc3JjL2FjdGlvbnMvZ2V0LXJlZ2lvbnMuanMnO1xuaW1wb3J0IGNoZWNrRWMyRXhpc3RzIGZyb20gJy4vc3JjL2FjdGlvbnMvY2hlY2stZWMyLWV4aXN0ZW5jZS5qcyc7XG5pbXBvcnQgY2hlY2tWcGNFeGlzdHMgZnJvbSAnLi9zcmMvYWN0aW9ucy9jaGVjay12cGMtZXhpc3RlbmNlLmpzJztcbmltcG9ydCBjaGVja0Nsb3VkVHJhaWxFeGlzdHMgZnJvbSAnLi9zcmMvYWN0aW9ucy9jaGVjay1jbG91ZHRyYWlsLWV4aXN0ZW5jZS5qcyc7XG5pbXBvcnQgZ2V0T3JnRGFBY2NvdW50cyBmcm9tICcuL3NyYy9hY3Rpb25zL2dldC1vcmctZGEtYWNjb3VudHMuanMnO1xuaW1wb3J0IGNoZWNrQ29uZmlnRXhpc3RzIGZyb20gJy4vc3JjL2FjdGlvbnMvY2hlY2stY29uZmlnLWV4aXN0ZW5jZS5qcyc7XG5pbXBvcnQgZ2V0T3JnTWVtYmVyQWNjb3VudHMgZnJvbSAnLi9zcmMvYWN0aW9ucy9nZXQtb3JnLW1lbWJlci1hY2NvdW50cy5qcyc7XG5pbXBvcnQgZ2V0Q29udHJvbFRvd2VyIGZyb20gJy4vc3JjL2FjdGlvbnMvY2hlY2stY29udHJvbC10b3dlci5qcyc7XG5pbXBvcnQgY2hlY2tMZWdhY3lDdXIgZnJvbSAnLi9zcmMvYWN0aW9ucy9jaGVjay1sZWdhY3ktY3VyLmpzJztcbmltcG9ydCBjcmVhdGVSZXBvcnQgZnJvbSAnLi9zcmMvYWN0aW9ucy9jcmVhdGUtcmVwb3J0LmpzJztcbmltcG9ydCBjcmVhdGVKaXJhSW1wb3J0IGZyb20gJy4vc3JjL2FjdGlvbnMvY3JlYXRlLWppcmFpbXBvcnQuanMnO1xuaW1wb3J0IHppcEFzc2Vzc21lbnRGaWxlcyBmcm9tICcuL3NyYy9hY3Rpb25zL3ppcC1hc3Nlc3NtZW50LmpzJztcbmltcG9ydCAqIGFzIGZzIGZyb20gJ2ZzJztcbmltcG9ydCBjcmVhdGVBc2FuYUltcG9ydCBmcm9tICcuL3NyYy9hY3Rpb25zL2NyZWF0ZS1hc2FuYWltcG9ydC5qcyc7XG5mdW5jdGlvbiBvYmplY3RUb0NTVihkYXRhKSB7XG4gICAgY29uc3QgZGF0YUFycmF5ID0gQXJyYXkuaXNBcnJheShkYXRhKSA/IGRhdGEgOiBbZGF0YV07XG4gICAgY29uc3Qga2V5cyA9IGRhdGFBcnJheS5sZW5ndGggPiAwID8gT2JqZWN0LmtleXMoZGF0YUFycmF5WzBdKSA6IFtdO1xuICAgIGNvbnN0IHJvd3MgPSBba2V5cy5qb2luKCcsJyldO1xuICAgIGZvciAoY29uc3Qgb2JqIG9mIGRhdGFBcnJheSkge1xuICAgICAgICBjb25zdCB2YWx1ZXMgPSBrZXlzLm1hcChrZXkgPT4ge1xuICAgICAgICAgICAgY29uc3QgdmFsdWUgPSBvYmpba2V5XTtcbiAgICAgICAgICAgIHJldHVybiB0eXBlb2YgdmFsdWUgPT09ICdzdHJpbmcnID8gYFwiJHt2YWx1ZS5yZXBsYWNlKC9cIi9nLCAnXCJcIicpfVwiYCA6IHZhbHVlO1xuICAgICAgICB9KTtcbiAgICAgICAgcm93cy5wdXNoKHZhbHVlcy5qb2luKCcsJykpO1xuICAgIH1cbiAgICByZXR1cm4gcm93cy5qb2luKCdcXG4nKTtcbn1cbmNvbnN0IG1haW4gPSBhc3luYyAoKSA9PiB7XG4gICAgbGV0IHJlcG9ydCA9IHt9O1xuICAgIGxldCBjZmF0Q2hlY2tzID0gW107XG4gICAgY29uc3QgcmVnaW9uID0gcHJvY2Vzcy5lbnYuQVdTX1JFR0lPTiB8fCAndXMtZWFzdC0xJztcbiAgICBjb25zdCBhbGxSZWdpb25zID0gYXdhaXQgZ2V0QWxsUmVnaW9ucygpO1xuICAgIGNvbnNvbGUubG9nKFwiZGlzY292ZXJpbmcgeW91ciBBV1MgZW52aXJvbm1lbnQuLi5cIik7XG4gICAgY29uc3QgYWNjb3VudFR5cGUgPSBhd2FpdCBkZWZpbmVBY2NvdW50VHlwZShyZWdpb24pO1xuICAgIGxldCB0cmFuc2l0aW9uYWxGb3VuZCwgc3VzcGVuZGVkRm91bmQsIGluZnJhc3RydWN0dXJlRm91bmQgPSBmYWxzZTtcbiAgICBsZXQgd29ya2xvYWRzRm91bmQgPSBmYWxzZTtcbiAgICBsZXQgc2VjdXJpdHlGb3VuZCA9IGZhbHNlO1xuICAgIGxldCBjZmF0SWFtVXNlclBhc3MgPSBmYWxzZTtcbiAgICBsZXQgY2ZhdElhbUlkUE9yZ1NlcnZpY2VQYXNzID0gZmFsc2U7XG4gICAgbGV0IGNmYXRJYW1JZGNDb25maWd1cmVkUGFzcyA9IGZhbHNlO1xuICAgIGxldCBjZmF0Q2xvdWRUcmFpbFBhc3MgPSBmYWxzZTtcbiAgICBsZXQgY2ZhdENsb3VkVHJhaWxPcmdUcmFpbFBhc3MgPSBmYWxzZTtcbiAgICBsZXQgY2ZhdFZwY1Bhc3MgPSB0cnVlO1xuICAgIGxldCBjZmF0RWMyUGFzcyA9IGZhbHNlO1xuICAgIGxldCBjZmF0Q29uZmlnTWFuYWdlbWVudEFjY291bnRQYXNzID0gZmFsc2U7XG4gICAgbGV0IGNmYXRDb25maWdSZWNvcmRlck1hbmFnZW1lbnRBY2NvdW50UGFzcyA9IGZhbHNlO1xuICAgIGxldCBjZmF0Q2xvdWRUcmFpbE9yZ1NlcnZpY2VFbmFibGVkUGFzcyA9IGZhbHNlO1xuICAgIGxldCBjZmF0VGFnUG9saWNpZXNFbmFibGVkUGFzcyA9IGZhbHNlO1xuICAgIGxldCBjZmF0U2NwRW5hYmxlZFBhc3MgPSBmYWxzZTtcbiAgICBsZXQgY2ZhdEJhY2t1cFBvbGljaWVzRW5hYmxlZFBhc3MgPSBmYWxzZTtcbiAgICBsZXQgY2ZhdE9yZ0Nsb3VkRm9ybWF0aW9uRW5hYmxlZFBhc3MgPSBmYWxzZTtcbiAgICBsZXQgY2ZhdE9yZ0Nsb3VkRm9ybWF0aW9uU3RhdHVzUGFzcyA9IGZhbHNlO1xuICAgIGxldCBjZmF0T3JnU2VydmljZUd1YXJkRHV0eUVuYWJsZWRQYXNzID0gZmFsc2U7XG4gICAgbGV0IGNmYXRPcmdTZXJ2aWNlU2VjdXJpdHlIdWJFbmFibGVkUGFzcyA9IGZhbHNlO1xuICAgIGxldCBjZmF0T3JnU2VydmljZUlhbUFjY2Vzc0FuYWx5emVyRW5hYmxlZFBhc3MgPSBmYWxzZTtcbiAgICBsZXQgY2ZhdE9yZ1NlcnZpY2VBd3NDb25maWdFbmFibGVkUGFzcyA9IGZhbHNlO1xuICAgIGxldCBjZmF0T3JnU2VydmljZVJhbUVuYWJsZWRQYXNzID0gZmFsc2U7XG4gICAgbGV0IGNmYXRDb250cm9sVG93ZXJEZXBsb3llZFBhc3MgPSBmYWxzZTtcbiAgICBsZXQgY2ZhdENvbnRyb2xUb3dlck5vdERyaWZ0ZWRQYXNzID0gZmFsc2U7XG4gICAgbGV0IGNmYXRDb250cm9sVG93ZXJMYXRlc3RWZXJzaW9uUGFzcyA9IGZhbHNlO1xuICAgIGxldCBjZmF0TG9nQXJjaGl2ZUFjY291bnRQYXNzID0gZmFsc2U7XG4gICAgbGV0IGNmYXRBdWRpdEFjY291bnRQYXNzID0gZmFsc2U7XG4gICAgbGV0IGNmYXRNYW5hZ2VtZW50QWNjb3VudFBhc3MgPSB0cnVlO1xuICAgIGxldCBjZmF0T3JnU2VydmljZUJhY2t1cEVuYWJsZWRQYXNzID0gZmFsc2U7XG4gICAgaWYgKGFjY291bnRUeXBlKSB7XG4gICAgICAgIHJlcG9ydC5vcmdhbml6YXRpb25EZXBsb3kgPSBhY2NvdW50VHlwZS5pc0luT3JnYW5pemF0aW9uO1xuICAgICAgICByZXBvcnQubWFuYWdlbWVudEFjY291bnQgPSBhY2NvdW50VHlwZS5pc01hbmFnZW1lbnRBY2NvdW50O1xuICAgICAgICBpZiAoYWNjb3VudFR5cGUuaXNNYW5hZ2VtZW50QWNjb3VudCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICBhY2NvdW50VHlwZS5pc01hbmFnZW1lbnRBY2NvdW50ID0gZmFsc2U7XG4gICAgICAgICAgICBjb25zb2xlLmxvZyhcIkFXUyBhY2NvdW50IGlzIG5vdCB0aGUgTWFuYWdlbWVudCBBY2NvdW50IG9mIGFuIEFXUyBPcmdhbml6YXRpb25cIik7XG4gICAgICAgIH1cbiAgICAgICAgY2ZhdE1hbmFnZW1lbnRBY2NvdW50UGFzcyA9IGFjY291bnRUeXBlLmlzTWFuYWdlbWVudEFjY291bnQ7XG4gICAgfVxuICAgIGNvbnNvbGUubG9nKFwiZGlzY292ZXJpbmcgSUFNIFVzZXJzLi4uXCIpO1xuICAgIGNvbnN0IGlhbVVzZXJSZXN1bHQgPSBhd2FpdCBjaGVja0lhbVVzZXJzKCk7XG4gICAgaWYgKGlhbVVzZXJSZXN1bHQgJiYgaWFtVXNlclJlc3VsdC5sZW5ndGggPiAwKSB7XG4gICAgICAgIGNvbnNvbGUubG9nKFwiSUFNIFVzZXJzIGRpc2NvdmVyZWQuXCIpO1xuICAgICAgICByZXBvcnQuaWFtVXNlckNoZWNrcyA9IGlhbVVzZXJSZXN1bHQ7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICBjZmF0SWFtVXNlclBhc3MgPSB0cnVlO1xuICAgIH1cbiAgICBjb25zb2xlLmxvZyhcImRpc2NvdmVyaW5nIEVDMiBpbnN0YW5jZXMgYWNyb3NzIGFsbCBBV1MgUmVnaW9ucy4uLlwiKTtcbiAgICBjb25zdCBlYzJDaGVjayA9IGF3YWl0IGNoZWNrRWMyRXhpc3RzKGFsbFJlZ2lvbnMpO1xuICAgIGlmIChlYzJDaGVjayAmJiBlYzJDaGVjay5maW5kKHBhcmFtID0+IHBhcmFtLmVjMkZvdW5kID09PSB0cnVlKSkge1xuICAgICAgICByZXBvcnQuZWMyQ2hlY2tzID0gZWMyQ2hlY2s7XG4gICAgICAgIGNvbnNvbGUuaW5mbyhcIndhcm5pbmc6IEVDMiBpbnN0YW5jZXMgZGlzY292ZXJlZC5cIik7XG4gICAgICAgIGZvciAoY29uc3QgZWMyIG9mIGVjMkNoZWNrKSB7XG4gICAgICAgICAgICBjZmF0RWMyUGFzcyA9IGZhbHNlO1xuICAgICAgICB9XG4gICAgfVxuICAgIGNvbnNvbGUubG9nKFwiZGlzY292ZXJpbmcgVlBDcyBhY3Jvc3MgYWxsIEFXUyBSZWdpb25zLi4uXCIpO1xuICAgIGNvbnN0IHZwY0NoZWNrID0gYXdhaXQgY2hlY2tWcGNFeGlzdHMoYWxsUmVnaW9ucyk7XG4gICAgcmVwb3J0LnZwY0NoZWNrcyA9IHZwY0NoZWNrO1xuICAgIGlmICh2cGNDaGVjayAmJiB2cGNDaGVjay5sZW5ndGggPiAwKSB7XG4gICAgICAgIGNmYXRWcGNQYXNzID0gZmFsc2U7XG4gICAgICAgIGNvbnNvbGUubG9nKFwid2FybmluZzogVlBDcyBkaXNjb3ZlcmVkLlwiKTtcbiAgICB9XG4gICAgY29uc29sZS5sb2coXCJkaXNjb3ZlcmluZyBBV1MgQ29uZmlnIGNvbmZpZ3VyYXRpb25zIGFjcm9zcyBhbGwgQVdTIFJlZ2lvbnMuLi5cIik7XG4gICAgcmVwb3J0LmNsb3VkVHJhaWxEZXRhaWxzID0gYXdhaXQgY2hlY2tDbG91ZFRyYWlsRXhpc3RzKGFsbFJlZ2lvbnMpO1xuICAgIHJlcG9ydC5jb25maWdEZXRhaWxzID0gYXdhaXQgY2hlY2tDb25maWdFeGlzdHMoYWxsUmVnaW9ucyk7XG4gICAgaWYgKHJlcG9ydC5jb25maWdEZXRhaWxzICYmIHJlcG9ydC5jb25maWdEZXRhaWxzLmZpbmQocGFyYW0gPT4gcGFyYW0uY29uZmlnUmVjb3JkZXJGb3VuZCA9PT0gdHJ1ZSkpIHtcbiAgICAgICAgZm9yIChjb25zdCBjb25maWdGaW5kIG9mIHJlcG9ydC5jb25maWdEZXRhaWxzKSB7XG4gICAgICAgICAgICBpZiAoY29uZmlnRmluZC5jb25maWdSZWNvcmRlckZvdW5kKSB7XG4gICAgICAgICAgICAgICAgY2ZhdENvbmZpZ01hbmFnZW1lbnRBY2NvdW50UGFzcyA9IHRydWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoY29uZmlnRmluZC5jb25maWdEZWxpdmVyeUNoYW5uZWxGb3VuZCkge1xuICAgICAgICAgICAgICAgIGNmYXRDb25maWdSZWNvcmRlck1hbmFnZW1lbnRBY2NvdW50UGFzcyA9IHRydWU7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG4gICAgLy8gYWxsIHRoZSBmb2xsb3dpbmcgY2FsbHMgcmVxdWlyZSBhbiBBV1MgT3JnYW5pemF0aW9uIHRvIGV4aXN0IGFuZCB0aGUgYWNjb3VudCBiZSBhIG1hbmFnZW1lbnQgYWNjb3VudFxuICAgIGlmIChhY2NvdW50VHlwZS5pc0luT3JnYW5pemF0aW9uICYmIGFjY291bnRUeXBlLmlzTWFuYWdlbWVudEFjY291bnQpIHtcbiAgICAgICAgY29uc29sZS5sb2coXCJjb2xsZWN0aW5nIGdlbmVyYWwgQVdTIE9yZ2FuaXphdGlvbiBkZXRhaWxzLi4uXCIpO1xuICAgICAgICBjb25zdCBvcmdEZXRhaWxzID0gYXdhaXQgZ2V0T3JnRGV0YWlscygndXMtZWFzdC0xJyk7XG4gICAgICAgIGNvbnNvbGUubG9nKFwiY29sbGVjdGluZyBDVVIgZGV0YWlscy4uLlwiKTtcbiAgICAgICAgY29uc3QgbGVnYWN5Q3VyQ2hlY2sgPSBhd2FpdCBjaGVja0xlZ2FjeUN1cigndXMtZWFzdC0xJyk7XG4gICAgICAgIGNvbnNvbGUubG9nKFwiY29sbGVjdGluZyBBV1MgT3JnYW5pemF0aW9uIFBvbGljeSBkZXRhaWxzLi4uXCIpO1xuICAgICAgICBjb25zdCBlbmFibGVPcmdQb2xpY2llc0NoZWNrID0gYXdhaXQgZ2V0RW5hYmxlZE9yZ1BvbGljeVR5cGVzKCd1cy1lYXN0LTEnKTtcbiAgICAgICAgY29uc29sZS5sb2coXCJjb2xsZWN0aW5nIEFXUyBPcmdhbml6YXRpb24gc2VydmljZSB0cnVzdGVkIGFjY2VzcyBkZXRhaWxzLi4uXCIpO1xuICAgICAgICByZXBvcnQub3JnU2VydmljZXMgPSBhd2FpdCBnZXRFbmFibGVkT3JnU2VydmljZXMoJ3VzLWVhc3QtMScpO1xuICAgICAgICBjb25zb2xlLmxvZyhcImNvbGxlY3RpbmcgQVdTIE9yZ2FuaXphdGlvbiBDbG91ZEZvcm1hdGlvbiBzdGF0dXMgZGV0YWlscy4uLlwiKTtcbiAgICAgICAgY29uc3QgY2ZuT3JnU3RhdHVzID0gYXdhaXQgZ2V0T3JnQ2xvdWRGb3JtYXRpb24ocmVnaW9uKTtcbiAgICAgICAgY29uc29sZS5sb2coXCJjb2xsZWN0aW5nIEFXUyBDb250cm9sIFRvd2VyIGRldGFpbHMuLi5cIik7XG4gICAgICAgIGNvbnN0IGNvbnRyb2xUb3dlckRldGFpbHMgPSBhd2FpdCBnZXRDb250cm9sVG93ZXIocmVnaW9uKTtcbiAgICAgICAgcmVwb3J0LmlkY0luZm8gPSBhd2FpdCBnZXRJZGNJbmZvKGFsbFJlZ2lvbnMpO1xuICAgICAgICBjb25zb2xlLmxvZyhcImNvbGxlY3RpbmcgQVdTIE9yZ2FuaXphdGlvbiBzZXJ2aWNlIGRlbGVnYXRlZCBhZG1pbiBkZXRhaWxzLi4uXCIpO1xuICAgICAgICByZXBvcnQub3JnRGVsZWdhdGVkQWRtaW5BY2NvdW50cyA9IGF3YWl0IGdldE9yZ0RhQWNjb3VudHMoKTtcbiAgICAgICAgY29uc29sZS5sb2coXCJjb2xsZWN0aW5nIEFXUyBPcmdhbml6YXRpb24gbWVtYmVyIGFjY291bnQgZGV0YWlscy4uLlwiKTtcbiAgICAgICAgcmVwb3J0Lm9yZ01lbWJlckFjY291bnRzID0gYXdhaXQgZ2V0T3JnTWVtYmVyQWNjb3VudHMoKTtcbiAgICAgICAgcmVwb3J0LmlzTGVnYWN5Q3VyU2V0dXAgPSBsZWdhY3lDdXJDaGVjay5pc0xlZ2FjeUN1clNldHVwO1xuICAgICAgICByZXBvcnQub3JnQXJuID0gb3JnRGV0YWlscy5hcm47XG4gICAgICAgIHJlcG9ydC5vcmdJZCA9IG9yZ0RldGFpbHMuaWQ7XG4gICAgICAgIHJlcG9ydC5vcmdSb290T3VJZCA9IG9yZ0RldGFpbHMucm9vdE91SWQ7XG4gICAgICAgIHJlcG9ydC5iYWNrdXBQb2xpY3lFbmFibGVkID0gZW5hYmxlT3JnUG9saWNpZXNDaGVjay5iYWNrdXBQb2xpY3lFbmFibGVkO1xuICAgICAgICByZXBvcnQuc2NwRW5hYmxlZCA9IGVuYWJsZU9yZ1BvbGljaWVzQ2hlY2suc2NwRW5hYmxlZDtcbiAgICAgICAgcmVwb3J0LnRhZ1BvbGljeUVuYWJsZWQgPSBlbmFibGVPcmdQb2xpY2llc0NoZWNrLnRhZ1BvbGljeUVuYWJsZWQ7XG4gICAgICAgIHJlcG9ydC5vcmdDbG91ZEZvcm1hdGlvblN0YXR1cyA9IGNmbk9yZ1N0YXR1cy5zdGF0dXM7XG4gICAgICAgIHJlcG9ydC5jb250cm9sVG93ZXJEZXBsb3llZFZlcnNpb24gPSBjb250cm9sVG93ZXJEZXRhaWxzLmRlcGxveWVkVmVyc2lvbjtcbiAgICAgICAgcmVwb3J0LmNvbnRyb2xUb3dlckRyaWZ0U3RhdHVzID0gY29udHJvbFRvd2VyRGV0YWlscy5kcmlmdFN0YXR1cztcbiAgICAgICAgcmVwb3J0LmNvbnRyb2xUb3dlckxhdGVzdEF2YWlsYWJsZVZlcnNpb24gPSBjb250cm9sVG93ZXJEZXRhaWxzLmxhdGVzdEF2YWlsYWJsZVZlcnNpb247XG4gICAgICAgIHJlcG9ydC5jb250cm9sVG93ZXJSZWdpb24gPSBjb250cm9sVG93ZXJEZXRhaWxzLmNvbnRyb2xUb3dlclJlZ2lvbjtcbiAgICAgICAgcmVwb3J0LmNvbnRyb2xUb3dlclN0YXR1cyA9IGNvbnRyb2xUb3dlckRldGFpbHMuc3RhdHVzO1xuICAgICAgICBpZiAocmVwb3J0LmlkY0luZm8uYXJuKSB7XG4gICAgICAgICAgICBjZmF0SWFtSWRjQ29uZmlndXJlZFBhc3MgPSB0cnVlO1xuICAgICAgICB9XG4gICAgICAgIGlmIChyZXBvcnQuY2xvdWRUcmFpbERldGFpbHMgJiYgcmVwb3J0LmNsb3VkVHJhaWxEZXRhaWxzLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgIGNmYXRDbG91ZFRyYWlsUGFzcyA9IHRydWU7XG4gICAgICAgICAgICBmb3IgKGNvbnN0IGN0RmluZCBvZiByZXBvcnQuY2xvdWRUcmFpbERldGFpbHMpIHtcbiAgICAgICAgICAgICAgICBpZiAoY3RGaW5kLnRyYWlsRm91bmQpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGN0RmluZC5pc09yZ1RyYWlsKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjZmF0Q2xvdWRUcmFpbE9yZ1RyYWlsUGFzcyA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHJlcG9ydC5vcmdTZXJ2aWNlcy5maW5kKHBhcmFtID0+IHBhcmFtLnNlcnZpY2UgPT09ICdjbG91ZHRyYWlsLmFtYXpvbmF3cy5jb20nKSkge1xuICAgICAgICAgICAgY2ZhdENsb3VkVHJhaWxPcmdTZXJ2aWNlRW5hYmxlZFBhc3MgPSB0cnVlO1xuICAgICAgICB9XG4gICAgICAgIGlmIChyZXBvcnQub3JnU2VydmljZXMuZmluZChwYXJhbSA9PiBwYXJhbS5zZXJ2aWNlID09PSAnY29uZmlnLmFtYXpvbmF3cy5jb20nKSkge1xuICAgICAgICAgICAgY2ZhdE9yZ1NlcnZpY2VBd3NDb25maWdFbmFibGVkUGFzcyA9IHRydWU7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGVuYWJsZU9yZ1BvbGljaWVzQ2hlY2suc2NwRW5hYmxlZCkge1xuICAgICAgICAgICAgY2ZhdFNjcEVuYWJsZWRQYXNzID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoZW5hYmxlT3JnUG9saWNpZXNDaGVjay50YWdQb2xpY3lFbmFibGVkKSB7XG4gICAgICAgICAgICBjZmF0VGFnUG9saWNpZXNFbmFibGVkUGFzcyA9IHRydWU7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGVuYWJsZU9yZ1BvbGljaWVzQ2hlY2suYmFja3VwUG9saWN5RW5hYmxlZCkge1xuICAgICAgICAgICAgY2ZhdEJhY2t1cFBvbGljaWVzRW5hYmxlZFBhc3MgPSB0cnVlO1xuICAgICAgICB9XG4gICAgICAgIGlmIChvcmdEZXRhaWxzLnJvb3RPdUlkKSB7XG4gICAgICAgICAgICBjb25zb2xlLmxvZyhcImNvbGxlY3RpbmcgT1UgYW5kIG1lbWJlciBhY2NvdW50IGRldGFpbHMuLi5cIik7XG4gICAgICAgICAgICByZXBvcnQub3JnT3VJbmZvID0gYXdhaXQgZ2V0T3JnVG9wTGV2ZWxPdXMoJ3VzLWVhc3QtMScsIG9yZ0RldGFpbHMucm9vdE91SWQpO1xuICAgICAgICAgICAgaWYgKHJlcG9ydC5vcmdPdUluZm8gJiYgcmVwb3J0Lm9yZ091SW5mby5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICAgICAgZm9yIChjb25zdCBvdSBvZiByZXBvcnQub3JnT3VJbmZvKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChvdS5uYW1lPy50b0xvd2VyQ2FzZSgpID09PSAnc3VzcGVuZGVkJykge1xuICAgICAgICAgICAgICAgICAgICAgICAgc3VzcGVuZGVkRm91bmQgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGlmIChvdS5uYW1lPy50b0xvd2VyQ2FzZSgpID09PSAndHJhbnNpdGlvbmFsJykge1xuICAgICAgICAgICAgICAgICAgICAgICAgdHJhbnNpdGlvbmFsRm91bmQgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGlmIChvdS5uYW1lPy50b0xvd2VyQ2FzZSgpID09PSAnd29ya2xvYWRzJykge1xuICAgICAgICAgICAgICAgICAgICAgICAgd29ya2xvYWRzRm91bmQgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGlmIChvdS5uYW1lPy50b0xvd2VyQ2FzZSgpID09PSAnc2VjdXJpdHknKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBzZWN1cml0eUZvdW5kID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBpZiAob3UubmFtZT8udG9Mb3dlckNhc2UoKSA9PT0gJ2luZnJhc3RydWN0dXJlJykge1xuICAgICAgICAgICAgICAgICAgICAgICAgaW5mcmFzdHJ1Y3R1cmVGb3VuZCA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHJlcG9ydC5vcmdNZW1iZXJBY2NvdW50cyAmJiByZXBvcnQub3JnTWVtYmVyQWNjb3VudHMubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgZm9yIChjb25zdCBtZW1iZXJBY2NvdW50IG9mIHJlcG9ydC5vcmdNZW1iZXJBY2NvdW50cykge1xuICAgICAgICAgICAgICAgIGlmIChtZW1iZXJBY2NvdW50LmFjY291bnROYW1lKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChtZW1iZXJBY2NvdW50LmFjY291bnROYW1lLnRvTG93ZXJDYXNlKCkgPT09ICdsb2cgYXJjaGl2ZScpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNmYXRMb2dBcmNoaXZlQWNjb3VudFBhc3MgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGlmIChtZW1iZXJBY2NvdW50LmFjY291bnROYW1lLnRvTG93ZXJDYXNlKCkgPT09ICdhdWRpdCcpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNmYXRBdWRpdEFjY291bnRQYXNzID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBpZiAobWVtYmVyQWNjb3VudC5hY2NvdW50TmFtZS50b0xvd2VyQ2FzZSgpID09PSAnc2VjdXJpdHkgdG9vbGluZycpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNmYXRBdWRpdEFjY291bnRQYXNzID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBsZXQgaWRlbnRpdHlEZWxlZ2F0ZWQgPSBmYWxzZTtcbiAgICAgICAgbGV0IHNlY3VyaXR5SHViRGVsZWdhdGVkID0gZmFsc2U7XG4gICAgICAgIGxldCBndWFyZER1dHlEZWxlZ2F0ZWQgPSBmYWxzZTtcbiAgICAgICAgbGV0IGNvbmZpZ0RlbGVnYXRlZCA9IGZhbHNlO1xuICAgICAgICBsZXQgaWFtQWNjZXNzQW5hbHl6ZXJEZWxlZ2F0ZWQgPSBmYWxzZTtcbiAgICAgICAgbGV0IHMzU3RvcmFnZUxlbnNEZWxlZ2F0ZWQgPSBmYWxzZTtcbiAgICAgICAgbGV0IGlwYW1EZWxlZ2F0ZWQgPSBmYWxzZTtcbiAgICAgICAgbGV0IGFjY291bnREZWxlZ2F0ZWQgPSBmYWxzZTtcbiAgICAgICAgbGV0IGJhY2t1cERlbGVnYXRlZCA9IGZhbHNlO1xuICAgICAgICBpZiAocmVwb3J0Lm9yZ0RlbGVnYXRlZEFkbWluQWNjb3VudHMgJiYgcmVwb3J0Lm9yZ0RlbGVnYXRlZEFkbWluQWNjb3VudHMubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgZm9yIChjb25zdCBhY2NvdW50IG9mIHJlcG9ydC5vcmdEZWxlZ2F0ZWRBZG1pbkFjY291bnRzKSB7XG4gICAgICAgICAgICAgICAgaWYgKGFjY291bnQuc2VydmljZXMgJiYgYWNjb3VudC5zZXJ2aWNlcy5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICAgICAgICAgIGZvciAoY29uc3Qgc3J2IG9mIGFjY291bnQuc2VydmljZXMpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChzcnYuU2VydmljZVByaW5jaXBhbCA9PT0gJ3NlY3VyaXR5aHViLmFtYXpvbmF3cy5jb20nKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc2VjdXJpdHlIdWJEZWxlZ2F0ZWQgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHNydi5TZXJ2aWNlUHJpbmNpcGFsID09PSAnZ3VhcmRkdXR5LmFtYXpvbmF3cy5jb20nKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZ3VhcmREdXR5RGVsZWdhdGVkID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChzcnYuU2VydmljZVByaW5jaXBhbCA9PT0gJ3Nzby5hbWF6b25hd3MuY29tJykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlkZW50aXR5RGVsZWdhdGVkID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChzcnYuU2VydmljZVByaW5jaXBhbCA9PT0gJ2NvbmZpZy5hbWF6b25hd3MuY29tJykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbmZpZ0RlbGVnYXRlZCA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoc3J2LlNlcnZpY2VQcmluY2lwYWwgPT09ICdhY2Nlc3MtYW5hbHl6ZXIuYW1hem9uYXdzLmNvbScpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpYW1BY2Nlc3NBbmFseXplckRlbGVnYXRlZCA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoc3J2LlNlcnZpY2VQcmluY2lwYWwgPT09ICdzdG9yYWdlLWxlbnMuczMuYW1hem9uYXdzLmNvbScpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzM1N0b3JhZ2VMZW5zRGVsZWdhdGVkID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChzcnYuU2VydmljZVByaW5jaXBhbCA9PT0gJ2lwYW0uYW1hem9uYXdzLmNvbScpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpcGFtRGVsZWdhdGVkID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChzcnYuU2VydmljZVByaW5jaXBhbCA9PT0gJ2FjY291bnQuYW1hem9uYXdzLmNvbScpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhY2NvdW50RGVsZWdhdGVkID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChzcnYuU2VydmljZVByaW5jaXBhbCA9PT0gJ2JhY2t1cC5hbWF6b25hd3MuY29tJykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJhY2t1cERlbGVnYXRlZCA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGNvbnRyb2xUb3dlckRldGFpbHMuY29udHJvbFRvd2VyUmVnaW9uKSB7XG4gICAgICAgICAgICBjZmF0Q29udHJvbFRvd2VyRGVwbG95ZWRQYXNzID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoY29udHJvbFRvd2VyRGV0YWlscy5kcmlmdFN0YXR1cyAhPT0gJ0RSSUZURUQnKSB7XG4gICAgICAgICAgICBjZmF0Q29udHJvbFRvd2VyTm90RHJpZnRlZFBhc3MgPSB0cnVlO1xuICAgICAgICB9XG4gICAgICAgIGlmIChjb250cm9sVG93ZXJEZXRhaWxzLmRlcGxveWVkVmVyc2lvbiA9PT0gY29udHJvbFRvd2VyRGV0YWlscy5sYXRlc3RBdmFpbGFibGVWZXJzaW9uKSB7XG4gICAgICAgICAgICBjZmF0Q29udHJvbFRvd2VyTGF0ZXN0VmVyc2lvblBhc3MgPSB0cnVlO1xuICAgICAgICB9XG4gICAgICAgIGlmIChyZXBvcnQub3JnU2VydmljZXMuZmluZChwYXJhbSA9PiBwYXJhbS5zZXJ2aWNlID09PSAnbWVtYmVyLm9yZy5zdGFja3NldHMuY2xvdWRmb3JtYXRpb24uYW1hem9uYXdzLmNvbScpKSB7XG4gICAgICAgICAgICBjZmF0T3JnQ2xvdWRGb3JtYXRpb25TdGF0dXNQYXNzID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgICBpZiAocmVwb3J0Lm9yZ1NlcnZpY2VzLmZpbmQocGFyYW0gPT4gcGFyYW0uc2VydmljZSA9PT0gJ3Nzby5hbWF6b25hd3MuY29tJykpIHtcbiAgICAgICAgICAgIGNmYXRJYW1JZFBPcmdTZXJ2aWNlUGFzcyA9IHRydWU7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHJlcG9ydC5vcmdTZXJ2aWNlcy5maW5kKHBhcmFtID0+IHBhcmFtLnNlcnZpY2UgPT09ICdndWFyZGR1dHkuYW1hem9uYXdzLmNvbScpKSB7XG4gICAgICAgICAgICBjZmF0T3JnU2VydmljZUd1YXJkRHV0eUVuYWJsZWRQYXNzID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgICBpZiAocmVwb3J0Lm9yZ1NlcnZpY2VzLmZpbmQocGFyYW0gPT4gcGFyYW0uc2VydmljZSA9PT0gJ3NlY3VyaXR5aHViLmFtYXpvbmF3cy5jb20nKSkge1xuICAgICAgICAgICAgY2ZhdE9yZ1NlcnZpY2VTZWN1cml0eUh1YkVuYWJsZWRQYXNzID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgICBpZiAocmVwb3J0Lm9yZ1NlcnZpY2VzLmZpbmQocGFyYW0gPT4gcGFyYW0uc2VydmljZSA9PT0gJ2FjY2Vzcy1hbmFseXplci5hbWF6b25hd3MuY29tJykpIHtcbiAgICAgICAgICAgIGNmYXRPcmdTZXJ2aWNlSWFtQWNjZXNzQW5hbHl6ZXJFbmFibGVkUGFzcyA9IHRydWU7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHJlcG9ydC5vcmdTZXJ2aWNlcy5maW5kKHBhcmFtID0+IHBhcmFtLnNlcnZpY2UgPT09ICdyYW0uYW1hem9uYXdzLmNvbScpKSB7XG4gICAgICAgICAgICBjZmF0T3JnU2VydmljZVJhbUVuYWJsZWRQYXNzID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgICBpZiAocmVwb3J0Lm9yZ1NlcnZpY2VzLmZpbmQocGFyYW0gPT4gcGFyYW0uc2VydmljZSA9PT0gJ2JhY2t1cC5hbWF6b25hd3MuY29tJykpIHtcbiAgICAgICAgICAgIGNmYXRPcmdTZXJ2aWNlQmFja3VwRW5hYmxlZFBhc3MgPSB0cnVlO1xuICAgICAgICB9XG4gICAgfVxuICAgIGVsc2UgaWYgKGFjY291bnRUeXBlLmlzSW5Pcmdhbml6YXRpb24gJiYgIWFjY291bnRUeXBlLmlzTWFuYWdlbWVudEFjY291bnQpIHtcbiAgICAgICAgY29uc3QgbWVzc2FnZSA9ICdcXG5XQVJOSU5HOiBZb3UgYXJlIHJ1bm5pbmcgQ0ZBVCBmcm9tIGFuIGFjY291bnQgdGhhdCBpcyBhIG1lbWJlciBvZiB5b3VyIEFXUyBPcmdhbml6YXRpb24uIFBsZWFzZSBydW4gdGhlIHNvbHV0aW9uIGZyb20geW91ciBBV1MgTWFuYWdlbWVudCBhY2NvdW50Lic7XG4gICAgICAgIGNvbnNvbGUud2FybihtZXNzYWdlKTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIGNvbnN0IG1lc3NhZ2UgPSAnXFxuV0FSTklORzogWW91IGFyZSBydW5uaW5nIENGQVQgZnJvbSBhbiBhY2NvdW50IHRoYXQgbm90IHBhcnQgb2YgYW4gQVdTIE9yZ2FuaXphdGlvbi4gVGhpcyBhY2NvdW50IHdpbGwgYmUgdHJlYXRlZCBhcyBhIHN0YW5kYWxvbmUgYWNjb3VudC4nO1xuICAgICAgICBjb25zb2xlLndhcm4obWVzc2FnZSk7XG4gICAgfVxuICAgIGxldCBPcmdDaGVjayA9IHtcbiAgICAgICAgY2hlY2s6IFwiQVdTIE9yZ2FuaXphdGlvbiBjcmVhdGVkXCIsXG4gICAgICAgIGRlc2NyaXB0aW9uOiBcIkFXUyBPcmdhbml6YXRpb24gaXMgZW5hYmxlZC5cIixcbiAgICAgICAgc3RhdHVzOiBhY2NvdW50VHlwZS5pc0luT3JnYW5pemF0aW9uID8gXCJjb21wbGV0ZVwiIDogXCJpbmNvbXBsZXRlXCIsXG4gICAgICAgIHJlcXVpcmVkOiB0cnVlLFxuICAgICAgICB3ZWlnaHQ6IDYsXG4gICAgICAgIGxvZTogMSxcbiAgICAgICAgcmVtZWRpYXRpb25MaW5rOiBcIiBcIlxuICAgIH07XG4gICAgY2ZhdENoZWNrcy5wdXNoKE9yZ0NoZWNrKTtcbiAgICBsZXQgTUFDaGVjayA9IHtcbiAgICAgICAgY2hlY2s6IFwiTWFuYWdlbWVudCBBY2NvdW50IGNyZWF0ZWRcIixcbiAgICAgICAgZGVzY3JpcHRpb246IFwiQVdTIE1hbmFnZW1lbnQgYWNjb3VudCBleGlzdHMuXCIsXG4gICAgICAgIHN0YXR1czogY2ZhdE1hbmFnZW1lbnRBY2NvdW50UGFzcyA/IFwiY29tcGxldGVcIiA6IFwiaW5jb21wbGV0ZVwiLFxuICAgICAgICByZXF1aXJlZDogdHJ1ZSxcbiAgICAgICAgd2VpZ2h0OiA2LFxuICAgICAgICBsb2U6IDEsXG4gICAgICAgIHJlbWVkaWF0aW9uTGluazogXCIgXCJcbiAgICB9O1xuICAgIGNmYXRDaGVja3MucHVzaChNQUNoZWNrKTtcbiAgICBjb25zdCBjZmF0SWFtVXNlckNoZWNrID0ge1xuICAgICAgICBjaGVjazogXCJNYW5hZ2VtZW50IEFjY291bnQgSUFNIFVzZXJzIHJlbW92ZWRcIixcbiAgICAgICAgZGVzY3JpcHRpb246IFwiSUFNIFVzZXJzIHNob3VsZCBub3QgZXhpc3QgaW4gTWFuYWdlbWVudCBBY2NvdW50LlwiLFxuICAgICAgICBzdGF0dXM6IGNmYXRJYW1Vc2VyUGFzcyA/IFwiY29tcGxldGVcIiA6IFwiaW5jb21wbGV0ZVwiLFxuICAgICAgICByZXF1aXJlZDogZmFsc2UsXG4gICAgICAgIHdlaWdodDogNCxcbiAgICAgICAgbG9lOiAxLFxuICAgICAgICByZW1lZGlhdGlvbkxpbms6IFwiIFwiXG4gICAgfTtcbiAgICBjZmF0Q2hlY2tzLnB1c2goY2ZhdElhbVVzZXJDaGVjayk7XG4gICAgY29uc3QgY2ZhdEVjMkNoZWNrID0ge1xuICAgICAgICBjaGVjazogXCJNYW5hZ2VtZW50IEFjY291bnQgRUMyIGluc3RhbmNlcyByZW1vdmVkXCIsXG4gICAgICAgIGRlc2NyaXB0aW9uOiBcIkVDMiBJbnN0YW5jZXMgc2hvdWxkIG5vdCBleGlzdCBpbiBNYW5hZ2VtZW50IEFjY291bnQuXCIsXG4gICAgICAgIHN0YXR1czogY2ZhdEVjMlBhc3MgPyBcImNvbXBsZXRlXCIgOiBcImluY29tcGxldGVcIixcbiAgICAgICAgcmVxdWlyZWQ6IGZhbHNlLFxuICAgICAgICB3ZWlnaHQ6IDQsXG4gICAgICAgIGxvZTogMSxcbiAgICAgICAgcmVtZWRpYXRpb25MaW5rOiBcIiBcIlxuICAgIH07XG4gICAgY2ZhdENoZWNrcy5wdXNoKGNmYXRFYzJDaGVjayk7XG4gICAgY29uc3QgY2ZhdFZwY0NoZWNrID0ge1xuICAgICAgICBjaGVjazogXCJNYW5hZ2VtZW50IEFjY291bnQgVlBDcyByZW1vdmVkXCIsXG4gICAgICAgIGRlc2NyaXB0aW9uOiBcIk1hbmFnZW1lbnQgQWNjb3VudCBzaG91bGQgbm90IGhhdmUgYW55IFZQQ3MuXCIsXG4gICAgICAgIHN0YXR1czogY2ZhdFZwY1Bhc3MgPyBcImNvbXBsZXRlXCIgOiBcImluY29tcGxldGVcIixcbiAgICAgICAgcmVxdWlyZWQ6IGZhbHNlLFxuICAgICAgICB3ZWlnaHQ6IDQsXG4gICAgICAgIGxvZTogMSxcbiAgICAgICAgcmVtZWRpYXRpb25MaW5rOiBcImh0dHBzOi8vZ2l0aHViLmNvbS9jbG91ZC1mb3VuZGF0aW9ucy1vbi1hd3MvY2xvdWQtZm91bmRhdGlvbnMtdGVtcGxhdGVzL2Jsb2IvbWFpbi9uZXR3b3JrL25ldHdvcmstZGVmYXVsdC12cGMtZGVsZXRpb24vUkVBRE1FLm1kXCJcbiAgICB9O1xuICAgIGNmYXRDaGVja3MucHVzaChjZmF0VnBjQ2hlY2spO1xuICAgIGNvbnN0IGNmYXRMZWdhY3lDdXJDaGVjayA9IHtcbiAgICAgICAgY2hlY2s6IFwiTGVnYWN5IENVUiBzZXR1cFwiLFxuICAgICAgICBkZXNjcmlwdGlvbjogXCJMZWdhY3kgQ29zdCBhbmQgVXNhZ2UgUmVwb3J0IChDVVIpIHNob3VsZCBiZSBzZXR1cCBvciBkYXRhIGV4cG9ydHMuXCIsXG4gICAgICAgIHN0YXR1czogcmVwb3J0LmlzTGVnYWN5Q3VyU2V0dXAgPyBcImNvbXBsZXRlXCIgOiBcImluY29tcGxldGVcIixcbiAgICAgICAgcmVxdWlyZWQ6IGZhbHNlLFxuICAgICAgICB3ZWlnaHQ6IDQsXG4gICAgICAgIGxvZTogMSxcbiAgICAgICAgcmVtZWRpYXRpb25MaW5rOiBcIiBcIlxuICAgIH07XG4gICAgY29uc3QgY2ZhdENsb3VkVHJhaWxDaGVjayA9IHtcbiAgICAgICAgY2hlY2s6IFwiQ2xvdWRUcmFpbCBUcmFpbCBjcmVhdGVkXCIsXG4gICAgICAgIGRlc2NyaXB0aW9uOiBcIkNsb3VkVHJhaWwgc2hvdWxkIGJlIGVuYWJsZWQgd2l0aGluIHRoZSBhY2NvdW50LlwiLFxuICAgICAgICBzdGF0dXM6IGNmYXRDbG91ZFRyYWlsUGFzcyA/IFwiY29tcGxldGVcIiA6IFwiaW5jb21wbGV0ZVwiLFxuICAgICAgICByZXF1aXJlZDogdHJ1ZSxcbiAgICAgICAgd2VpZ2h0OiA2LFxuICAgICAgICBsb2U6IDMsXG4gICAgICAgIHJlbWVkaWF0aW9uTGluazogXCJodHRwczovL2RvY3MuYXdzLmFtYXpvbi5jb20vYXdzY2xvdWR0cmFpbC9sYXRlc3QvdXNlcmd1aWRlL2NyZWF0aW5nLXRyYWlsLW9yZ2FuaXphdGlvbi5odG1sXCJcbiAgICB9O1xuICAgIGNmYXRDaGVja3MucHVzaChjZmF0Q2xvdWRUcmFpbENoZWNrKTtcbiAgICBjb25zdCBjZmF0Q2xvdWRUcmFpbE9yZ1NlcnZpY2VFbmFibGVkQ2hlY2sgPSB7XG4gICAgICAgIGNoZWNrOiBcIkNsb3VkVHJhaWwgT3JnYW5pemF0aW9uIFNlcnZpY2UgZW5hYmxlZFwiLFxuICAgICAgICBkZXNjcmlwdGlvbjogXCJDbG91ZFRyYWlsIHNob3VsZCBiZSBlbmFibGVkIG9uIHRoZSBPcmdhbml6YXRpb24uXCIsXG4gICAgICAgIHN0YXR1czogY2ZhdENsb3VkVHJhaWxPcmdTZXJ2aWNlRW5hYmxlZFBhc3MgPyBcImNvbXBsZXRlXCIgOiBcImluY29tcGxldGVcIixcbiAgICAgICAgcmVxdWlyZWQ6IHRydWUsXG4gICAgICAgIHdlaWdodDogNixcbiAgICAgICAgbG9lOiAxLFxuICAgICAgICByZW1lZGlhdGlvbkxpbms6IFwiaHR0cHM6Ly9kb2NzLmF3cy5hbWF6b24uY29tL29yZ2FuaXphdGlvbnMvbGF0ZXN0L3VzZXJndWlkZS9zZXJ2aWNlcy10aGF0LWNhbi1pbnRlZ3JhdGUtY2xvdWR0cmFpbC5odG1sXCJcbiAgICB9O1xuICAgIGNmYXRDaGVja3MucHVzaChjZmF0Q2xvdWRUcmFpbE9yZ1NlcnZpY2VFbmFibGVkQ2hlY2spO1xuICAgIGNvbnN0IGNmYXRDbG91ZFRyYWlsT3JnVHJhaWxDaGVjayA9IHtcbiAgICAgICAgY2hlY2s6IFwiQ2xvdWRUcmFpbCBPcmcgVHJhaWwgZGVwbG95ZWRcIixcbiAgICAgICAgZGVzY3JpcHRpb246IFwiQXQgbGVhc3Qgb25lIENsb3VkVHJhaWwgT3JnYW5pemF0aW9uIFRyYWlsIHNob3VsZCBiZSBlbmFibGVkLlwiLFxuICAgICAgICBzdGF0dXM6IGNmYXRDbG91ZFRyYWlsT3JnVHJhaWxQYXNzID8gXCJjb21wbGV0ZVwiIDogXCJpbmNvbXBsZXRlXCIsXG4gICAgICAgIHJlcXVpcmVkOiB0cnVlLFxuICAgICAgICB3ZWlnaHQ6IDYsXG4gICAgICAgIGxvZTogMSxcbiAgICAgICAgcmVtZWRpYXRpb25MaW5rOiBcImh0dHBzOi8vZG9jcy5hd3MuYW1hem9uLmNvbS9hd3NjbG91ZHRyYWlsL2xhdGVzdC91c2VyZ3VpZGUvY3JlYXRpbmctdHJhaWwtb3JnYW5pemF0aW9uLmh0bWxcIlxuICAgIH07XG4gICAgY2ZhdENoZWNrcy5wdXNoKGNmYXRDbG91ZFRyYWlsT3JnVHJhaWxDaGVjayk7XG4gICAgY29uc3QgY2ZhdENvbmZpZ01hbmFnZW1lbnRBY2NvdW50Q2hlY2sgPSB7XG4gICAgICAgIGNoZWNrOiBcIkNvbmZpZyBSZWNvcmRlciBpbiBNYW5hZ2VtZW50IEFjY291bnQgY29uZmlndXJlZFwiLFxuICAgICAgICBkZXNjcmlwdGlvbjogXCJDb25maWcgUmVjb3JkZXIgaW4gdGhlIE1hbmFnZW1lbnQgQWNjb3VudCBzaG91bGQgYmUgZW5hYmxlZC5cIixcbiAgICAgICAgc3RhdHVzOiBjZmF0Q29uZmlnTWFuYWdlbWVudEFjY291bnRQYXNzID8gXCJjb21wbGV0ZVwiIDogXCJpbmNvbXBsZXRlXCIsXG4gICAgICAgIHJlcXVpcmVkOiB0cnVlLFxuICAgICAgICB3ZWlnaHQ6IDYsXG4gICAgICAgIGxvZTogMixcbiAgICAgICAgcmVtZWRpYXRpb25MaW5rOiBcImh0dHBzOi8vYXdzLmFtYXpvbi5jb20vYmxvZ3MvbXQvbWFuYWdpbmctYXdzLW9yZ2FuaXphdGlvbnMtYWNjb3VudHMtdXNpbmctYXdzLWNvbmZpZy1hbmQtYXdzLWNsb3VkZm9ybWF0aW9uLXN0YWNrc2V0cy9cIlxuICAgIH07XG4gICAgY2ZhdENoZWNrcy5wdXNoKGNmYXRDb25maWdNYW5hZ2VtZW50QWNjb3VudENoZWNrKTtcbiAgICBjb25zdCBjZmF0Q29uZmlnUmVjb3JkZXJNYW5hZ2VtZW50QWNjb3VudENoZWNrID0ge1xuICAgICAgICBjaGVjazogXCJDb25maWcgRGVsaXZlcnkgQ2hhbm5lbCBpbiBNYW5hZ2VtZW50IEFjY291bnQgY29uZmlndXJlZFwiLFxuICAgICAgICBkZXNjcmlwdGlvbjogXCJDb25maWcgRGVsaXZlcnkgQ2hhbm5lbCBpbiBNYW5hZ2VtZW50IEFjY291bnQgc2hvdWxkIGJlIGVuYWJsZWQuXCIsXG4gICAgICAgIHN0YXR1czogY2ZhdENvbmZpZ1JlY29yZGVyTWFuYWdlbWVudEFjY291bnRQYXNzID8gXCJjb21wbGV0ZVwiIDogXCJpbmNvbXBsZXRlXCIsXG4gICAgICAgIHJlcXVpcmVkOiB0cnVlLFxuICAgICAgICB3ZWlnaHQ6IDYsXG4gICAgICAgIGxvZTogMixcbiAgICAgICAgcmVtZWRpYXRpb25MaW5rOiBcImh0dHBzOi8vYXdzLmFtYXpvbi5jb20vYmxvZ3MvbXQvbWFuYWdpbmctYXdzLW9yZ2FuaXphdGlvbnMtYWNjb3VudHMtdXNpbmctYXdzLWNvbmZpZy1hbmQtYXdzLWNsb3VkZm9ybWF0aW9uLXN0YWNrc2V0cy9cIlxuICAgIH07XG4gICAgY2ZhdENoZWNrcy5wdXNoKGNmYXRDb25maWdSZWNvcmRlck1hbmFnZW1lbnRBY2NvdW50Q2hlY2spO1xuICAgIGNvbnN0IGNmYXRDbG91ZEZvcm1hdGlvbkVuYWJsZUNoZWNrID0ge1xuICAgICAgICBjaGVjazogXCJDbG91ZEZvcm1hdGlvbiBTdGFja1NldHMgYWN0aXZhdGVkXCIsXG4gICAgICAgIGRlc2NyaXB0aW9uOiBcIkNsb3VkRm9ybWF0aW9uIFN0YWNrU2V0cyBzaG91bGQgYmUgYWN0aXZhdGVkIGluIHRoZSBDbG91ZEZvcm1hdGlvbiBjb25zb2xlLlwiLFxuICAgICAgICBzdGF0dXM6IGNmYXRPcmdDbG91ZEZvcm1hdGlvbkVuYWJsZWRQYXNzID8gXCJjb21wbGV0ZVwiIDogXCJpbmNvbXBsZXRlXCIsXG4gICAgICAgIHJlcXVpcmVkOiBmYWxzZSxcbiAgICAgICAgd2VpZ2h0OiA1LFxuICAgICAgICBsb2U6IDEsXG4gICAgICAgIHJlbWVkaWF0aW9uTGluazogXCJodHRwczovL2RvY3MuYXdzLmFtYXpvbi5jb20vb3JnYW5pemF0aW9ucy9sYXRlc3QvdXNlcmd1aWRlL3NlcnZpY2VzLXRoYXQtY2FuLWludGVncmF0ZS1jbG91ZGZvcm1hdGlvbi5odG1sI2ludGVncmF0ZS1lbmFibGUtdGEtY2xvdWRmb3JtYXRpb25cIlxuICAgIH07XG4gICAgY2ZhdENoZWNrcy5wdXNoKGNmYXRDbG91ZEZvcm1hdGlvbkVuYWJsZUNoZWNrKTtcbiAgICBjb25zdCBjZmF0T3JnU2VydmljZUd1YXJkRHV0eUNoZWNrID0ge1xuICAgICAgICBjaGVjazogXCJHdWFyZER1dHkgT3JnYW5pemF0aW9uIHNlcnZpY2UgZW5hYmxlZFwiLFxuICAgICAgICBkZXNjcmlwdGlvbjogXCJHdWFyZER1dHkgT3JnYW5pemF0aW9uIHNlcnZpY2VzIHNob3VsZCBiZSBlbmFibGVkLlwiLFxuICAgICAgICBzdGF0dXM6IGNmYXRPcmdTZXJ2aWNlR3VhcmREdXR5RW5hYmxlZFBhc3MgPyBcImNvbXBsZXRlXCIgOiBcImluY29tcGxldGVcIixcbiAgICAgICAgcmVxdWlyZWQ6IGZhbHNlLFxuICAgICAgICB3ZWlnaHQ6IDQsXG4gICAgICAgIGxvZTogMSxcbiAgICAgICAgcmVtZWRpYXRpb25MaW5rOiBcIiBcIlxuICAgIH07XG4gICAgY2ZhdENoZWNrcy5wdXNoKGNmYXRPcmdTZXJ2aWNlR3VhcmREdXR5Q2hlY2spO1xuICAgIGNvbnN0IGNmYXRPcmdTZXJ2aWNlUmFtQ2hlY2sgPSB7XG4gICAgICAgIGNoZWNrOiBcIlJBTSBPcmdhbml6YXRpb24gc2VydmljZSBlbmFibGVkXCIsXG4gICAgICAgIGRlc2NyaXB0aW9uOiBcIlJlc291cmNlIEFjY2VzcyBNYW5hZ2VyIChSQU0pIHRydXN0ZWQgYWNjZXNzIHNob3VsZCBiZSBlbmFibGVkIGluIHRoZSBBV1MgT3JnYW5pemF0aW9uLlwiLFxuICAgICAgICBzdGF0dXM6IGNmYXRPcmdTZXJ2aWNlUmFtRW5hYmxlZFBhc3MgPyBcImNvbXBsZXRlXCIgOiBcImluY29tcGxldGVcIixcbiAgICAgICAgcmVxdWlyZWQ6IGZhbHNlLFxuICAgICAgICB3ZWlnaHQ6IDQsXG4gICAgICAgIGxvZTogMSxcbiAgICAgICAgcmVtZWRpYXRpb25MaW5rOiBcIiBcIlxuICAgIH07XG4gICAgY2ZhdENoZWNrcy5wdXNoKGNmYXRPcmdTZXJ2aWNlUmFtQ2hlY2spO1xuICAgIGNvbnN0IGNmYXRPcmdTZXJ2aWNlU2VjdXJpdHlIdWJDaGVjayA9IHtcbiAgICAgICAgY2hlY2s6IFwiU2VjdXJpdHkgSHViIE9yZ2FuaXphdGlvbiBzZXJ2aWNlIGVuYWJsZWRcIixcbiAgICAgICAgZGVzY3JpcHRpb246IFwiU2VjdXJpdHkgSHViIHRydXN0ZWQgYWNjZXNzIHNob3VsZCBiZSBlbmFibGVkIGluIHRoZSBBV1MgT3JnYW5pemF0aW9uLlwiLFxuICAgICAgICBzdGF0dXM6IGNmYXRPcmdTZXJ2aWNlU2VjdXJpdHlIdWJFbmFibGVkUGFzcyA/IFwiY29tcGxldGVcIiA6IFwiaW5jb21wbGV0ZVwiLFxuICAgICAgICByZXF1aXJlZDogZmFsc2UsXG4gICAgICAgIHdlaWdodDogNCxcbiAgICAgICAgbG9lOiAxLFxuICAgICAgICByZW1lZGlhdGlvbkxpbms6IFwiIFwiXG4gICAgfTtcbiAgICBjZmF0Q2hlY2tzLnB1c2goY2ZhdE9yZ1NlcnZpY2VTZWN1cml0eUh1YkNoZWNrKTtcbiAgICBjb25zdCBjZmF0T3JnU2VydmljZUlhbUFjY2Vzc0FuYWx5emVyQ2hlY2sgPSB7XG4gICAgICAgIGNoZWNrOiBcIklBTSBBY2Nlc3MgQW5hbHl6ZXIgT3JnYW5pemF0aW9uIHNlcnZpY2UgZW5hYmxlZFwiLFxuICAgICAgICBkZXNjcmlwdGlvbjogXCJJQU0gQWNjZXNzIEFuYWx5emVyIHRydXN0ZWQgYWNjZXNzIHNob3VsZCBiZSBlbmFibGVkIGluIHRoZSBBV1MgT3JnYW5pemF0aW9uLlwiLFxuICAgICAgICBzdGF0dXM6IGNmYXRPcmdTZXJ2aWNlSWFtQWNjZXNzQW5hbHl6ZXJFbmFibGVkUGFzcyA/IFwiY29tcGxldGVcIiA6IFwiaW5jb21wbGV0ZVwiLFxuICAgICAgICByZXF1aXJlZDogZmFsc2UsXG4gICAgICAgIHdlaWdodDogNCxcbiAgICAgICAgbG9lOiAxLFxuICAgICAgICByZW1lZGlhdGlvbkxpbms6IFwiIFwiXG4gICAgfTtcbiAgICBjZmF0Q2hlY2tzLnB1c2goY2ZhdE9yZ1NlcnZpY2VJYW1BY2Nlc3NBbmFseXplckNoZWNrKTtcbiAgICBjb25zdCBjZmF0T3JnU2VydmljZUNvbmZpZ0NoZWNrID0ge1xuICAgICAgICBjaGVjazogXCJDb25maWcgT3JnYW5pemF0aW9uIHNlcnZpY2UgZW5hYmxlZFwiLFxuICAgICAgICBkZXNjcmlwdGlvbjogXCJBV1MgQ29uZmlnIHRydXN0ZWQgYWNjZXNzIHNob3VsZCBiZSBlbmFibGVkIGluIHRoZSBBV1MgT3JnYW5pemF0aW9uLlwiLFxuICAgICAgICBzdGF0dXM6IGNmYXRPcmdTZXJ2aWNlQXdzQ29uZmlnRW5hYmxlZFBhc3MgPyBcImNvbXBsZXRlXCIgOiBcImluY29tcGxldGVcIixcbiAgICAgICAgcmVxdWlyZWQ6IGZhbHNlLFxuICAgICAgICB3ZWlnaHQ6IDQsXG4gICAgICAgIGxvZTogMSxcbiAgICAgICAgcmVtZWRpYXRpb25MaW5rOiBcIiBcIlxuICAgIH07XG4gICAgY2ZhdENoZWNrcy5wdXNoKGNmYXRPcmdTZXJ2aWNlQ29uZmlnQ2hlY2spO1xuICAgIGNvbnN0IGNmYXRPcmdTZXJ2aWNlQ2xvdWRGb3JtYXRpb25DaGVjayA9IHtcbiAgICAgICAgY2hlY2s6IFwiQ2xvdWRGb3JtYXRpb24gT3JnYW5pemF0aW9uIHNlcnZpY2UgZW5hYmxlZFwiLFxuICAgICAgICBkZXNjcmlwdGlvbjogXCJDbG91ZEZvcm1hdGlvbiB0cnVzdGVkIGFjY2VzcyBzaG91bGQgYmUgZW5hYmxlZCBpbiB0aGUgQVdTIE9yZ2FuaXphdGlvbi5cIixcbiAgICAgICAgc3RhdHVzOiBjZmF0T3JnQ2xvdWRGb3JtYXRpb25TdGF0dXNQYXNzID8gXCJjb21wbGV0ZVwiIDogXCJpbmNvbXBsZXRlXCIsXG4gICAgICAgIHJlcXVpcmVkOiBmYWxzZSxcbiAgICAgICAgd2VpZ2h0OiA1LFxuICAgICAgICBsb2U6IDEsXG4gICAgICAgIHJlbWVkaWF0aW9uTGluazogXCJodHRwczovL2RvY3MuYXdzLmFtYXpvbi5jb20vQVdTQ2xvdWRGb3JtYXRpb24vbGF0ZXN0L1VzZXJHdWlkZS9zdGFja3NldHMtb3Jncy1hY3RpdmF0ZS10cnVzdGVkLWFjY2Vzcy5odG1sXCJcbiAgICB9O1xuICAgIGNmYXRDaGVja3MucHVzaChjZmF0T3JnU2VydmljZUNsb3VkRm9ybWF0aW9uQ2hlY2spO1xuICAgIGNvbnN0IGNmYXRPcmdTZXJ2aWNlQmFja3VwQ2hlY2sgPSB7XG4gICAgICAgIGNoZWNrOiBcIkJhY2t1cCBPcmdhbml6YXRpb24gc2VydmljZSBlbmFibGVkXCIsXG4gICAgICAgIGRlc2NyaXB0aW9uOiBcIkJhY2t1cCB0cnVzdGVkIGFjY2VzcyBzaG91bGQgYmUgZW5hYmxlZCBpbiB0aGUgQVdTIE9yZ2FuaXphdGlvbi5cIixcbiAgICAgICAgc3RhdHVzOiBjZmF0T3JnU2VydmljZUJhY2t1cEVuYWJsZWRQYXNzID8gXCJjb21wbGV0ZVwiIDogXCJpbmNvbXBsZXRlXCIsXG4gICAgICAgIHJlcXVpcmVkOiBmYWxzZSxcbiAgICAgICAgd2VpZ2h0OiA0LFxuICAgICAgICBsb2U6IDEsXG4gICAgICAgIHJlbWVkaWF0aW9uTGluazogXCIgXCJcbiAgICB9O1xuICAgIGNvbnN0IGNmYXRJbmZyYU91Q2hlY2sgPSB7XG4gICAgICAgIGNoZWNrOiBcIlRvcC1sZXZlbCBJbmZyYXN0cnVjdHVyZSBPVSBkZXBsb3llZFwiLFxuICAgICAgICBkZXNjcmlwdGlvbjogXCJUb3AtbGV2ZWwgSW5mcmFzdHJ1Y3R1cmUgT1Ugc2hvdWxkIGV4aXN0LlwiLFxuICAgICAgICBzdGF0dXM6IGluZnJhc3RydWN0dXJlRm91bmQgPyBcImNvbXBsZXRlXCIgOiBcImluY29tcGxldGVcIixcbiAgICAgICAgcmVxdWlyZWQ6IGZhbHNlLFxuICAgICAgICB3ZWlnaHQ6IDUsXG4gICAgICAgIGxvZTogMixcbiAgICAgICAgcmVtZWRpYXRpb25MaW5rOiBcImh0dHBzOi8vY2F0YWxvZy53b3Jrc2hvcHMuYXdzL2NvbnRyb2wtdG93ZXIvZW4tVVMvaW50cm9kdWN0aW9uL21hbmFnZS1vdVwiXG4gICAgfTtcbiAgICBjZmF0Q2hlY2tzLnB1c2goY2ZhdEluZnJhT3VDaGVjayk7XG4gICAgY29uc3QgY2ZhdFNlY3VyaXR5T3VDaGVjayA9IHtcbiAgICAgICAgY2hlY2s6IFwiVG9wLWxldmVsIFNlY3VyaXR5IE9VIGRlcGxveWVkXCIsXG4gICAgICAgIGRlc2NyaXB0aW9uOiBcIlRvcC1sZXZlbCBTZWN1cml0eSBPVSBzaG91bGQgZXhpc3QuXCIsXG4gICAgICAgIHN0YXR1czogc2VjdXJpdHlGb3VuZCA/IFwiY29tcGxldGVcIiA6IFwiaW5jb21wbGV0ZVwiLFxuICAgICAgICByZXF1aXJlZDogdHJ1ZSxcbiAgICAgICAgd2VpZ2h0OiA2LFxuICAgICAgICBsb2U6IDIsXG4gICAgICAgIHJlbWVkaWF0aW9uTGluazogXCJodHRwczovL2NhdGFsb2cud29ya3Nob3BzLmF3cy9jb250cm9sLXRvd2VyL2VuLVVTL2ludHJvZHVjdGlvbi9tYW5hZ2Utb3VcIlxuICAgIH07XG4gICAgY2ZhdENoZWNrcy5wdXNoKGNmYXRTZWN1cml0eU91Q2hlY2spO1xuICAgIGNvbnN0IGNmYXRXb3JrbG9hZE91Q2hlY2sgPSB7XG4gICAgICAgIGNoZWNrOiBcIlRvcC1sZXZlbCBXb3JrbG9hZHMgT1UgZGVwbG95ZWRcIixcbiAgICAgICAgZGVzY3JpcHRpb246IFwiVG9wLWxldmVsIFdvcmtsb2FkcyBPVSBzaG91bGQgZXhpc3QuXCIsXG4gICAgICAgIHN0YXR1czogd29ya2xvYWRzRm91bmQgPyBcImNvbXBsZXRlXCIgOiBcImluY29tcGxldGVcIixcbiAgICAgICAgcmVxdWlyZWQ6IGZhbHNlLFxuICAgICAgICB3ZWlnaHQ6IDUsXG4gICAgICAgIGxvZTogMixcbiAgICAgICAgcmVtZWRpYXRpb25MaW5rOiBcImh0dHBzOi8vY2F0YWxvZy53b3Jrc2hvcHMuYXdzL2NvbnRyb2wtdG93ZXIvZW4tVVMvaW50cm9kdWN0aW9uL21hbmFnZS1vdVwiXG4gICAgfTtcbiAgICBjZmF0Q2hlY2tzLnB1c2goY2ZhdFdvcmtsb2FkT3VDaGVjayk7XG4gICAgY29uc3QgY2ZhdElhbUlkQ09yZ1NlcnZpY2VDaGVjayA9IHtcbiAgICAgICAgY2hlY2s6IFwiSUFNIElkQyBPcmdhbml6YXRpb24gc2VydmljZSBlbmFibGVkXCIsXG4gICAgICAgIGRlc2NyaXB0aW9uOiBcIklBTSBJZGVudGl0eSBDZW50ZXIgdHJ1c3RlZCBhY2Nlc3Mgc2hvdWxkIGJlIGVuYWJsZWQgaW4gdGhlIEFXUyBPcmdhbml6YXRpb25cIixcbiAgICAgICAgc3RhdHVzOiBjZmF0SWFtSWRQT3JnU2VydmljZVBhc3MgPyBcImNvbXBsZXRlXCIgOiBcImluY29tcGxldGVcIixcbiAgICAgICAgcmVxdWlyZWQ6IHRydWUsXG4gICAgICAgIHdlaWdodDogNixcbiAgICAgICAgbG9lOiAxLFxuICAgICAgICByZW1lZGlhdGlvbkxpbms6IFwiaHR0cHM6Ly9kb2NzLmF3cy5hbWF6b24uY29tL3NpbmdsZXNpZ25vbi9sYXRlc3QvdXNlcmd1aWRlL2dldC1zZXQtdXAtZm9yLWlkYy5odG1sXCJcbiAgICB9O1xuICAgIGNmYXRDaGVja3MucHVzaChjZmF0SWFtSWRDT3JnU2VydmljZUNoZWNrKTtcbiAgICBjb25zdCBjZmF0SWFtSWRjQ29uZmlndXJlZENoZWNrID0ge1xuICAgICAgICBjaGVjazogXCJJQU0gSWRDIGNvbmZpZ3VyZWRcIixcbiAgICAgICAgZGVzY3JpcHRpb246IFwiSUFNIElkZW50aXR5IENlbnRlciBzaG91bGQgYmUgY29uZmlndXJlZC5cIixcbiAgICAgICAgc3RhdHVzOiBjZmF0SWFtSWRjQ29uZmlndXJlZFBhc3MgPyBcImNvbXBsZXRlXCIgOiBcImluY29tcGxldGVcIixcbiAgICAgICAgcmVxdWlyZWQ6IHRydWUsXG4gICAgICAgIHdlaWdodDogNixcbiAgICAgICAgbG9lOiAzLFxuICAgICAgICByZW1lZGlhdGlvbkxpbms6IFwiaHR0cHM6Ly9kb2NzLmF3cy5hbWF6b24uY29tL3NpbmdsZXNpZ25vbi9sYXRlc3QvdXNlcmd1aWRlL3R1dG9yaWFscy5odG1sXCJcbiAgICB9O1xuICAgIGNmYXRDaGVja3MucHVzaChjZmF0SWFtSWRjQ29uZmlndXJlZENoZWNrKTtcbiAgICBjb25zdCBjZmF0T3JnUG9saWN5U2NwRW5hYmxlZCA9IHtcbiAgICAgICAgY2hlY2s6IFwiU2VydmljZSBDb250cm9sIFBvbGljaWVzIGVuYWJsZWRcIixcbiAgICAgICAgZGVzY3JpcHRpb246IFwiU2VydmljZSBDb250cm9sIFBvbGljeSBzaG91bGQgYmUgZW5hYmxlZCB3aXRoaW4gdGhlIEFXUyBPcmdhbml6YXRpb24uXCIsXG4gICAgICAgIHN0YXR1czogY2ZhdFNjcEVuYWJsZWRQYXNzID8gXCJjb21wbGV0ZVwiIDogXCJpbmNvbXBsZXRlXCIsXG4gICAgICAgIHJlcXVpcmVkOiB0cnVlLFxuICAgICAgICB3ZWlnaHQ6IDYsXG4gICAgICAgIGxvZTogMSxcbiAgICAgICAgcmVtZWRpYXRpb25MaW5rOiBcImh0dHBzOi8vZG9jcy5hd3MuYW1hem9uLmNvbS9vcmdhbml6YXRpb25zL2xhdGVzdC91c2VyZ3VpZGUvb3Jnc19tYW5hZ2VfcG9saWNpZXNfZW5hYmxlLWRpc2FibGUuaHRtbFwiXG4gICAgfTtcbiAgICBjZmF0Q2hlY2tzLnB1c2goY2ZhdE9yZ1BvbGljeVNjcEVuYWJsZWQpO1xuICAgIGNvbnN0IGNmYXRPcmdQb2xpY3lUYWdQb2xpY3lDaGVjayA9IHtcbiAgICAgICAgY2hlY2s6IFwiT3JnYW5pemF0aW9uIFRhZyBQb2xpY3kgZW5hYmxlZFwiLFxuICAgICAgICBkZXNjcmlwdGlvbjogXCJUYWcgUG9saWN5IHNob3VsZCBiZSBlbmFibGVkIHdpdGhpbiB0aGUgQVdTIE9yZ2FuaXphdGlvbi5cIixcbiAgICAgICAgc3RhdHVzOiBjZmF0VGFnUG9saWNpZXNFbmFibGVkUGFzcyA/IFwiY29tcGxldGVcIiA6IFwiaW5jb21wbGV0ZVwiLFxuICAgICAgICByZXF1aXJlZDogdHJ1ZSxcbiAgICAgICAgd2VpZ2h0OiA2LFxuICAgICAgICBsb2U6IDEsXG4gICAgICAgIHJlbWVkaWF0aW9uTGluazogXCJodHRwczovL2RvY3MuYXdzLmFtYXpvbi5jb20vb3JnYW5pemF0aW9ucy9sYXRlc3QvdXNlcmd1aWRlL29yZ3NfbWFuYWdlX3BvbGljaWVzX2VuYWJsZS1kaXNhYmxlLmh0bWxcIlxuICAgIH07XG4gICAgY2ZhdENoZWNrcy5wdXNoKGNmYXRPcmdQb2xpY3lUYWdQb2xpY3lDaGVjayk7XG4gICAgY29uc3QgY2ZhdEJhY2t1cFBvbGljaWVzRW5hYmxlZENoZWNrID0ge1xuICAgICAgICBjaGVjazogXCJPcmdhbml6YXRpb24gQmFja3VwIFBvbGljeSBlbmFibGVkXCIsXG4gICAgICAgIGRlc2NyaXB0aW9uOiBcIkJhY2t1cCBQb2xpY3kgc2hvdWxkIGJlIGVuYWJsZWQgd2l0aGluIHRoZSBBV1MgT3JnYW5pemF0aW9uLlwiLFxuICAgICAgICBzdGF0dXM6IGNmYXRCYWNrdXBQb2xpY2llc0VuYWJsZWRQYXNzID8gXCJjb21wbGV0ZVwiIDogXCJpbmNvbXBsZXRlXCIsXG4gICAgICAgIHJlcXVpcmVkOiBmYWxzZSxcbiAgICAgICAgd2VpZ2h0OiA1LFxuICAgICAgICBsb2U6IDEsXG4gICAgICAgIHJlbWVkaWF0aW9uTGluazogXCJodHRwczovL2RvY3MuYXdzLmFtYXpvbi5jb20vb3JnYW5pemF0aW9ucy9sYXRlc3QvdXNlcmd1aWRlL29yZ3NfbWFuYWdlX3BvbGljaWVzX2VuYWJsZS1kaXNhYmxlLmh0bWxcIlxuICAgIH07XG4gICAgY2ZhdENoZWNrcy5wdXNoKGNmYXRCYWNrdXBQb2xpY2llc0VuYWJsZWRDaGVjayk7XG4gICAgY29uc3QgY2ZhdENvbnRyb2xUb3dlckRlcGxveWVkQ2hlY2sgPSB7XG4gICAgICAgIGNoZWNrOiBcIkNvbnRyb2wgVG93ZXIgZGVwbG95ZWRcIixcbiAgICAgICAgZGVzY3JpcHRpb246IFwiQ29udHJvbCBUb3dlciBzaG91bGQgYmUgZGVwbG95ZWQuXCIsXG4gICAgICAgIHN0YXR1czogY2ZhdENvbnRyb2xUb3dlckRlcGxveWVkUGFzcyA/IFwiY29tcGxldGVcIiA6IFwiaW5jb21wbGV0ZVwiLFxuICAgICAgICByZXF1aXJlZDogdHJ1ZSxcbiAgICAgICAgd2VpZ2h0OiA2LFxuICAgICAgICBsb2U6IDYsXG4gICAgICAgIHJlbWVkaWF0aW9uTGluazogXCJodHRwczovL2NhdGFsb2cud29ya3Nob3BzLmF3cy9jb250cm9sLXRvd2VyL2VuLVVTL3ByZXJlcXVpc2l0ZXMvZGVwbG95aW5nXCJcbiAgICB9O1xuICAgIGNmYXRDaGVja3MucHVzaChjZmF0Q29udHJvbFRvd2VyRGVwbG95ZWRDaGVjayk7XG4gICAgY29uc3QgY2ZhdENvbnRyb2xUb3dlckxhdGVzdFZlcnNpb25DaGVjayA9IHtcbiAgICAgICAgY2hlY2s6IFwiQ29udHJvbCBUb3dlciBsYXRlc3QgdmVyc2lvblwiLFxuICAgICAgICBkZXNjcmlwdGlvbjogXCJDb250cm9sIFRvd2VyIHNob3VsZCBiZSB0aGUgbGF0ZXN0IHZlcnNpb24uXCIsXG4gICAgICAgIHN0YXR1czogY2ZhdENvbnRyb2xUb3dlckxhdGVzdFZlcnNpb25QYXNzID8gXCJjb21wbGV0ZVwiIDogXCJpbmNvbXBsZXRlXCIsXG4gICAgICAgIHJlcXVpcmVkOiBmYWxzZSxcbiAgICAgICAgd2VpZ2h0OiA1LFxuICAgICAgICBsb2U6IDIsXG4gICAgICAgIHJlbWVkaWF0aW9uTGluazogXCJodHRwczovL2RvY3MuYXdzLmFtYXpvbi5jb20vY29udHJvbHRvd2VyL2xhdGVzdC91c2VyZ3VpZGUvdXBkYXRlLWNvbnRyb2x0b3dlci5odG1sXCJcbiAgICB9O1xuICAgIGNmYXRDaGVja3MucHVzaChjZmF0Q29udHJvbFRvd2VyTGF0ZXN0VmVyc2lvbkNoZWNrKTtcbiAgICBjb25zdCBjZmF0Q29udHJvbFRvd2VyTm90RHJpZnRlZENoZWNrID0ge1xuICAgICAgICBjaGVjazogXCJDb250cm9sIFRvd2VyIG5vdCBkcmlmdGVkXCIsXG4gICAgICAgIGRlc2NyaXB0aW9uOiBcIkNvbnRyb2wgVG93ZXIgc2hvdWxkIG5vdCBiZSBkcmlmdGVkLlwiLFxuICAgICAgICBzdGF0dXM6IGNmYXRDb250cm9sVG93ZXJOb3REcmlmdGVkUGFzcyA/IFwiY29tcGxldGVcIiA6IFwiaW5jb21wbGV0ZVwiLFxuICAgICAgICByZXF1aXJlZDogdHJ1ZSxcbiAgICAgICAgd2VpZ2h0OiA2LFxuICAgICAgICBsb2U6IDIsXG4gICAgICAgIHJlbWVkaWF0aW9uTGluazogXCJodHRwczovL2RvY3MuYXdzLmFtYXpvbi5jb20vY29udHJvbHRvd2VyL2xhdGVzdC91c2VyZ3VpZGUvcmVzb2x2ZS1kcmlmdC5odG1sXCJcbiAgICB9O1xuICAgIGNmYXRDaGVja3MucHVzaChjZmF0Q29udHJvbFRvd2VyTm90RHJpZnRlZENoZWNrKTtcbiAgICBjb25zdCBjZmF0TG9nQXJjaGl2ZUFjY291bnRDaGVjayA9IHtcbiAgICAgICAgY2hlY2s6IFwiTG9nIEFyY2hpdmUgYWNjb3VudCBkZXBsb3llZFwiLFxuICAgICAgICBkZXNjcmlwdGlvbjogXCJMb2cgQXJjaGl2ZSBhY2NvdW50IHNob3VsZCBleGlzdC5cIixcbiAgICAgICAgc3RhdHVzOiBjZmF0TG9nQXJjaGl2ZUFjY291bnRQYXNzID8gXCJjb21wbGV0ZVwiIDogXCJpbmNvbXBsZXRlXCIsXG4gICAgICAgIHJlcXVpcmVkOiB0cnVlLFxuICAgICAgICB3ZWlnaHQ6IDYsXG4gICAgICAgIGxvZTogMixcbiAgICAgICAgcmVtZWRpYXRpb25MaW5rOiBcIiBcIlxuICAgIH07XG4gICAgY2ZhdENoZWNrcy5wdXNoKGNmYXRMb2dBcmNoaXZlQWNjb3VudENoZWNrKTtcbiAgICBjb25zdCBjZmF0QXVkaXRBY2NvdW50Q2hlY2sgPSB7XG4gICAgICAgIGNoZWNrOiBcIkF1ZGl0IGFjY291bnQgZGVwbG95ZWRcIixcbiAgICAgICAgZGVzY3JpcHRpb246IFwiQXVkaXQvU2VjdXJpdHkgVG9vbGluZyBhY2NvdW50IHNob3VsZCBleGlzdC5cIixcbiAgICAgICAgc3RhdHVzOiBjZmF0QXVkaXRBY2NvdW50UGFzcyA/IFwiY29tcGxldGVcIiA6IFwiaW5jb21wbGV0ZVwiLFxuICAgICAgICByZXF1aXJlZDogdHJ1ZSxcbiAgICAgICAgd2VpZ2h0OiA2LFxuICAgICAgICBsb2U6IDIsXG4gICAgICAgIHJlbWVkaWF0aW9uTGluazogXCIgXCJcbiAgICB9O1xuICAgIGNmYXRDaGVja3MucHVzaChjZmF0QXVkaXRBY2NvdW50Q2hlY2spO1xuICAgIHJlcG9ydC5jZmF0Q2hlY2tzID0gY2ZhdENoZWNrcztcbiAgICBjb25zb2xlLnRhYmxlKGNmYXRDaGVja3MsIFtcImNoZWNrXCIsIFwic3RhdHVzXCIsIFwicmVxdWlyZWRcIiwgXCJsb2VcIl0pO1xuICAgIC8vIHdyaXRlIENGQVQgY2hlY2tzIHRvIENTViBmaWxlIGZvciB1c2UgaW4gdGhlIENGQVQgcmVwb3J0XG4gICAgY29uc3QgY2ZhdENoZWNrc0NzdkZpbGUgPSBcIi4vY2ZhdC1jaGVja3MuY3N2XCI7XG4gICAgY29uc29sZS5sb2coYHdyaXRpbmcgYXNzZXNzbWVudCBzdW1tYXJ5IGNoZWNrcyB0byAuL2NmYXQvY2ZhdC1jaGVja3MuY3N2Li4uYCk7XG4gICAgY29uc3Qgb2JqZWN0QXJyYXlDU1YgPSBvYmplY3RUb0NTVihjZmF0Q2hlY2tzKTtcbiAgICBmcy53cml0ZUZpbGVTeW5jKGNmYXRDaGVja3NDc3ZGaWxlLCBvYmplY3RBcnJheUNTVik7XG4gICAgY29uc3QgcmVwb3J0RmlsZSA9IFwiLi9jZmF0LnR4dFwiO1xuICAgIGNvbnN0IHRhc2tzID0gYXdhaXQgY3JlYXRlUmVwb3J0KHJlcG9ydCk7XG4gICAgY29uc29sZS5sb2coYGNsb3VkIGZvdW5kYXRpb24gYXNzZXNzbWVudCBjb21wbGV0ZS4gQWNjZXNzIHlvdXIgcmVwb3J0IGF0IC4vY2ZhdC9jZmF0LnR4dGApO1xuICAgIGNvbnNvbGUubG9nKGBhc3Nlc3NtZW50IHN1bW1hcnkgY2hlY2tzIHdyaXR0ZW4gdG8gLi9jZmF0L2NmYXQtY2hlY2tzLmNzdmApO1xuICAgIGNyZWF0ZUppcmFJbXBvcnQodGFza3MpO1xuICAgIC8vIGNyZWF0ZSBjc3YgamlyYSBpbXBvcnQgZmlsZVxuICAgIGF3YWl0IGNyZWF0ZUppcmFJbXBvcnQodGFza3MpO1xuICAgIGF3YWl0IGNyZWF0ZUFzYW5hSW1wb3J0KHRhc2tzKTtcbiAgICBhd2FpdCB6aXBBc3Nlc3NtZW50RmlsZXMoKTtcbiAgICBjb25zb2xlLmxvZyhgYXNzZXNzbWVudCBmaWxlcyB6aXBwZWQgdG8gLi9jZmF0L2Fzc2Vzc21lbnQuemlwYCk7XG59O1xubWFpbigpO1xuIiwiaW1wb3J0IHsgRUMyQ2xpZW50LCBEZXNjcmliZVJlZ2lvbnNDb21tYW5kIH0gZnJvbSBcIkBhd3Mtc2RrL2NsaWVudC1lYzJcIjtcbmFzeW5jIGZ1bmN0aW9uIGdldEFsbFJlZ2lvbnMoKSB7XG4gICAgLy8gZ3JhYmJpbmcgYWxsIHJlZ2lvbnMgZnJvbSB1cy1lYXN0LTFcbiAgICBjb25zdCBlYzJDbGllbnQgPSBuZXcgRUMyQ2xpZW50KHsgcmVnaW9uOiBcInVzLWVhc3QtMVwiIH0pO1xuICAgIHRyeSB7XG4gICAgICAgIGNvbnN0IGRlc2NyaWJlUmVnaW9uc0NvbW1hbmQgPSBuZXcgRGVzY3JpYmVSZWdpb25zQ29tbWFuZCh7fSk7XG4gICAgICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgZWMyQ2xpZW50LnNlbmQoZGVzY3JpYmVSZWdpb25zQ29tbWFuZCk7XG4gICAgICAgIGNvbnN0IHJlZ2lvbnMgPSBbXTtcbiAgICAgICAgZm9yIChjb25zdCByZWdpb24gb2YgcmVzcG9uc2UuUmVnaW9ucyB8fCBbXSkge1xuICAgICAgICAgICAgcmVnaW9ucy5wdXNoKHJlZ2lvbi5SZWdpb25OYW1lIHx8IFwiXCIpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiByZWdpb25zO1xuICAgIH1cbiAgICBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgY29uc29sZS5lcnJvcihcIkVycm9yIHJldHJpZXZpbmcgcmVnaW9uczpcIiwgZXJyb3IpO1xuICAgICAgICByZXR1cm4gW107XG4gICAgfVxuICAgIGZpbmFsbHkge1xuICAgICAgICBlYzJDbGllbnQuZGVzdHJveSgpO1xuICAgIH1cbn1cbmV4cG9ydCBkZWZhdWx0IGdldEFsbFJlZ2lvbnM7XG4iLCJpbXBvcnQgeyBTVFNDbGllbnQsIEdldENhbGxlcklkZW50aXR5Q29tbWFuZCB9IGZyb20gXCJAYXdzLXNkay9jbGllbnQtc3RzXCI7XG5pbXBvcnQgeyBPcmdhbml6YXRpb25zQ2xpZW50LCBEZXNjcmliZU9yZ2FuaXphdGlvbkNvbW1hbmQsIH0gZnJvbSBcIkBhd3Mtc2RrL2NsaWVudC1vcmdhbml6YXRpb25zXCI7XG5hc3luYyBmdW5jdGlvbiBnZXRBY2NvdW50SWQocmVnaW9uKSB7XG4gICAgY29uc3Qgc3RzQ2xpZW50ID0gbmV3IFNUU0NsaWVudCh7IHJlZ2lvbiB9KTtcbiAgICB0cnkge1xuICAgICAgICBjb25zdCBnZXRDYWxsZXJJZGVudGl0eUNvbW1hbmQgPSBuZXcgR2V0Q2FsbGVySWRlbnRpdHlDb21tYW5kKHt9KTtcbiAgICAgICAgY29uc3QgQWNjb3VudCA9IGF3YWl0IHN0c0NsaWVudC5zZW5kKGdldENhbGxlcklkZW50aXR5Q29tbWFuZCk7XG4gICAgICAgIHJldHVybiBBY2NvdW50LkFjY291bnQ7XG4gICAgfVxuICAgIGNhdGNoIChlcnJvcikge1xuICAgICAgICBjb25zb2xlLmVycm9yKFwiRXJyb3IgZ2V0dGluZyBhY2NvdW50IElEOlwiLCBlcnJvcik7XG4gICAgICAgIHRocm93IGVycm9yO1xuICAgIH1cbn1cbjtcbi8vIGZ1bmN0aW9uIGNoZWNraW5nIGlmIG1hbmFnZW1lbnQgYWNjb3VudCwgbWVtYmVyIGFjY291bnQsIG9yIHN0YW5kYWxvbmUgYWNjb3VudFxuZXhwb3J0IGNvbnN0IGRlZmluZUFjY291bnRUeXBlID0gYXN5bmMgKHJlZ2lvbikgPT4ge1xuICAgIGNvbnN0IG9yZ2FuaXphdGlvbnNDbGllbnQgPSBuZXcgT3JnYW5pemF0aW9uc0NsaWVudCh7IHJlZ2lvbiB9KTtcbiAgICBsZXQgaXNJbk9yZ2FuaXphdGlvbiA9IGZhbHNlO1xuICAgIGxldCBpc01hbmFnZW1lbnRBY2NvdW50ID0gZmFsc2U7XG4gICAgdHJ5IHtcbiAgICAgICAgY29uc3QgY3VycmVudEFjY291bnRJZCA9IGF3YWl0IGdldEFjY291bnRJZChyZWdpb24pO1xuICAgICAgICBpZiAoY3VycmVudEFjY291bnRJZCkge1xuICAgICAgICAgICAgY29uc3QgZGVzY3JpYmVPcmdhbml6YXRpb25Db21tYW5kID0gbmV3IERlc2NyaWJlT3JnYW5pemF0aW9uQ29tbWFuZCh7fSk7XG4gICAgICAgICAgICBjb25zdCBkZXNjcmliZU9yZ2FuaXphdGlvblJlc3BvbnNlID0gYXdhaXQgb3JnYW5pemF0aW9uc0NsaWVudC5zZW5kKGRlc2NyaWJlT3JnYW5pemF0aW9uQ29tbWFuZCk7XG4gICAgICAgICAgICAvLyB0aGUgYWNjb3VudCBpcyBub3Qgc3RhbmRhbG9uZSBhbmQgcGFydCBvZiBBV1MgT3JnYW5pemF0aW9uXG4gICAgICAgICAgICBpZiAoZGVzY3JpYmVPcmdhbml6YXRpb25SZXNwb25zZS5Pcmdhbml6YXRpb24/Lk1hc3RlckFjY291bnRJZCkge1xuICAgICAgICAgICAgICAgIGNvbnN0IG1hbmFnZW1lbnRBY2NvdW50SWQgPSBkZXNjcmliZU9yZ2FuaXphdGlvblJlc3BvbnNlLk9yZ2FuaXphdGlvbj8uTWFzdGVyQWNjb3VudElkO1xuICAgICAgICAgICAgICAgIGlmIChtYW5hZ2VtZW50QWNjb3VudElkID09IGN1cnJlbnRBY2NvdW50SWQpIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gdGhpcyBpcyBhbiBvcmdhbml6YXRpb24gYW5kIHRoaXMgaXMgdGhlIG1hbmFnZW1lbnQgYWNjb3VudFxuICAgICAgICAgICAgICAgICAgICBpc01hbmFnZW1lbnRBY2NvdW50ID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgaXNJbk9yZ2FuaXphdGlvbiA9IHRydWU7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAvLyB0aGVyZSBpcyBhbiBvcmdhbml6YXRpb24sIGJ1dCB0aGlzIGlzbid0IHRoZSBtYW5hZ2VtZW50IGFjY291bnRcbiAgICAgICAgICAgICAgICAgICAgaXNJbk9yZ2FuaXphdGlvbiA9IHRydWU7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgLy8gdGhlcmUgaXNuJ3QgYW4gb3JnYW5pemF0aW9uIGFuZCB0aGlzIGFjY291bnQgaXMgc3RhbmRhbG9uZVxuICAgICAgICAgICAgICAgIGlzSW5Pcmdhbml6YXRpb24gPSBmYWxzZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbiAgICBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgY29uc29sZS5lcnJvcihcIkVycm9yOlwiLCBlcnJvcik7XG4gICAgfVxuICAgIGZpbmFsbHkge1xuICAgICAgICBvcmdhbml6YXRpb25zQ2xpZW50LmRlc3Ryb3koKTtcbiAgICB9XG4gICAgcmV0dXJuIHsgaXNJbk9yZ2FuaXphdGlvbiwgaXNNYW5hZ2VtZW50QWNjb3VudCB9O1xufTtcbiIsImltcG9ydCB7IElBTUNsaWVudCwgTGlzdFVzZXJzQ29tbWFuZCwgTGlzdEFjY2Vzc0tleXNDb21tYW5kLCBHZXRBY2Nlc3NLZXlMYXN0VXNlZENvbW1hbmQgfSBmcm9tIFwiQGF3cy1zZGsvY2xpZW50LWlhbVwiO1xuLy8gZnVuY3Rpb24gbGlzdCBhbGwgSUFNIHVzZXJzIGFuZCBpZiB0aGV5IGhhdmUga2V5cyBpbiB0aGUgbWFuYWdlbWVudCBhY2NvdW50XG5jb25zdCBjaGVja0lhbVVzZXJzID0gYXN5bmMgKCkgPT4ge1xuICAgIC8vIFNldCB0byB1cy1lYXN0LTEgYXMgSUFNIGlzIGdsb2JhbCBhbmQgcmVnaW9uIGlzbid0IGEgY29uY2VyblxuICAgIGNvbnN0IGlhbUNsaWVudCA9IG5ldyBJQU1DbGllbnQoeyByZWdpb246ICd1cy1lYXN0LTEnIH0pO1xuICAgIGNvbnN0IGlhbVVzZXJJbmZvID0gW107XG4gICAgdHJ5IHtcbiAgICAgICAgY29uc3QgbGlzdFVzZXJzQ29tbWFuZCA9IG5ldyBMaXN0VXNlcnNDb21tYW5kKHt9KTtcbiAgICAgICAgY29uc3QgbGlzdFVzZXJzUmVzcG9uc2UgPSBhd2FpdCBpYW1DbGllbnQuc2VuZChsaXN0VXNlcnNDb21tYW5kKTtcbiAgICAgICAgZm9yIChjb25zdCB1c2VyIG9mIGxpc3RVc2Vyc1Jlc3BvbnNlLlVzZXJzIHx8IFtdKSB7XG4gICAgICAgICAgICBjb25zdCB1c2VyTmFtZSA9IHVzZXIuVXNlck5hbWUgfHwgXCJcIjtcbiAgICAgICAgICAgIGNvbnN0IGxpc3RBY2Nlc3NLZXlzQ29tbWFuZCA9IG5ldyBMaXN0QWNjZXNzS2V5c0NvbW1hbmQoe1xuICAgICAgICAgICAgICAgIFVzZXJOYW1lOiB1c2VyTmFtZSxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgY29uc3QgbGlzdEFjY2Vzc0tleXNSZXNwb25zZSA9IGF3YWl0IGlhbUNsaWVudC5zZW5kKGxpc3RBY2Nlc3NLZXlzQ29tbWFuZCk7XG4gICAgICAgICAgICBjb25zdCBhY2Nlc3NLZXlzID0gbGlzdEFjY2Vzc0tleXNSZXNwb25zZS5BY2Nlc3NLZXlNZXRhZGF0YSB8fCBbXTtcbiAgICAgICAgICAgIGlmIChhY2Nlc3NLZXlzLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgICAgICBmb3IgKGNvbnN0IGFjY2Vzc0tleSBvZiBhY2Nlc3NLZXlzKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGFjY2Vzc0tleUlkID0gYWNjZXNzS2V5LkFjY2Vzc0tleUlkIHx8IFwiXCI7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGdldExhc3RVc2VkQ29tbWFuZCA9IG5ldyBHZXRBY2Nlc3NLZXlMYXN0VXNlZENvbW1hbmQoe1xuICAgICAgICAgICAgICAgICAgICAgICAgQWNjZXNzS2V5SWQ6IGFjY2Vzc0tleUlkLFxuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgbGFzdFVzZWRSZXNwb25zZSA9IGF3YWl0IGlhbUNsaWVudC5zZW5kKGdldExhc3RVc2VkQ29tbWFuZCk7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGZvdW5kVXNlckluZm8gPSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB1c2VyTmFtZSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGFjY2Vzc0tleUlkLFxuICAgICAgICAgICAgICAgICAgICAgICAgbGFzdFVzZWQ6IGxhc3RVc2VkUmVzcG9uc2UgJiYgbGFzdFVzZWRSZXNwb25zZS5BY2Nlc3NLZXlMYXN0VXNlZFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgID8gYCR7bGFzdFVzZWRSZXNwb25zZS5BY2Nlc3NLZXlMYXN0VXNlZC5MYXN0VXNlZERhdGV9YCB8fCBcIk5vdCBhdmFpbGFibGVcIlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDogXCJOb3QgYXZhaWxhYmxlXCIsXG4gICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgICAgIGlhbVVzZXJJbmZvLnB1c2goZm91bmRVc2VySW5mbyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgY29uc3QgZm91bmRVc2VySW5mbyA9IHtcbiAgICAgICAgICAgICAgICAgICAgdXNlck5hbWVcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgIGlhbVVzZXJJbmZvLnB1c2goZm91bmRVc2VySW5mbyk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG4gICAgY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoXCJFcnJvcjpcIiwgZXJyb3IpO1xuICAgIH1cbiAgICBmaW5hbGx5IHtcbiAgICAgICAgaWFtQ2xpZW50LmRlc3Ryb3koKTtcbiAgICB9XG4gICAgcmV0dXJuIGlhbVVzZXJJbmZvO1xufTtcbmV4cG9ydCBkZWZhdWx0IGNoZWNrSWFtVXNlcnM7XG4iLCJpbXBvcnQgeyBFQzJDbGllbnQsIERlc2NyaWJlSW5zdGFuY2VzQ29tbWFuZCB9IGZyb20gXCJAYXdzLXNkay9jbGllbnQtZWMyXCI7XG5hc3luYyBmdW5jdGlvbiBjaGVja0VjMkV4aXN0cyhyZWdpb25zKSB7XG4gICAgbGV0IGVjMlZhbGlkYXRpb24gPSBbXTtcbiAgICBmb3IgKGNvbnN0IHJlZ2lvbiBvZiByZWdpb25zKSB7XG4gICAgICAgIGNvbnN0IGVjMkNsaWVudCA9IG5ldyBFQzJDbGllbnQoeyByZWdpb24gfSk7XG4gICAgICAgIGNvbnN0IGNvbW1hbmQgPSBuZXcgRGVzY3JpYmVJbnN0YW5jZXNDb21tYW5kKHt9KTtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgZWMyQ2xpZW50LnNlbmQoY29tbWFuZCk7XG4gICAgICAgICAgICBpZiAocmVzcG9uc2UuUmVzZXJ2YXRpb25zKSB7XG4gICAgICAgICAgICAgICAgaWYgKHJlc3BvbnNlLlJlc2VydmF0aW9ucy5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vY29uc29sZS5sb2coYFdBUk5JTkc6IEluc3RhbmNlKHMpIGV4aXN0cyBpbiByZWdpb246ICR7cmVnaW9ufWApO1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBlYzJGb3VuZCA9IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlZ2lvbjogcmVnaW9uLFxuICAgICAgICAgICAgICAgICAgICAgICAgZWMyRm91bmQ6IHRydWVcbiAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICAgICAgZWMyVmFsaWRhdGlvbi5wdXNoKGVjMkZvdW5kKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGVjMkZvdW5kID0ge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmVnaW9uOiByZWdpb24sXG4gICAgICAgICAgICAgICAgICAgICAgICBlYzJGb3VuZDogZmFsc2VcbiAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICAgICAgZWMyVmFsaWRhdGlvbi5wdXNoKGVjMkZvdW5kKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBjb25zdCBlYzJGb3VuZCA9IHtcbiAgICAgICAgICAgICAgICAgICAgcmVnaW9uOiByZWdpb24sXG4gICAgICAgICAgICAgICAgICAgIGVjMkZvdW5kOiBmYWxzZVxuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgZWMyVmFsaWRhdGlvbi5wdXNoKGVjMkZvdW5kKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKGBFcnJvciBjaGVja2luZyBpbnN0YW5jZTogJHtlcnJvcn1gKTtcbiAgICAgICAgfVxuICAgICAgICBmaW5hbGx5IHtcbiAgICAgICAgICAgIGVjMkNsaWVudC5kZXN0cm95KCk7XG4gICAgICAgIH1cbiAgICB9IC8vIGVuZCBmb3JcbiAgICByZXR1cm4gZWMyVmFsaWRhdGlvbjtcbn1cbjtcbmV4cG9ydCBkZWZhdWx0IGNoZWNrRWMyRXhpc3RzO1xuIiwiaW1wb3J0IHsgRUMyQ2xpZW50LCBEZXNjcmliZVZwY3NDb21tYW5kIH0gZnJvbSBcIkBhd3Mtc2RrL2NsaWVudC1lYzJcIjtcbmFzeW5jIGZ1bmN0aW9uIGNoZWNrVnBjRXhpc3RzKHJlZ2lvbnMpIHtcbiAgICBsZXQgdnBjVmFsaWRhdGlvbiA9IFtdO1xuICAgIGZvciAoY29uc3QgcmVnaW9uIG9mIHJlZ2lvbnMpIHtcbiAgICAgICAgY29uc3QgZWMyQ2xpZW50ID0gbmV3IEVDMkNsaWVudCh7IHJlZ2lvbiB9KTtcbiAgICAgICAgY29uc3QgY29tbWFuZCA9IG5ldyBEZXNjcmliZVZwY3NDb21tYW5kKHt9KTtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgZWMyQ2xpZW50LnNlbmQoY29tbWFuZCk7XG4gICAgICAgICAgICBpZiAocmVzcG9uc2UuVnBjcykge1xuICAgICAgICAgICAgICAgIGlmIChyZXNwb25zZS5WcGNzLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgdnBjRm91bmQgPSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZWdpb246IHJlZ2lvbixcbiAgICAgICAgICAgICAgICAgICAgICAgIHZwY0ZvdW5kOiB0cnVlXG4gICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgICAgIHZwY1ZhbGlkYXRpb24ucHVzaCh2cGNGb3VuZCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCB2cGNGb3VuZCA9IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlZ2lvbjogcmVnaW9uLFxuICAgICAgICAgICAgICAgICAgICAgICAgdnBjRm91bmQ6IGZhbHNlXG4gICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgICAgIHZwY1ZhbGlkYXRpb24ucHVzaCh2cGNGb3VuZCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgY29uc3QgdnBjRm91bmQgPSB7XG4gICAgICAgICAgICAgICAgICAgIHJlZ2lvbjogcmVnaW9uLFxuICAgICAgICAgICAgICAgICAgICB2cGNGb3VuZDogZmFsc2VcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgIHZwY1ZhbGlkYXRpb24ucHVzaCh2cGNGb3VuZCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgICBjb25zb2xlLmxvZyhgRXJyb3I6ICR7ZXJyb3J9YCk7XG4gICAgICAgIH1cbiAgICAgICAgZmluYWxseSB7XG4gICAgICAgICAgICBlYzJDbGllbnQuZGVzdHJveSgpO1xuICAgICAgICB9XG4gICAgfSAvLyBlbmQgZm9yXG4gICAgcmV0dXJuIHZwY1ZhbGlkYXRpb247XG59XG47XG5leHBvcnQgZGVmYXVsdCBjaGVja1ZwY0V4aXN0cztcbiIsImltcG9ydCB7IENsb3VkVHJhaWxDbGllbnQsIERlc2NyaWJlVHJhaWxzQ29tbWFuZCB9IGZyb20gJ0Bhd3Mtc2RrL2NsaWVudC1jbG91ZHRyYWlsJztcbmFzeW5jIGZ1bmN0aW9uIGNoZWNrQ2xvdWRUcmFpbEV4aXN0cyhyZWdpb25zKSB7XG4gICAgbGV0IGNsb3VkVHJhaWxWYWxpZGF0aW9uID0gW107XG4gICAgZm9yIChjb25zdCByZWdpb24gb2YgcmVnaW9ucykge1xuICAgICAgICBjb25zdCBjbG91ZFRyYWlsQ2xpZW50ID0gbmV3IENsb3VkVHJhaWxDbGllbnQoeyByZWdpb24gfSk7XG4gICAgICAgIGNvbnN0IGNsb3VkVHJhaWxEZXNjcmliZUNvbW1hbmQgPSBuZXcgRGVzY3JpYmVUcmFpbHNDb21tYW5kKHt9KTtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGNvbnN0IGNsb3VkVHJhaWxSZXNwb25zZSA9IGF3YWl0IGNsb3VkVHJhaWxDbGllbnQuc2VuZChjbG91ZFRyYWlsRGVzY3JpYmVDb21tYW5kKTtcbiAgICAgICAgICAgIGlmIChjbG91ZFRyYWlsUmVzcG9uc2UudHJhaWxMaXN0KSB7XG4gICAgICAgICAgICAgICAgZm9yIChjb25zdCB0cmFpbCBvZiBjbG91ZFRyYWlsUmVzcG9uc2UudHJhaWxMaXN0KSB7XG4gICAgICAgICAgICAgICAgICAgIGxldCB0cmFpbEluZm8gPSB7fTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRyYWlsLkhvbWVSZWdpb24gPT0gcmVnaW9uKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAvL2NvbnNvbGUubG9nKGB0cmFpbCBmb3VuZCBpbiAke3JlZ2lvbn1gKVxuICAgICAgICAgICAgICAgICAgICAgICAgdHJhaWxJbmZvID0ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlZ2lvbjogcmVnaW9uLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRyYWlsRm91bmQ6IHRydWUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaXNPcmdUcmFpbDogdHJhaWwuSXNNdWx0aVJlZ2lvblRyYWlsLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlzTXVsdGlSZWdpb246IHRyYWlsLklzTXVsdGlSZWdpb25UcmFpbFxuICAgICAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRyYWlsSW5mbyA9IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZWdpb246IHJlZ2lvbixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0cmFpbEZvdW5kOiBmYWxzZVxuICAgICAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBjbG91ZFRyYWlsVmFsaWRhdGlvbi5wdXNoKHRyYWlsSW5mbyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGNhdGNoIChlcnJvcikge1xuICAgICAgICAgICAgY29uc29sZS5sb2coYEVycm9yIGNoZWNraW5nIGluc3RhbmNlOiAke2Vycm9yfWApO1xuICAgICAgICB9XG4gICAgICAgIGZpbmFsbHkge1xuICAgICAgICAgICAgY2xvdWRUcmFpbENsaWVudC5kZXN0cm95KCk7XG4gICAgICAgIH1cbiAgICB9IC8vIGVuZCBmb3IgcmVnaW9uc1xuICAgIHJldHVybiBjbG91ZFRyYWlsVmFsaWRhdGlvbjtcbn1cbjtcbmV4cG9ydCBkZWZhdWx0IGNoZWNrQ2xvdWRUcmFpbEV4aXN0cztcbiIsImltcG9ydCB7IENvbmZpZ1NlcnZpY2VDbGllbnQsIERlc2NyaWJlQ29uZmlndXJhdGlvblJlY29yZGVyU3RhdHVzQ29tbWFuZCwgRGVzY3JpYmVEZWxpdmVyeUNoYW5uZWxzQ29tbWFuZCB9IGZyb20gJ0Bhd3Mtc2RrL2NsaWVudC1jb25maWctc2VydmljZSc7XG5hc3luYyBmdW5jdGlvbiBjaGVja0NvbmZpZ0V4aXN0cyhyZWdpb25zKSB7XG4gICAgbGV0IGNvbmZpZ0RldGFpbHMgPSBbXTtcbiAgICBmb3IgKGNvbnN0IHJlZ2lvbiBvZiByZWdpb25zKSB7XG4gICAgICAgIGNvbnN0IGNvbmZpZ1NlcnZpY2VDbGllbnQgPSBuZXcgQ29uZmlnU2VydmljZUNsaWVudCh7IHJlZ2lvbiB9KTtcbiAgICAgICAgbGV0IGNvbmZpZ0RldGFpbCA9IHtcbiAgICAgICAgICAgIHJlZ2lvbjogcmVnaW9uLFxuICAgICAgICAgICAgY29uZmlnUmVjb3JkZXJGb3VuZDogZmFsc2UsXG4gICAgICAgICAgICBjb25maWdEZWxpdmVyeUNoYW5uZWxGb3VuZDogZmFsc2VcbiAgICAgICAgfTtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIC8vIENoZWNrIGlmIENvbmZpZyByZWNvcmRlciBleGlzdHNcbiAgICAgICAgICAgIGNvbnN0IHJlY29yZGVyUmVzcG9uc2UgPSBhd2FpdCBjb25maWdTZXJ2aWNlQ2xpZW50LnNlbmQobmV3IERlc2NyaWJlQ29uZmlndXJhdGlvblJlY29yZGVyU3RhdHVzQ29tbWFuZCh7fSkpO1xuICAgICAgICAgICAgY29uc3QgcmVjb3JkZXJFeGlzdHMgPSByZWNvcmRlclJlc3BvbnNlLkNvbmZpZ3VyYXRpb25SZWNvcmRlcnNTdGF0dXM/Lmxlbmd0aCAhPT0gMDtcbiAgICAgICAgICAgIGlmIChyZWNvcmRlckV4aXN0cykge1xuICAgICAgICAgICAgICAgIGNvbmZpZ0RldGFpbC5jb25maWdSZWNvcmRlckZvdW5kID0gdHJ1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIENoZWNrIGlmIENvbmZpZyBkZWxpdmVyeSBjaGFubmVsIGV4aXN0c1xuICAgICAgICAgICAgY29uc3QgY2hhbm5lbFJlc3BvbnNlID0gYXdhaXQgY29uZmlnU2VydmljZUNsaWVudC5zZW5kKG5ldyBEZXNjcmliZURlbGl2ZXJ5Q2hhbm5lbHNDb21tYW5kKHt9KSk7XG4gICAgICAgICAgICBjb25zdCBjaGFubmVsRXhpc3RzID0gY2hhbm5lbFJlc3BvbnNlLkRlbGl2ZXJ5Q2hhbm5lbHM/Lmxlbmd0aCAhPT0gMDtcbiAgICAgICAgICAgIGlmIChjaGFubmVsRXhpc3RzKSB7XG4gICAgICAgICAgICAgICAgY29uZmlnRGV0YWlsLmNvbmZpZ0RlbGl2ZXJ5Q2hhbm5lbEZvdW5kID0gdHJ1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNvbmZpZ0RldGFpbHMucHVzaChjb25maWdEZXRhaWwpO1xuICAgICAgICB9XG4gICAgICAgIGNhdGNoIChlcnJvcikge1xuICAgICAgICAgICAgY29uc29sZS5lcnJvcihgRXJyb3IgY2hlY2tpbmcgQVdTIENvbmZpZyBpbiAke3JlZ2lvbn06YCwgZXJyb3IpO1xuICAgICAgICB9XG4gICAgICAgIGZpbmFsbHkge1xuICAgICAgICAgICAgY29uZmlnU2VydmljZUNsaWVudC5kZXN0cm95KCk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGNvbmZpZ0RldGFpbHM7XG59XG5leHBvcnQgZGVmYXVsdCBjaGVja0NvbmZpZ0V4aXN0cztcbiIsImltcG9ydCB7IE9yZ2FuaXphdGlvbnNDbGllbnQsIERlc2NyaWJlT3JnYW5pemF0aW9uQ29tbWFuZCwgTGlzdFJvb3RzQ29tbWFuZCB9IGZyb20gXCJAYXdzLXNkay9jbGllbnQtb3JnYW5pemF0aW9uc1wiO1xuYXN5bmMgZnVuY3Rpb24gZ2V0T3JnRGV0YWlscyhyZWdpb24pIHtcbiAgICBjb25zdCBvcmdDbGllbnQgPSBuZXcgT3JnYW5pemF0aW9uc0NsaWVudCh7IHJlZ2lvbiB9KTtcbiAgICBsZXQgb3JnRGV0YWlscyA9IHt9O1xuICAgIHRyeSB7XG4gICAgICAgIGNvbnN0IG9yZ0Rlc2NyaWJlQ29tbWFuZCA9IG5ldyBEZXNjcmliZU9yZ2FuaXphdGlvbkNvbW1hbmQoe30pO1xuICAgICAgICBjb25zdCBvcmdEYXRhID0gYXdhaXQgb3JnQ2xpZW50LnNlbmQob3JnRGVzY3JpYmVDb21tYW5kKTtcbiAgICAgICAgaWYgKG9yZ0RhdGEuT3JnYW5pemF0aW9uKSB7XG4gICAgICAgICAgICBvcmdEZXRhaWxzLmlkID0gb3JnRGF0YS5Pcmdhbml6YXRpb24uSWQgPz8gXCJcIjtcbiAgICAgICAgICAgIC8vIGNvbnNvbGUubG9nKGBPcmdhbml6YXRpb24gSUQ6ICR7b3JnRGV0YWlscy5pZH1gICk7XG4gICAgICAgICAgICBvcmdEZXRhaWxzLmFybiA9IG9yZ0RhdGEuT3JnYW5pemF0aW9uLkFybiA/PyBcIlwiO1xuICAgICAgICAgICAgLy8gY29uc29sZS5sb2coYE9yZ2FuaXphdGlvbiBBUk46ICR7b3JnRGV0YWlscy5hcm59YCk7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgY29tbWFuZCA9IG5ldyBMaXN0Um9vdHNDb21tYW5kKHt9KTtcbiAgICAgICAgY29uc3Qgcm9vdHMgPSBhd2FpdCBvcmdDbGllbnQuc2VuZChjb21tYW5kKTtcbiAgICAgICAgaWYgKHJvb3RzLlJvb3RzKSB7XG4gICAgICAgICAgICBvcmdEZXRhaWxzLnJvb3RPdUlkID0gcm9vdHMuUm9vdHNbMF0uSWQ7XG4gICAgICAgICAgICAvLyBjb25zb2xlLmxvZyhgQVdTIE9yZyByb290IG91IGlkOiAke29yZ0RldGFpbHMucm9vdE91SWR9YClcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKCdObyBpbmZvIGZvdW5kIGZvciB5b3VyIEFXUyBPcmdhbml6YXRpb24uJyk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoYEFuIGVycm9yIG9jY3VycmVkOiAke2Vycm9yfWApO1xuICAgIH1cbiAgICBmaW5hbGx5IHtcbiAgICAgICAgb3JnQ2xpZW50LmRlc3Ryb3koKTtcbiAgICAgICAgcmV0dXJuIG9yZ0RldGFpbHM7XG4gICAgfVxufVxuZXhwb3J0IGRlZmF1bHQgZ2V0T3JnRGV0YWlscztcbiIsImltcG9ydCB7IENvc3RBbmRVc2FnZVJlcG9ydFNlcnZpY2VDbGllbnQsIERlc2NyaWJlUmVwb3J0RGVmaW5pdGlvbnNDb21tYW5kIH0gZnJvbSBcIkBhd3Mtc2RrL2NsaWVudC1jb3N0LWFuZC11c2FnZS1yZXBvcnQtc2VydmljZVwiO1xuY29uc3QgY2hlY2tMZWdhY3lDdXIgPSBhc3luYyAocmVnaW9uKSA9PiB7XG4gICAgLy8gU2V0IHVwIEFXUyBTREsgY2xpZW50IGZvciBDb3N0IEV4cGxvcmVyXG4gICAgY29uc3QgY3VyQ2xpZW50ID0gbmV3IENvc3RBbmRVc2FnZVJlcG9ydFNlcnZpY2VDbGllbnQoeyByZWdpb24gfSk7XG4gICAgbGV0IGlzTGVnYWN5Q3VyU2V0dXAgPSBmYWxzZTtcbiAgICB0cnkge1xuICAgICAgICAvLyBDaGVjayBpZiBDb3N0IEV4cGxvcmVyIGlzIHNldCB1cFxuICAgICAgICBjb25zdCBpbnB1dCA9IHt9O1xuICAgICAgICBjb25zdCBjb21tYW5kID0gbmV3IERlc2NyaWJlUmVwb3J0RGVmaW5pdGlvbnNDb21tYW5kKGlucHV0KTtcbiAgICAgICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBjdXJDbGllbnQuc2VuZChjb21tYW5kKTtcbiAgICAgICAgaWYgKHJlc3BvbnNlLlJlcG9ydERlZmluaXRpb25zICYmIHJlc3BvbnNlLlJlcG9ydERlZmluaXRpb25zLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgIGlzTGVnYWN5Q3VyU2V0dXAgPSB0cnVlO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB7IGlzTGVnYWN5Q3VyU2V0dXAgfTtcbiAgICB9XG4gICAgY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgIC8vIENoZWNrIGlmIHRoZSBlcnJvciBpcyByZWxhdGVkIHRvIENvc3QgRXhwbG9yZXIgc2V0dXBcbiAgICAgICAgY29uc29sZS5lcnJvcihgRXJyb3I6ICR7ZXJyb3J9YCk7XG4gICAgICAgIGlzTGVnYWN5Q3VyU2V0dXAgPSBmYWxzZTtcbiAgICAgICAgcmV0dXJuIHsgaXNMZWdhY3lDdXJTZXR1cCB9O1xuICAgIH1cbiAgICBmaW5hbGx5IHtcbiAgICAgICAgLy8gQ2xvc2UgdGhlIEFXUyBTREsgY2xpZW50XG4gICAgICAgIGN1ckNsaWVudC5kZXN0cm95KCk7XG4gICAgfVxufTtcbmV4cG9ydCBkZWZhdWx0IGNoZWNrTGVnYWN5Q3VyO1xuIiwiaW1wb3J0IHsgT3JnYW5pemF0aW9uc0NsaWVudCwgTGlzdFJvb3RzQ29tbWFuZCB9IGZyb20gXCJAYXdzLXNkay9jbGllbnQtb3JnYW5pemF0aW9uc1wiO1xuYXN5bmMgZnVuY3Rpb24gZ2V0RW5hYmxlZE9yZ1BvbGljeVR5cGVzKHJlZ2lvbikge1xuICAgIGNvbnN0IG9yZ0NsaWVudCA9IG5ldyBPcmdhbml6YXRpb25zQ2xpZW50KHsgcmVnaW9uIH0pO1xuICAgIGxldCBwb2xpY3lUeXBlc0VuYWJsZWQgPSB7XG4gICAgICAgIHNjcEVuYWJsZWQ6IGZhbHNlLFxuICAgICAgICB0YWdQb2xpY3lFbmFibGVkOiBmYWxzZSxcbiAgICAgICAgYmFja3VwUG9saWN5RW5hYmxlZDogZmFsc2VcbiAgICB9O1xuICAgIHRyeSB7XG4gICAgICAgIGNvbnN0IGlucHV0ID0ge307XG4gICAgICAgIGNvbnN0IGNvbW1hbmQgPSBuZXcgTGlzdFJvb3RzQ29tbWFuZChpbnB1dCk7XG4gICAgICAgIGNvbnN0IHJvb3RzID0gYXdhaXQgb3JnQ2xpZW50LnNlbmQoY29tbWFuZCk7XG4gICAgICAgIGlmIChyb290cy5Sb290cykge1xuICAgICAgICAgICAgaWYgKHJvb3RzLlJvb3RzWzBdLlBvbGljeVR5cGVzKSB7XG4gICAgICAgICAgICAgICAgZm9yIChjb25zdCBlbmFibGVkUG9saWN5IG9mIHJvb3RzLlJvb3RzWzBdLlBvbGljeVR5cGVzKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChlbmFibGVkUG9saWN5LlR5cGUgPT0gJ1NFUlZJQ0VfQ09OVFJPTF9QT0xJQ1knICYmIGVuYWJsZWRQb2xpY3kuU3RhdHVzID09ICdFTkFCTEVEJykge1xuICAgICAgICAgICAgICAgICAgICAgICAgcG9saWN5VHlwZXNFbmFibGVkLnNjcEVuYWJsZWQgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGlmIChlbmFibGVkUG9saWN5LlR5cGUgPT0gJ1RBR19QT0xJQ1knICYmIGVuYWJsZWRQb2xpY3kuU3RhdHVzID09ICdFTkFCTEVEJykge1xuICAgICAgICAgICAgICAgICAgICAgICAgcG9saWN5VHlwZXNFbmFibGVkLnRhZ1BvbGljeUVuYWJsZWQgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGlmIChlbmFibGVkUG9saWN5LlR5cGUgPT0gJ0JBQ0tVUF9QT0xJQ1knICYmIGVuYWJsZWRQb2xpY3kuU3RhdHVzID09ICdFTkFCTEVEJykge1xuICAgICAgICAgICAgICAgICAgICAgICAgcG9saWN5VHlwZXNFbmFibGVkLmJhY2t1cFBvbGljeUVuYWJsZWQgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSAvLyBlbmQgZm9yXG4gICAgICAgICAgICB9IC8vIGVuZCBpZlxuICAgICAgICB9IC8vIGVuZCBpZlxuICAgIH1cbiAgICBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgY29uc29sZS5lcnJvcihgQW4gZXJyb3Igb2NjdXJyZWQ6ICR7ZXJyb3J9YCk7XG4gICAgfVxuICAgIGZpbmFsbHkge1xuICAgICAgICBvcmdDbGllbnQuZGVzdHJveSgpO1xuICAgICAgICByZXR1cm4gcG9saWN5VHlwZXNFbmFibGVkO1xuICAgIH1cbn1cbmV4cG9ydCBkZWZhdWx0IGdldEVuYWJsZWRPcmdQb2xpY3lUeXBlcztcbiIsImltcG9ydCB7IE9yZ2FuaXphdGlvbnNDbGllbnQsIExpc3RBV1NTZXJ2aWNlQWNjZXNzRm9yT3JnYW5pemF0aW9uQ29tbWFuZCB9IGZyb20gXCJAYXdzLXNkay9jbGllbnQtb3JnYW5pemF0aW9uc1wiO1xuYXN5bmMgZnVuY3Rpb24gZ2V0RW5hYmxlZE9yZ1NlcnZpY2VzKHJlZ2lvbikge1xuICAgIGNvbnN0IGRpc2NvdmVyZWRPcmdTZXJ2aWNlcyA9IFtdO1xuICAgIGNvbnN0IG9yZ0NsaWVudCA9IG5ldyBPcmdhbml6YXRpb25zQ2xpZW50KHsgcmVnaW9uIH0pO1xuICAgIHRyeSB7XG4gICAgICAgIGNvbnN0IG9yZ1NlcnZpY2VBY2Nlc3NDb21tYW5kID0gbmV3IExpc3RBV1NTZXJ2aWNlQWNjZXNzRm9yT3JnYW5pemF0aW9uQ29tbWFuZCh7fSk7XG4gICAgICAgIGNvbnN0IG9yZ1NlcnZpY2VBY2Nlc3NSZXNwb25zZSA9IGF3YWl0IG9yZ0NsaWVudC5zZW5kKG9yZ1NlcnZpY2VBY2Nlc3NDb21tYW5kKTtcbiAgICAgICAgaWYgKG9yZ1NlcnZpY2VBY2Nlc3NSZXNwb25zZS5FbmFibGVkU2VydmljZVByaW5jaXBhbHMgJiYgb3JnU2VydmljZUFjY2Vzc1Jlc3BvbnNlLkVuYWJsZWRTZXJ2aWNlUHJpbmNpcGFscy5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICBvcmdTZXJ2aWNlQWNjZXNzUmVzcG9uc2UuRW5hYmxlZFNlcnZpY2VQcmluY2lwYWxzO1xuICAgICAgICAgICAgZm9yIChjb25zdCBvcmdTZXJ2aWNlIG9mIG9yZ1NlcnZpY2VBY2Nlc3NSZXNwb25zZS5FbmFibGVkU2VydmljZVByaW5jaXBhbHMpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBmb3VuZE9yZ1NlcnZpY2UgPSB7IHNlcnZpY2U6IG9yZ1NlcnZpY2UuU2VydmljZVByaW5jaXBhbCA/PyBcIlwiIH07XG4gICAgICAgICAgICAgICAgZGlzY292ZXJlZE9yZ1NlcnZpY2VzLnB1c2goZm91bmRPcmdTZXJ2aWNlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbiAgICBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgY29uc29sZS5lcnJvcignRXJyb3IgY2hlY2tpbmcgc2VydmljZSBhY2Nlc3M6JywgZXJyb3IpO1xuICAgIH1cbiAgICBmaW5hbGx5IHtcbiAgICAgICAgb3JnQ2xpZW50LmRlc3Ryb3koKTtcbiAgICAgICAgcmV0dXJuIGRpc2NvdmVyZWRPcmdTZXJ2aWNlcztcbiAgICB9XG59XG47XG5leHBvcnQgZGVmYXVsdCBnZXRFbmFibGVkT3JnU2VydmljZXM7XG4iLCJpbXBvcnQgeyBDbG91ZEZvcm1hdGlvbkNsaWVudCwgRGVzY3JpYmVPcmdhbml6YXRpb25zQWNjZXNzQ29tbWFuZCwgfSBmcm9tIFwiQGF3cy1zZGsvY2xpZW50LWNsb3VkZm9ybWF0aW9uXCI7XG5hc3luYyBmdW5jdGlvbiBnZXRPcmdDbG91ZEZvcm1hdGlvbihyZWdpb24pIHtcbiAgICBsZXQgb3JnQ2ZuU3RhdHVzID0ge1xuICAgICAgICBzdGF0dXM6IFwiZGlzYWJsZWRcIlxuICAgIH07XG4gICAgY29uc3QgY2xvdWRGb3JtYXRpb25DbGllbnQgPSBuZXcgQ2xvdWRGb3JtYXRpb25DbGllbnQoeyByZWdpb24gfSk7XG4gICAgdHJ5IHtcbiAgICAgICAgY29uc3QgZGVzY3JpYmVPcmdBY2Nlc3NJbnB1dCA9IHt9O1xuICAgICAgICBjb25zdCBjb21tYW5kID0gbmV3IERlc2NyaWJlT3JnYW5pemF0aW9uc0FjY2Vzc0NvbW1hbmQoZGVzY3JpYmVPcmdBY2Nlc3NJbnB1dCk7XG4gICAgICAgIGNvbnN0IGNsb3VkRm9ybWF0aW9uT3JnQWNjZXNzID0gYXdhaXQgY2xvdWRGb3JtYXRpb25DbGllbnQuc2VuZChjb21tYW5kKTtcbiAgICAgICAgLy9jb25zb2xlLmxvZyhcIkNsb3VkRm9ybWF0aW9uIGFjdGl2YXRpb24gc3RhdHVzOiBcIiwgY2xvdWRGb3JtYXRpb25PcmdBY2Nlc3MuU3RhdHVzKVxuICAgICAgICBvcmdDZm5TdGF0dXMuc3RhdHVzID0gY2xvdWRGb3JtYXRpb25PcmdBY2Nlc3MuU3RhdHVzID8/IFwiZGlzYWJsZWRcIjtcbiAgICB9XG4gICAgY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgIGNvbnNvbGUubG9nKGBFcnJvcjogJHtlcnJvcn1gKTtcbiAgICAgICAgLy90aHJvdyBuZXcgRXJyb3IoYEVycm9yOiAke2Vycm9yfWApO1xuICAgIH1cbiAgICBmaW5hbGx5IHtcbiAgICAgICAgY2xvdWRGb3JtYXRpb25DbGllbnQuZGVzdHJveSgpO1xuICAgICAgICByZXR1cm4gb3JnQ2ZuU3RhdHVzO1xuICAgIH1cbn1cbjtcbmV4cG9ydCBkZWZhdWx0IGdldE9yZ0Nsb3VkRm9ybWF0aW9uO1xuIiwiaW1wb3J0IHsgQ29udHJvbFRvd2VyQ2xpZW50LCBMaXN0TGFuZGluZ1pvbmVzQ29tbWFuZCwgR2V0TGFuZGluZ1pvbmVDb21tYW5kIH0gZnJvbSBcIkBhd3Mtc2RrL2NsaWVudC1jb250cm9sdG93ZXJcIjtcbmFzeW5jIGZ1bmN0aW9uIGdldENvbnRyb2xUb3dlcihyZWdpb24pIHtcbiAgICBsZXQgY29udHJvbFRvd2VySW5mbyA9IHt9O1xuICAgIGNvbnN0IGNvbnRyb2xUb3dlckNsaWVudCA9IG5ldyBDb250cm9sVG93ZXJDbGllbnQoeyByZWdpb24gfSk7XG4gICAgdHJ5IHtcbiAgICAgICAgY29uc3QgY29tbWFuZCA9IG5ldyBMaXN0TGFuZGluZ1pvbmVzQ29tbWFuZCh7fSk7XG4gICAgICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgY29udHJvbFRvd2VyQ2xpZW50LnNlbmQoY29tbWFuZCk7XG4gICAgICAgIGlmIChyZXNwb25zZS5sYW5kaW5nWm9uZXMgJiYgcmVzcG9uc2UubGFuZGluZ1pvbmVzLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgIGNvbnN0IGlucHV0ID0ge1xuICAgICAgICAgICAgICAgIGxhbmRpbmdab25lSWRlbnRpZmllcjogcmVzcG9uc2UubGFuZGluZ1pvbmVzWzBdLmFybixcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBjb25zdCBselJlZ2lvbiA9IHJlc3BvbnNlLmxhbmRpbmdab25lc1swXS5hcm4/LnRvU3RyaW5nKCkuc3BsaXQoJzonKVszXSA/PyBcIlwiO1xuICAgICAgICAgICAgaWYgKGx6UmVnaW9uKSB7XG4gICAgICAgICAgICAgICAgY29udHJvbFRvd2VySW5mby5jb250cm9sVG93ZXJSZWdpb24gPSBselJlZ2lvbjtcbiAgICAgICAgICAgICAgICBjb25zdCBjb250cm9sVG93ZXJDbGllbnRSZWdpb24gPSBuZXcgQ29udHJvbFRvd2VyQ2xpZW50KHsgcmVnaW9uOiBselJlZ2lvbiB9KTtcbiAgICAgICAgICAgICAgICBjb25zdCBjb21tYW5kID0gbmV3IEdldExhbmRpbmdab25lQ29tbWFuZChpbnB1dCk7XG4gICAgICAgICAgICAgICAgY29uc3QgbHpSZXNwb25zZSA9IGF3YWl0IGNvbnRyb2xUb3dlckNsaWVudFJlZ2lvbi5zZW5kKGNvbW1hbmQpO1xuICAgICAgICAgICAgICAgIGlmIChselJlc3BvbnNlLmxhbmRpbmdab25lKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnRyb2xUb3dlckluZm8uc3RhdHVzID0gbHpSZXNwb25zZS5sYW5kaW5nWm9uZS5zdGF0dXM7XG4gICAgICAgICAgICAgICAgICAgIGNvbnRyb2xUb3dlckluZm8ubGF0ZXN0QXZhaWxhYmxlVmVyc2lvbiA9IGx6UmVzcG9uc2UubGFuZGluZ1pvbmUubGF0ZXN0QXZhaWxhYmxlVmVyc2lvbjtcbiAgICAgICAgICAgICAgICAgICAgY29udHJvbFRvd2VySW5mby5kZXBsb3llZFZlcnNpb24gPSBselJlc3BvbnNlLmxhbmRpbmdab25lLnZlcnNpb247XG4gICAgICAgICAgICAgICAgICAgIGNvbnRyb2xUb3dlckluZm8uZHJpZnRTdGF0dXMgPSBselJlc3BvbnNlLmxhbmRpbmdab25lLmRyaWZ0U3RhdHVzPy5zdGF0dXM7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICAgIGNhdGNoIChlcnJvcikge1xuICAgICAgICBjb25zb2xlLmVycm9yKGBFcnJvciBjaGVja2luZyBDb250cm9sIFRvd2VyIGluICR7cmVnaW9ufTpgLCBlcnJvcik7XG4gICAgfVxuICAgIGZpbmFsbHkge1xuICAgICAgICBjb250cm9sVG93ZXJDbGllbnQuZGVzdHJveSgpO1xuICAgIH1cbiAgICByZXR1cm4gY29udHJvbFRvd2VySW5mbztcbn1cbmV4cG9ydCBkZWZhdWx0IGdldENvbnRyb2xUb3dlcjtcbiIsImltcG9ydCB7IFNTT0FkbWluQ2xpZW50LCBMaXN0SW5zdGFuY2VzQ29tbWFuZCB9IGZyb20gXCJAYXdzLXNkay9jbGllbnQtc3NvLWFkbWluXCI7XG5hc3luYyBmdW5jdGlvbiBnZXRJZGNJbmZvKHJlZ2lvbkxpc3QpIHtcbiAgICBsZXQgaWRjRGV0YWlscyA9IHsgZm91bmQ6IGZhbHNlIH07XG4gICAgZm9yIChjb25zdCByZWdpb24gb2YgcmVnaW9uTGlzdCkge1xuICAgICAgICBjb25zdCBzc29BZG1pbkNsaWVudCA9IG5ldyBTU09BZG1pbkNsaWVudCh7IHJlZ2lvbiB9KTtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGNvbnN0IHNzb0lucHV0ID0ge1xuICAgICAgICAgICAgICAgIE1heFJlc3VsdHM6IE51bWJlcihcIjEwMFwiKVxuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIGNvbnN0IGNvbW1hbmQgPSBuZXcgTGlzdEluc3RhbmNlc0NvbW1hbmQoc3NvSW5wdXQpO1xuICAgICAgICAgICAgY29uc3Qgc3NvSW5zdGFuY2VSZXNwb25zZSA9IGF3YWl0IHNzb0FkbWluQ2xpZW50LnNlbmQoY29tbWFuZCk7XG4gICAgICAgICAgICBpZiAoc3NvSW5zdGFuY2VSZXNwb25zZS5JbnN0YW5jZXMgJiYgc3NvSW5zdGFuY2VSZXNwb25zZS5JbnN0YW5jZXMubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgICAgIGNvbnN0IHNzb0luc3RhbmNlID0gc3NvSW5zdGFuY2VSZXNwb25zZS5JbnN0YW5jZXNbMF07XG4gICAgICAgICAgICAgICAgaWRjRGV0YWlscy5mb3VuZCA9IHRydWU7XG4gICAgICAgICAgICAgICAgaWRjRGV0YWlscy5yZWdpb24gPSByZWdpb247XG4gICAgICAgICAgICAgICAgaWRjRGV0YWlscy5hcm4gPSBzc29JbnN0YW5jZS5JbnN0YW5jZUFybjtcbiAgICAgICAgICAgICAgICBpZGNEZXRhaWxzLmlkID0gc3NvSW5zdGFuY2UuSWRlbnRpdHlTdG9yZUlkO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGNhdGNoIChlcnJvcikge1xuICAgICAgICAgICAgY29uc29sZS5sb2coYEVycm9yIGxvb2tpbmcgZm9yIEFXUyBJZGVudGl0eSBDZW50ZXIgZGV0YWlscyBpbiByZWdpb24gJHtyZWdpb259YCk7XG4gICAgICAgIH1cbiAgICAgICAgZmluYWxseSB7XG4gICAgICAgICAgICBzc29BZG1pbkNsaWVudC5kZXN0cm95KCk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGlkY0RldGFpbHM7XG59XG47XG5leHBvcnQgZGVmYXVsdCBnZXRJZGNJbmZvO1xuIiwiaW1wb3J0IHsgT3JnYW5pemF0aW9uc0NsaWVudCwgTGlzdERlbGVnYXRlZEFkbWluaXN0cmF0b3JzQ29tbWFuZCwgTGlzdERlbGVnYXRlZFNlcnZpY2VzRm9yQWNjb3VudENvbW1hbmQgfSBmcm9tIFwiQGF3cy1zZGsvY2xpZW50LW9yZ2FuaXphdGlvbnNcIjtcbmFzeW5jIGZ1bmN0aW9uIGdldE9yZ0RhQWNjb3VudHMoKSB7XG4gICAgbGV0IG9yZ0RhRGV0YWlscyA9IFtdO1xuICAgIGNvbnN0IG9yZ0NsaWVudCA9IG5ldyBPcmdhbml6YXRpb25zQ2xpZW50KHsgcmVnaW9uOiAndXMtZWFzdC0xJyB9KTtcbiAgICBsZXQgb3JnRGFEZXRhaWwgPSB7fTtcbiAgICB0cnkge1xuICAgICAgICBjb25zdCBjb21tYW5kID0gbmV3IExpc3REZWxlZ2F0ZWRBZG1pbmlzdHJhdG9yc0NvbW1hbmQoe30pO1xuICAgICAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IG9yZ0NsaWVudC5zZW5kKGNvbW1hbmQpO1xuICAgICAgICBpZiAocmVzcG9uc2UuRGVsZWdhdGVkQWRtaW5pc3RyYXRvcnMpIHtcbiAgICAgICAgICAgIGZvciAoY29uc3QgZGEgb2YgcmVzcG9uc2UuRGVsZWdhdGVkQWRtaW5pc3RyYXRvcnMpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBpbnB1dCA9IHsgQWNjb3VudElkOiBkYS5JZCB9O1xuICAgICAgICAgICAgICAgIGNvbnN0IGNvbW1hbmQgPSBuZXcgTGlzdERlbGVnYXRlZFNlcnZpY2VzRm9yQWNjb3VudENvbW1hbmQoaW5wdXQpO1xuICAgICAgICAgICAgICAgIGNvbnN0IGFjY291bnRSZXNwb25zZSA9IGF3YWl0IG9yZ0NsaWVudC5zZW5kKGNvbW1hbmQpO1xuICAgICAgICAgICAgICAgIGlmIChhY2NvdW50UmVzcG9uc2UuRGVsZWdhdGVkU2VydmljZXMpIHtcbiAgICAgICAgICAgICAgICAgICAgb3JnRGFEZXRhaWwgPSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBzZXJ2aWNlczogYWNjb3VudFJlc3BvbnNlLkRlbGVnYXRlZFNlcnZpY2VzLFxuICAgICAgICAgICAgICAgICAgICAgICAgYWNjb3VudE5hbWU6IGRhLk5hbWVcbiAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICAgICAgb3JnRGFEZXRhaWxzLnB1c2gob3JnRGFEZXRhaWwpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbiAgICBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgY29uc29sZS5sb2coYEVycm9yIGxvb2tpbmcgZm9yIGRlbGVnYXRlZCBzZXJ2aWNlcy5gKTtcbiAgICB9XG4gICAgZmluYWxseSB7XG4gICAgICAgIG9yZ0NsaWVudC5kZXN0cm95KCk7XG4gICAgfVxuICAgIHJldHVybiBvcmdEYURldGFpbHM7XG59XG47XG5leHBvcnQgZGVmYXVsdCBnZXRPcmdEYUFjY291bnRzO1xuIiwiaW1wb3J0IHsgT3JnYW5pemF0aW9uc0NsaWVudCwgTGlzdEFjY291bnRzQ29tbWFuZCB9IGZyb20gJ0Bhd3Mtc2RrL2NsaWVudC1vcmdhbml6YXRpb25zJztcbmFzeW5jIGZ1bmN0aW9uIGdldE9yZ01lbWJlckFjY291bnRzKCkge1xuICAgIGxldCBvcmdNZW1iZXJBY2NvdW50SW5mbyA9IFtdO1xuICAgIGNvbnN0IG9yZ3NDbGllbnQgPSBuZXcgT3JnYW5pemF0aW9uc0NsaWVudCh7IHJlZ2lvbjogJ3VzLWVhc3QtMScgfSk7XG4gICAgY29uc3QgaW5wdXQgPSB7XG4gICAgICAgIE1heFJlc3VsdHM6IE51bWJlcihcIjIwMFwiKSxcbiAgICB9O1xuICAgIHRyeSB7XG4gICAgICAgIGxldCByZXNwb25zZSA9IGF3YWl0IG9yZ3NDbGllbnQuc2VuZChuZXcgTGlzdEFjY291bnRzQ29tbWFuZCh7fSkpO1xuICAgICAgICBpZiAocmVzcG9uc2UuQWNjb3VudHMgJiYgcmVzcG9uc2UuQWNjb3VudHMubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgZm9yIChjb25zdCBhY2NvdW50IG9mIHJlc3BvbnNlLkFjY291bnRzKSB7XG4gICAgICAgICAgICAgICAgbGV0IG9yZ01lbWJlckFjY291bnQgPSB7XG4gICAgICAgICAgICAgICAgICAgIGFjY291bnROYW1lOiBhY2NvdW50Lk5hbWUsXG4gICAgICAgICAgICAgICAgICAgIGFjY291bnRFbWFpbDogYWNjb3VudC5FbWFpbCxcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgIG9yZ01lbWJlckFjY291bnRJbmZvLnB1c2gob3JnTWVtYmVyQWNjb3VudCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBkbyB7XG4gICAgICAgICAgICAgICAgaWYgKHJlc3BvbnNlLk5leHRUb2tlbikge1xuICAgICAgICAgICAgICAgICAgICByZXNwb25zZSA9IGF3YWl0IG9yZ3NDbGllbnQuc2VuZChuZXcgTGlzdEFjY291bnRzQ29tbWFuZCh7IE5leHRUb2tlbjogcmVzcG9uc2UuTmV4dFRva2VuIH0pKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHJlc3BvbnNlLkFjY291bnRzICYmIHJlc3BvbnNlLkFjY291bnRzLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGZvciAoY29uc3QgYWNjb3VudCBvZiByZXNwb25zZS5BY2NvdW50cykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxldCBvcmdNZW1iZXJBY2NvdW50ID0ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhY2NvdW50TmFtZTogYWNjb3VudC5OYW1lLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhY2NvdW50RW1haWw6IGFjY291bnQuRW1haWwsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBvcmdNZW1iZXJBY2NvdW50SW5mby5wdXNoKG9yZ01lbWJlckFjY291bnQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSB3aGlsZSAocmVzcG9uc2UuTmV4dFRva2VuKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgY29uc29sZS5lcnJvcignRXJyb3IgbGlzdGluZyBBV1MgYWNjb3VudHM6JywgZXJyb3IpO1xuICAgIH1cbiAgICBmaW5hbGx5IHtcbiAgICAgICAgb3Jnc0NsaWVudC5kZXN0cm95KCk7XG4gICAgfVxuICAgIHJldHVybiBvcmdNZW1iZXJBY2NvdW50SW5mbztcbn1cbmV4cG9ydCBkZWZhdWx0IGdldE9yZ01lbWJlckFjY291bnRzO1xuIiwiaW1wb3J0IHsgT3JnYW5pemF0aW9uc0NsaWVudCwgTGlzdE9yZ2FuaXphdGlvbmFsVW5pdHNGb3JQYXJlbnRDb21tYW5kLCBMaXN0QWNjb3VudHNGb3JQYXJlbnRDb21tYW5kIH0gZnJvbSBcIkBhd3Mtc2RrL2NsaWVudC1vcmdhbml6YXRpb25zXCI7XG5hc3luYyBmdW5jdGlvbiBnZXRPcmdUb3BMZXZlbE91cyhyZWdpb24sIHJvb3RPdUlkKSB7XG4gICAgY29uc3Qgb3JnQ2xpZW50ID0gbmV3IE9yZ2FuaXphdGlvbnNDbGllbnQoeyByZWdpb24gfSk7XG4gICAgbGV0IHRvcExldmVsT3VzID0gW107XG4gICAgdHJ5IHtcbiAgICAgICAgY29uc3QgbGlzdE9Vc0NvbW1hbmQgPSBuZXcgTGlzdE9yZ2FuaXphdGlvbmFsVW5pdHNGb3JQYXJlbnRDb21tYW5kKHtcbiAgICAgICAgICAgIFBhcmVudElkOiByb290T3VJZCxcbiAgICAgICAgfSk7XG4gICAgICAgIGNvbnN0IGxpc3RPVXNSZXNwb25zZSA9IGF3YWl0IG9yZ0NsaWVudC5zZW5kKGxpc3RPVXNDb21tYW5kKTtcbiAgICAgICAgaWYgKGxpc3RPVXNSZXNwb25zZS5Pcmdhbml6YXRpb25hbFVuaXRzKSB7XG4gICAgICAgICAgICBmb3IgKGNvbnN0IG91IG9mIGxpc3RPVXNSZXNwb25zZS5Pcmdhbml6YXRpb25hbFVuaXRzKSB7XG4gICAgICAgICAgICAgICAgbGV0IHRvcExldmVsT3UgPSB7XG4gICAgICAgICAgICAgICAgICAgIGlkOiBvdS5JZCxcbiAgICAgICAgICAgICAgICAgICAgbmFtZTogb3UuTmFtZVxuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgY29uc3QgYWNjb3VudFJlc3BvbnNlID0gYXdhaXQgb3JnQ2xpZW50LnNlbmQobmV3IExpc3RBY2NvdW50c0ZvclBhcmVudENvbW1hbmQoeyBQYXJlbnRJZDogb3UuSWQgfSkpO1xuICAgICAgICAgICAgICAgIGlmIChhY2NvdW50UmVzcG9uc2UuQWNjb3VudHMgJiYgYWNjb3VudFJlc3BvbnNlLkFjY291bnRzLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgICAgICAgICAgdG9wTGV2ZWxPdS5hY2NvdW50cyA9IGFjY291bnRSZXNwb25zZS5BY2NvdW50cztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgdG9wTGV2ZWxPdXMucHVzaCh0b3BMZXZlbE91KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbiAgICBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgY29uc29sZS5lcnJvcignRXJyb3IgY2hlY2tpbmcgc2VydmljZSBhY2Nlc3M6JywgZXJyb3IpO1xuICAgICAgICByZXR1cm4gW107XG4gICAgfVxuICAgIGZpbmFsbHkge1xuICAgICAgICBvcmdDbGllbnQuZGVzdHJveSgpO1xuICAgIH1cbiAgICByZXR1cm4gdG9wTGV2ZWxPdXM7XG59XG47XG5leHBvcnQgZGVmYXVsdCBnZXRPcmdUb3BMZXZlbE91cztcbiIsImltcG9ydCAqIGFzIGZzIGZyb20gJ2ZzJztcbmFzeW5jIGZ1bmN0aW9uIGNyZWF0ZUFzYW5hSW1wb3J0KHRhc2tzKSB7XG4gICAgbGV0IGNzdiA9ICdcIlRhc2tcIiwgXCJTdGF0dXNcIiBcXHJcXG4nO1xuICAgIGNvbnN0IHVuaXF1ZURldGFpbHMgPSBuZXcgU2V0KCk7XG4gICAgLy8gY3JlYXRlIGEgbGlzdCBvZiB1bmlxdWUgdGFzayBkZXRhaWxzXG4gICAgZm9yIChjb25zdCB0YXNrIG9mIHRhc2tzKSB7XG4gICAgICAgIGNvbnN0IGRldGFpbCA9IHRhc2suZGV0YWlsID8/IFwiVU5ERUZJTkVEXCI7XG4gICAgICAgIGlmIChkZXRhaWwgIT09IFwiVU5ERUZJTkVEXCIpIHtcbiAgICAgICAgICAgIHVuaXF1ZURldGFpbHMuYWRkKGRldGFpbCk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgY29uc3QgYXJyYXlEZXRhaWxzID0gQXJyYXkuZnJvbSh1bmlxdWVEZXRhaWxzKTtcbiAgICBmb3IgKGNvbnN0IGl0ZW0gb2YgYXJyYXlEZXRhaWxzKSB7XG4gICAgICAgIGNzdiArPSBgXCJjZmF0IC0gJHtpdGVtfVwiLCBcIk5vdCBTdGFydGVkXCIgXFxyXFxuYDtcbiAgICB9XG4gICAgZnMud3JpdGVGaWxlU3luYygnLi9hc2FuYS1pbXBvcnQuY3N2JywgY3N2KTtcbiAgICByZXR1cm47XG59XG5leHBvcnQgZGVmYXVsdCBjcmVhdGVBc2FuYUltcG9ydDtcbiIsImltcG9ydCBmcyBmcm9tICdmcyc7XG5pbXBvcnQgcGF0aCBmcm9tICdwYXRoJztcbmltcG9ydCBhcmNoaXZlciBmcm9tICdhcmNoaXZlcic7XG5hc3luYyBmdW5jdGlvbiB6aXBBc3Nlc3NtZW50RmlsZXMoKSB7XG4gICAgdHJ5IHtcbiAgICAgICAgY29uc3Qgb3V0cHV0ID0gZnMuY3JlYXRlV3JpdGVTdHJlYW0ocGF0aC5qb2luKHByb2Nlc3MuY3dkKCksICdhc3Nlc3NtZW50LnppcCcpKTtcbiAgICAgICAgY29uc3QgYXJjaGl2ZSA9IGFyY2hpdmVyKCd6aXAnLCB7XG4gICAgICAgICAgICB6bGliOiB7IGxldmVsOiA5IH0sIC8vIFNldHMgdGhlIGNvbXByZXNzaW9uIGxldmVsLlxuICAgICAgICB9KTtcbiAgICAgICAgYXJjaGl2ZS5waXBlKG91dHB1dCk7XG4gICAgICAgIC8vIEFkZCB0aGUgZmlsZXMgdG8gdGhlIGFyY2hpdmVcbiAgICAgICAgYXJjaGl2ZS5maWxlKHBhdGguam9pbihwcm9jZXNzLmN3ZCgpLCAnY2ZhdC50eHQnKSwgeyBuYW1lOiAnY2ZhdC50eHQnIH0pO1xuICAgICAgICBhcmNoaXZlLmZpbGUocGF0aC5qb2luKHByb2Nlc3MuY3dkKCksICdjZmF0LWNoZWNrcy5jc3YnKSwgeyBuYW1lOiAnY2ZhdC1jaGVja3MuY3N2JyB9KTtcbiAgICAgICAgYXJjaGl2ZS5maWxlKHBhdGguam9pbihwcm9jZXNzLmN3ZCgpLCAnYXNhbmEtaW1wb3J0LmNzdicpLCB7IG5hbWU6ICdhc2FuYS1pbXBvcnQuY3N2JyB9KTtcbiAgICAgICAgYXJjaGl2ZS5maWxlKHBhdGguam9pbihwcm9jZXNzLmN3ZCgpLCAnamlyYS1pbXBvcnQuY3N2JyksIHsgbmFtZTogJ2ppcmEtaW1wb3J0LmNzdicgfSk7XG4gICAgICAgIGFyY2hpdmUuZmluYWxpemUoKTtcbiAgICAgICAgY29uc29sZS5sb2coJ1ppcCBmaWxlIGNyZWF0ZWQgc3VjY2Vzc2Z1bGx5IScpO1xuICAgIH1cbiAgICBjYXRjaCAoZXJyKSB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoJ0Vycm9yIGNyZWF0aW5nIHppcCBmaWxlOicsIGVycik7XG4gICAgfVxufVxuZXhwb3J0IGRlZmF1bHQgemlwQXNzZXNzbWVudEZpbGVzO1xuIl0sIm5hbWVzIjpbInJlcXVpcmUiLCJ0cyIsIlRyYW5zZm9ybSIsInRyYW5zZm9ybSIsImNodW5rIiwiZW5jIiwiY2IiLCJsb2dnZXIiLCJDb25zb2xlIiwic3Rkb3V0IiwiYXN5bmMiLCJ0YXNrcyIsImNzdiIsInRhc2siLCJjYXRlZ29yeSIsInRpdGxlIiwiZGV0YWlsIiwicmVwb3J0IiwiY2ZhdENoZWNrcyIsInJlZ2lvbiIsInByb2Nlc3MiLCJlbnYiLCJBV1NfUkVHSU9OIiwiYWxsUmVnaW9ucyIsImVjMkNsaWVudCIsIkVDMkNsaWVudCIsImRlc2NyaWJlUmVnaW9uc0NvbW1hbmQiLCJEZXNjcmliZVJlZ2lvbnNDb21tYW5kIiwicmVzcG9uc2UiLCJzZW5kIiwicmVnaW9ucyIsIlJlZ2lvbnMiLCJwdXNoIiwiUmVnaW9uTmFtZSIsImVycm9yIiwiY29uc29sZSIsImRlc3Ryb3kiLCJsb2ciLCJhY2NvdW50VHlwZSIsIm9yZ2FuaXphdGlvbnNDbGllbnQiLCJPcmdhbml6YXRpb25zQ2xpZW50IiwiaXNJbk9yZ2FuaXphdGlvbiIsImlzTWFuYWdlbWVudEFjY291bnQiLCJjdXJyZW50QWNjb3VudElkIiwic3RzQ2xpZW50IiwiU1RTQ2xpZW50IiwiZ2V0Q2FsbGVySWRlbnRpdHlDb21tYW5kIiwiR2V0Q2FsbGVySWRlbnRpdHlDb21tYW5kIiwiQWNjb3VudCIsImdldEFjY291bnRJZCIsImRlc2NyaWJlT3JnYW5pemF0aW9uQ29tbWFuZCIsIkRlc2NyaWJlT3JnYW5pemF0aW9uQ29tbWFuZCIsImRlc2NyaWJlT3JnYW5pemF0aW9uUmVzcG9uc2UiLCJPcmdhbml6YXRpb24iLCJNYXN0ZXJBY2NvdW50SWQiLCJtYW5hZ2VtZW50QWNjb3VudElkIiwiZGVmaW5lQWNjb3VudFR5cGUiLCJ0cmFuc2l0aW9uYWxGb3VuZCIsInN1c3BlbmRlZEZvdW5kIiwiaW5mcmFzdHJ1Y3R1cmVGb3VuZCIsIndvcmtsb2Fkc0ZvdW5kIiwic2VjdXJpdHlGb3VuZCIsImNmYXRJYW1Vc2VyUGFzcyIsImNmYXRJYW1JZFBPcmdTZXJ2aWNlUGFzcyIsImNmYXRJYW1JZGNDb25maWd1cmVkUGFzcyIsImNmYXRDbG91ZFRyYWlsUGFzcyIsImNmYXRDbG91ZFRyYWlsT3JnVHJhaWxQYXNzIiwiY2ZhdFZwY1Bhc3MiLCJjZmF0RWMyUGFzcyIsImNmYXRDb25maWdNYW5hZ2VtZW50QWNjb3VudFBhc3MiLCJjZmF0Q29uZmlnUmVjb3JkZXJNYW5hZ2VtZW50QWNjb3VudFBhc3MiLCJjZmF0Q2xvdWRUcmFpbE9yZ1NlcnZpY2VFbmFibGVkUGFzcyIsImNmYXRUYWdQb2xpY2llc0VuYWJsZWRQYXNzIiwiY2ZhdFNjcEVuYWJsZWRQYXNzIiwiY2ZhdEJhY2t1cFBvbGljaWVzRW5hYmxlZFBhc3MiLCJjZmF0T3JnQ2xvdWRGb3JtYXRpb25TdGF0dXNQYXNzIiwiY2ZhdE9yZ1NlcnZpY2VHdWFyZER1dHlFbmFibGVkUGFzcyIsImNmYXRPcmdTZXJ2aWNlU2VjdXJpdHlIdWJFbmFibGVkUGFzcyIsImNmYXRPcmdTZXJ2aWNlSWFtQWNjZXNzQW5hbHl6ZXJFbmFibGVkUGFzcyIsImNmYXRPcmdTZXJ2aWNlQXdzQ29uZmlnRW5hYmxlZFBhc3MiLCJjZmF0T3JnU2VydmljZVJhbUVuYWJsZWRQYXNzIiwiY2ZhdENvbnRyb2xUb3dlckRlcGxveWVkUGFzcyIsImNmYXRDb250cm9sVG93ZXJOb3REcmlmdGVkUGFzcyIsImNmYXRDb250cm9sVG93ZXJMYXRlc3RWZXJzaW9uUGFzcyIsImNmYXRMb2dBcmNoaXZlQWNjb3VudFBhc3MiLCJjZmF0QXVkaXRBY2NvdW50UGFzcyIsImNmYXRNYW5hZ2VtZW50QWNjb3VudFBhc3MiLCJjZmF0T3JnU2VydmljZUJhY2t1cEVuYWJsZWRQYXNzIiwib3JnYW5pemF0aW9uRGVwbG95IiwibWFuYWdlbWVudEFjY291bnQiLCJ1bmRlZmluZWQiLCJpYW1Vc2VyUmVzdWx0IiwiaWFtQ2xpZW50IiwiSUFNQ2xpZW50IiwiaWFtVXNlckluZm8iLCJsaXN0VXNlcnNDb21tYW5kIiwiTGlzdFVzZXJzQ29tbWFuZCIsImxpc3RVc2Vyc1Jlc3BvbnNlIiwidXNlciIsIlVzZXJzIiwidXNlck5hbWUiLCJVc2VyTmFtZSIsImxpc3RBY2Nlc3NLZXlzQ29tbWFuZCIsIkxpc3RBY2Nlc3NLZXlzQ29tbWFuZCIsImFjY2Vzc0tleXMiLCJBY2Nlc3NLZXlNZXRhZGF0YSIsImxlbmd0aCIsImFjY2Vzc0tleSIsImFjY2Vzc0tleUlkIiwiQWNjZXNzS2V5SWQiLCJnZXRMYXN0VXNlZENvbW1hbmQiLCJHZXRBY2Nlc3NLZXlMYXN0VXNlZENvbW1hbmQiLCJsYXN0VXNlZFJlc3BvbnNlIiwiZm91bmRVc2VySW5mbyIsImxhc3RVc2VkIiwiQWNjZXNzS2V5TGFzdFVzZWQiLCJMYXN0VXNlZERhdGUiLCJpYW1Vc2VyQ2hlY2tzIiwiZWMyQ2hlY2siLCJlYzJWYWxpZGF0aW9uIiwiY29tbWFuZCIsIkRlc2NyaWJlSW5zdGFuY2VzQ29tbWFuZCIsIlJlc2VydmF0aW9ucyIsImVjMkZvdW5kIiwiZmluZCIsInBhcmFtIiwiZWMyQ2hlY2tzIiwiaW5mbyIsImVjMiIsInZwY0NoZWNrIiwidnBjVmFsaWRhdGlvbiIsIkRlc2NyaWJlVnBjc0NvbW1hbmQiLCJWcGNzIiwidnBjRm91bmQiLCJ2cGNDaGVja3MiLCJjbG91ZFRyYWlsRGV0YWlscyIsImNsb3VkVHJhaWxWYWxpZGF0aW9uIiwiY2xvdWRUcmFpbENsaWVudCIsIkNsb3VkVHJhaWxDbGllbnQiLCJjbG91ZFRyYWlsRGVzY3JpYmVDb21tYW5kIiwiRGVzY3JpYmVUcmFpbHNDb21tYW5kIiwiY2xvdWRUcmFpbFJlc3BvbnNlIiwidHJhaWxMaXN0IiwidHJhaWwiLCJ0cmFpbEluZm8iLCJIb21lUmVnaW9uIiwidHJhaWxGb3VuZCIsImlzT3JnVHJhaWwiLCJJc011bHRpUmVnaW9uVHJhaWwiLCJpc011bHRpUmVnaW9uIiwiY29uZmlnRGV0YWlscyIsImNvbmZpZ1NlcnZpY2VDbGllbnQiLCJDb25maWdTZXJ2aWNlQ2xpZW50IiwiY29uZmlnRGV0YWlsIiwiY29uZmlnUmVjb3JkZXJGb3VuZCIsImNvbmZpZ0RlbGl2ZXJ5Q2hhbm5lbEZvdW5kIiwicmVjb3JkZXJSZXNwb25zZSIsIkRlc2NyaWJlQ29uZmlndXJhdGlvblJlY29yZGVyU3RhdHVzQ29tbWFuZCIsIkNvbmZpZ3VyYXRpb25SZWNvcmRlcnNTdGF0dXMiLCJjaGFubmVsUmVzcG9uc2UiLCJEZXNjcmliZURlbGl2ZXJ5Q2hhbm5lbHNDb21tYW5kIiwiRGVsaXZlcnlDaGFubmVscyIsImNvbmZpZ0ZpbmQiLCJvcmdEZXRhaWxzIiwib3JnQ2xpZW50Iiwib3JnRGVzY3JpYmVDb21tYW5kIiwib3JnRGF0YSIsImlkIiwiSWQiLCJhcm4iLCJBcm4iLCJMaXN0Um9vdHNDb21tYW5kIiwicm9vdHMiLCJSb290cyIsInJvb3RPdUlkIiwibGVnYWN5Q3VyQ2hlY2siLCJjdXJDbGllbnQiLCJDb3N0QW5kVXNhZ2VSZXBvcnRTZXJ2aWNlQ2xpZW50IiwiaXNMZWdhY3lDdXJTZXR1cCIsImlucHV0IiwiRGVzY3JpYmVSZXBvcnREZWZpbml0aW9uc0NvbW1hbmQiLCJSZXBvcnREZWZpbml0aW9ucyIsImVuYWJsZU9yZ1BvbGljaWVzQ2hlY2siLCJwb2xpY3lUeXBlc0VuYWJsZWQiLCJzY3BFbmFibGVkIiwidGFnUG9saWN5RW5hYmxlZCIsImJhY2t1cFBvbGljeUVuYWJsZWQiLCJQb2xpY3lUeXBlcyIsImVuYWJsZWRQb2xpY3kiLCJUeXBlIiwiU3RhdHVzIiwib3JnU2VydmljZXMiLCJkaXNjb3ZlcmVkT3JnU2VydmljZXMiLCJvcmdTZXJ2aWNlQWNjZXNzQ29tbWFuZCIsIkxpc3RBV1NTZXJ2aWNlQWNjZXNzRm9yT3JnYW5pemF0aW9uQ29tbWFuZCIsIm9yZ1NlcnZpY2VBY2Nlc3NSZXNwb25zZSIsIkVuYWJsZWRTZXJ2aWNlUHJpbmNpcGFscyIsIm9yZ1NlcnZpY2UiLCJmb3VuZE9yZ1NlcnZpY2UiLCJzZXJ2aWNlIiwiU2VydmljZVByaW5jaXBhbCIsImNmbk9yZ1N0YXR1cyIsIm9yZ0NmblN0YXR1cyIsInN0YXR1cyIsImNsb3VkRm9ybWF0aW9uQ2xpZW50IiwiQ2xvdWRGb3JtYXRpb25DbGllbnQiLCJkZXNjcmliZU9yZ0FjY2Vzc0lucHV0IiwiRGVzY3JpYmVPcmdhbml6YXRpb25zQWNjZXNzQ29tbWFuZCIsImNsb3VkRm9ybWF0aW9uT3JnQWNjZXNzIiwiY29udHJvbFRvd2VyRGV0YWlscyIsImNvbnRyb2xUb3dlckluZm8iLCJjb250cm9sVG93ZXJDbGllbnQiLCJDb250cm9sVG93ZXJDbGllbnQiLCJMaXN0TGFuZGluZ1pvbmVzQ29tbWFuZCIsImxhbmRpbmdab25lcyIsImxhbmRpbmdab25lSWRlbnRpZmllciIsImx6UmVnaW9uIiwidG9TdHJpbmciLCJzcGxpdCIsImNvbnRyb2xUb3dlclJlZ2lvbiIsImNvbnRyb2xUb3dlckNsaWVudFJlZ2lvbiIsIkdldExhbmRpbmdab25lQ29tbWFuZCIsImx6UmVzcG9uc2UiLCJsYW5kaW5nWm9uZSIsImxhdGVzdEF2YWlsYWJsZVZlcnNpb24iLCJkZXBsb3llZFZlcnNpb24iLCJ2ZXJzaW9uIiwiZHJpZnRTdGF0dXMiLCJpZGNJbmZvIiwicmVnaW9uTGlzdCIsImlkY0RldGFpbHMiLCJmb3VuZCIsInNzb0FkbWluQ2xpZW50IiwiU1NPQWRtaW5DbGllbnQiLCJzc29JbnB1dCIsIk1heFJlc3VsdHMiLCJOdW1iZXIiLCJMaXN0SW5zdGFuY2VzQ29tbWFuZCIsInNzb0luc3RhbmNlUmVzcG9uc2UiLCJJbnN0YW5jZXMiLCJzc29JbnN0YW5jZSIsIkluc3RhbmNlQXJuIiwiSWRlbnRpdHlTdG9yZUlkIiwib3JnRGVsZWdhdGVkQWRtaW5BY2NvdW50cyIsIm9yZ0RhRGV0YWlscyIsIm9yZ0RhRGV0YWlsIiwiTGlzdERlbGVnYXRlZEFkbWluaXN0cmF0b3JzQ29tbWFuZCIsIkRlbGVnYXRlZEFkbWluaXN0cmF0b3JzIiwiZGEiLCJBY2NvdW50SWQiLCJMaXN0RGVsZWdhdGVkU2VydmljZXNGb3JBY2NvdW50Q29tbWFuZCIsImFjY291bnRSZXNwb25zZSIsIkRlbGVnYXRlZFNlcnZpY2VzIiwic2VydmljZXMiLCJhY2NvdW50TmFtZSIsIk5hbWUiLCJvcmdNZW1iZXJBY2NvdW50cyIsIm9yZ01lbWJlckFjY291bnRJbmZvIiwib3Jnc0NsaWVudCIsIkxpc3RBY2NvdW50c0NvbW1hbmQiLCJBY2NvdW50cyIsImFjY291bnQiLCJvcmdNZW1iZXJBY2NvdW50IiwiYWNjb3VudEVtYWlsIiwiRW1haWwiLCJOZXh0VG9rZW4iLCJvcmdBcm4iLCJvcmdJZCIsIm9yZ1Jvb3RPdUlkIiwib3JnQ2xvdWRGb3JtYXRpb25TdGF0dXMiLCJjb250cm9sVG93ZXJEZXBsb3llZFZlcnNpb24iLCJjb250cm9sVG93ZXJEcmlmdFN0YXR1cyIsImNvbnRyb2xUb3dlckxhdGVzdEF2YWlsYWJsZVZlcnNpb24iLCJjb250cm9sVG93ZXJTdGF0dXMiLCJjdEZpbmQiLCJvcmdPdUluZm8iLCJ0b3BMZXZlbE91cyIsImxpc3RPVXNDb21tYW5kIiwiTGlzdE9yZ2FuaXphdGlvbmFsVW5pdHNGb3JQYXJlbnRDb21tYW5kIiwiUGFyZW50SWQiLCJsaXN0T1VzUmVzcG9uc2UiLCJPcmdhbml6YXRpb25hbFVuaXRzIiwib3UiLCJ0b3BMZXZlbE91IiwibmFtZSIsIkxpc3RBY2NvdW50c0ZvclBhcmVudENvbW1hbmQiLCJhY2NvdW50cyIsInRvTG93ZXJDYXNlIiwibWVtYmVyQWNjb3VudCIsImlkZW50aXR5RGVsZWdhdGVkIiwic2VjdXJpdHlIdWJEZWxlZ2F0ZWQiLCJndWFyZER1dHlEZWxlZ2F0ZWQiLCJjb25maWdEZWxlZ2F0ZWQiLCJpYW1BY2Nlc3NBbmFseXplckRlbGVnYXRlZCIsInMzU3RvcmFnZUxlbnNEZWxlZ2F0ZWQiLCJpcGFtRGVsZWdhdGVkIiwiYWNjb3VudERlbGVnYXRlZCIsImJhY2t1cERlbGVnYXRlZCIsInNydiIsIm1lc3NhZ2UiLCJ3YXJuIiwiT3JnQ2hlY2siLCJjaGVjayIsImRlc2NyaXB0aW9uIiwicmVxdWlyZWQiLCJ3ZWlnaHQiLCJsb2UiLCJyZW1lZGlhdGlvbkxpbmsiLCJNQUNoZWNrIiwiY2ZhdElhbVVzZXJDaGVjayIsImNmYXRFYzJDaGVjayIsImNmYXRWcGNDaGVjayIsImNmYXRDbG91ZFRyYWlsQ2hlY2siLCJjZmF0Q2xvdWRUcmFpbE9yZ1NlcnZpY2VFbmFibGVkQ2hlY2siLCJjZmF0Q2xvdWRUcmFpbE9yZ1RyYWlsQ2hlY2siLCJjZmF0Q29uZmlnTWFuYWdlbWVudEFjY291bnRDaGVjayIsImNmYXRDb25maWdSZWNvcmRlck1hbmFnZW1lbnRBY2NvdW50Q2hlY2siLCJjZmF0T3JnU2VydmljZUd1YXJkRHV0eUNoZWNrIiwiY2ZhdE9yZ1NlcnZpY2VSYW1DaGVjayIsImNmYXRPcmdTZXJ2aWNlU2VjdXJpdHlIdWJDaGVjayIsImNmYXRPcmdTZXJ2aWNlSWFtQWNjZXNzQW5hbHl6ZXJDaGVjayIsImNmYXRPcmdTZXJ2aWNlQ29uZmlnQ2hlY2siLCJjZmF0T3JnU2VydmljZUNsb3VkRm9ybWF0aW9uQ2hlY2siLCJjZmF0SW5mcmFPdUNoZWNrIiwiY2ZhdFNlY3VyaXR5T3VDaGVjayIsImNmYXRXb3JrbG9hZE91Q2hlY2siLCJjZmF0SWFtSWRDT3JnU2VydmljZUNoZWNrIiwiY2ZhdElhbUlkY0NvbmZpZ3VyZWRDaGVjayIsImNmYXRPcmdQb2xpY3lTY3BFbmFibGVkIiwiY2ZhdE9yZ1BvbGljeVRhZ1BvbGljeUNoZWNrIiwiY2ZhdEJhY2t1cFBvbGljaWVzRW5hYmxlZENoZWNrIiwiY2ZhdENvbnRyb2xUb3dlckRlcGxveWVkQ2hlY2siLCJjZmF0Q29udHJvbFRvd2VyTGF0ZXN0VmVyc2lvbkNoZWNrIiwiY2ZhdENvbnRyb2xUb3dlck5vdERyaWZ0ZWRDaGVjayIsImNmYXRMb2dBcmNoaXZlQWNjb3VudENoZWNrIiwiY2ZhdEF1ZGl0QWNjb3VudENoZWNrIiwidGFibGUiLCJvYmplY3RBcnJheUNTViIsImRhdGEiLCJkYXRhQXJyYXkiLCJBcnJheSIsImlzQXJyYXkiLCJrZXlzIiwiT2JqZWN0Iiwicm93cyIsImpvaW4iLCJvYmoiLCJ2YWx1ZXMiLCJtYXAiLCJrZXkiLCJ2YWx1ZSIsInJlcGxhY2UiLCJvYmplY3RUb0NTViIsImFzc2Vzc21lbnQiLCJEYXRlIiwidG9VVENTdHJpbmciLCJzY29yZSIsInRvdGFsUmVxdWlyZWRMb2UiLCJ0b3RhbFNjb3JlIiwiY2ZhdFN0YXR1cyIsInJlYWQiLCJpYW1Vc2VyIiwidnBjRmluZCIsIm1hQ2F0ZWdvcnkiLCJpYW1UYXNrIiwiaWFtQXBpVGFzayIsImVjMlRhc2siLCJ2cGNUYXNrIiwiZ292Q2F0ZWdvcnkiLCJjdE9yZ1NlcnZpY2VUYXNrIiwiY29uZmlnT3JnU2VydmljZVRhc2siLCJzY3BFbmFibGVkVGFzayIsInRhZ1BvbGljeUVuYWJsZWRUYXNrIiwiYmFja3VwUG9saWN5RW5hYmxlZFRhc2siLCJsZWdhY3lDdXJTZXR1cFRhc2siLCJtYXNDYXRlZ29yeSIsInRyYW5zaXRpb25hbFRhc2siLCJzdXNwZW5kZWRUYXNrIiwid29ya2xvYWRzVGFzayIsInNlY3VyaXR5VGFzayIsImluZnJhc3RydWN0dXJlVGFzayIsImx6V2F5cG9pbnQiLCJkZXBsb3lDb250cm9sVG93ZXJUYXNrIiwiZml4THpEcmlmdFRhc2siLCJ1cGRhdGVDb250cm9sVG93ZXJUYXNrIiwib3JnU2VydmljZUNmbkVuYWJsZVRhc2siLCJzc29DYXRlZ29yeSIsInNzb1Rhc2siLCJpZGVudGl0eURlbGVnYXRlZFRhc2siLCJzZWNDYXRlZ29yeSIsInRhc2tHdWFyZER1dHlEZWxlZ2F0ZWQiLCJ0YXNrU2VjdXJpdHlIdWJEZWxlZ2F0ZWQiLCJ0YXNrSWFtQWNjZXNzQW5hbHl6ZXJEZWxlZ2F0ZWQiLCJ0YXNrQ2xvdWRUcmFpbERlbGVnYXRlZCIsInRhc2tDb25maWdEZWxlZ2F0ZWQiLCJ0YXNrUzNTdG9yYWdlTGVuc0RlbGVnYXRlZCIsIm5ldHdvcmtDYXRlZ29yeSIsIm9yZ1NlcnZpY2VJcGFtVGFzayIsIm9yZ1NlcnZpY2VSYW1UYXNrIiwidGFza0lwYW1EZWxlZ2F0ZWQiLCJ0YXNrU2NwRGVsZWdhdGVkIiwib2JDYXRlZ29yeSIsIm9yZ1NlcnZpY2VBY2NvdW50VGFzayIsInRhc2tBY2NvdW50RGVsZWdhdGVkIiwiYmFja3VwV2F5cG9pbnQiLCJvcmdTZXJ2aWNlQmFja3VwVGFzayIsInRhc2tCYWNrdXBEZWxlZ2F0ZWQiLCJlbmFibGVQb2xpY3lUeXBlVGFzayIsInVuaXF1ZURldGFpbHMiLCJTZXQiLCJhZGQiLCJhcnJheURldGFpbHMiLCJmcm9tIiwiaXRlbSIsIm91dHB1dCIsImN3ZCIsImFyY2hpdmUiLCJ6bGliIiwibGV2ZWwiLCJwaXBlIiwiZmlsZSIsImZpbmFsaXplIiwiZXJyIiwibWFpbiJdLCJzb3VyY2VSb290IjoiIn0=