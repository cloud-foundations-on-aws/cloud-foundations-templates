(()=>{"use strict";const e=require("@aws-sdk/client-sts"),t=require("@aws-sdk/client-organizations"),n=require("@aws-sdk/client-iam"),o=require("@aws-sdk/client-cloudformation"),i=require("@aws-sdk/client-sso-admin"),a=require("@aws-sdk/client-ec2"),s=require("@aws-sdk/client-cloudtrail"),r=require("@aws-sdk/client-config-service"),c=require("@aws-sdk/client-controltower"),l=require("@aws-sdk/client-cost-and-usage-report-service"),d=require("node:console"),u=require("node:stream"),g=require("fs"),m=new u.Transform({transform(e,t,n){n(null,e)}}),p=new d.Console({stdout:m}),h=require("path"),f=require("archiver");(async()=>{let d={},u=[];const A=process.env.AWS_REGION||"us-east-1",S=await async function(){const e=new a.EC2Client({region:"us-east-1"});try{const t=new a.DescribeRegionsCommand({}),n=await e.send(t),o=[];for(const e of n.Regions||[])o.push(e.RegionName||"");return o}catch(e){return console.error("Error retrieving regions:",e),[]}finally{e.destroy()}}();console.log("discovering your AWS environment...");const y=await(async n=>{const o=new t.OrganizationsClient({region:n});let i=!1,a=!1;try{const s=await async function(t){const n=new e.STSClient({region:t});try{const t=new e.GetCallerIdentityCommand({});return(await n.send(t)).Account}catch(e){throw console.error("Error getting account ID:",e),e}}(n);if(s){const e=new t.DescribeOrganizationCommand({}),n=await o.send(e);if(n.Organization?.MasterAccountId){const e=n.Organization?.MasterAccountId;e==s?(a=!0,i=!0):i=!0}else i=!1}}catch(e){console.error("Error:",e)}finally{o.destroy()}return{isInOrganization:i,isManagementAccount:a}})(A);let w,v,C=!1,z=!1,b=!1,O=!1,k=!1,E=!1,W=!1,I=!1,$=!0,D=!1,T=!1,L=!1,N=!1,R=!1,P=!1,M=!1,U=!1,F=!1,G=!1,q=!1,V=!1,K=!1,B=!1,_=!1,Z=!1,x=!1,Y=!1,H=!1,j=!0,J=!1;y&&(d.organizationDeploy=y.isInOrganization,d.managementAccount=y.isManagementAccount,void 0===y.isManagementAccount&&(y.isManagementAccount=!1,console.log("AWS account is not the Management Account of an AWS Organization")),j=y.isManagementAccount),console.log("discovering IAM Users...");const Q=await(async()=>{const e=new n.IAMClient({region:"us-east-1"}),t=[];try{const o=new n.ListUsersCommand({}),i=await e.send(o);for(const o of i.Users||[]){const i=o.UserName||"",a=new n.ListAccessKeysCommand({UserName:i}),s=(await e.send(a)).AccessKeyMetadata||[];if(s.length>0)for(const o of s){const a=o.AccessKeyId||"",s=new n.GetAccessKeyLastUsedCommand({AccessKeyId:a}),r=await e.send(s),c={userName:i,accessKeyId:a,lastUsed:r&&r.AccessKeyLastUsed&&`${r.AccessKeyLastUsed.LastUsedDate}`||"Not available"};t.push(c)}else{const e={userName:i};t.push(e)}}}catch(e){console.error("Error:",e)}finally{e.destroy()}return t})();Q&&Q.length>0?(console.log("IAM Users discovered."),d.iamUserChecks=Q):O=!0,console.log("discovering EC2 instances across all AWS Regions...");const X=await async function(e){let t=[];for(const n of e){const e=new a.EC2Client({region:n}),o=new a.DescribeInstancesCommand({});try{const i=await e.send(o);if(i.Reservations)if(i.Reservations.length>0){const e={region:n,ec2Found:!0};t.push(e)}else{const e={region:n,ec2Found:!1};t.push(e)}else{const e={region:n,ec2Found:!1};t.push(e)}}catch(e){console.log(`Error checking instance: ${e}`)}finally{e.destroy()}}return t}(S);if(X&&X.find((e=>!0===e.ec2Found))){d.ec2Checks=X,console.info("warning: EC2 instances discovered.");for(const e of X)D=!1}console.log("discovering VPCs across all AWS Regions...");const ee=await async function(e){let t=[];for(const n of e){const e=new a.EC2Client({region:n}),o=new a.DescribeVpcsCommand({});try{const i=await e.send(o);if(i.Vpcs)if(i.Vpcs.length>0){const e={region:n,vpcFound:!0};t.push(e)}else{const e={region:n,vpcFound:!1};t.push(e)}else{const e={region:n,vpcFound:!1};t.push(e)}}catch(e){console.log(`Error: ${e}`)}finally{e.destroy()}}return t}(S);if(d.vpcChecks=ee,ee&&ee.length>0&&($=!1,console.log("warning: VPCs discovered.")),console.log("discovering AWS Config configurations across all AWS Regions..."),d.cloudTrailDetails=await async function(e){let t=[];for(const n of e){const e=new s.CloudTrailClient({region:n}),o=new s.DescribeTrailsCommand({});try{const i=await e.send(o);if(i.trailList)for(const e of i.trailList){let o={};o=e.HomeRegion==n?{region:n,trailFound:!0,isOrgTrail:e.IsMultiRegionTrail,isMultiRegion:e.IsMultiRegionTrail}:{region:n,trailFound:!1},t.push(o)}}catch(e){console.log(`Error checking instance: ${e}`)}finally{e.destroy()}}return t}(S),d.configDetails=await async function(e){let t=[];for(const n of e){const e=new r.ConfigServiceClient({region:n});let o={region:n,configRecorderFound:!1,configDeliveryChannelFound:!1};try{const n=await e.send(new r.DescribeConfigurationRecorderStatusCommand({}));0!==n.ConfigurationRecordersStatus?.length&&(o.configRecorderFound=!0);const i=await e.send(new r.DescribeDeliveryChannelsCommand({}));0!==i.DeliveryChannels?.length&&(o.configDeliveryChannelFound=!0),t.push(o)}catch(e){console.error(`Error checking AWS Config in ${n}:`,e)}finally{e.destroy()}}return t}(S),d.configDetails&&d.configDetails.find((e=>!0===e.configRecorderFound)))for(const e of d.configDetails)e.configRecorderFound&&(T=!0),e.configDeliveryChannelFound&&(L=!0);if(y.isInOrganization&&y.isManagementAccount){console.log("collecting general AWS Organization details...");const e=await async function(e){const n=new t.OrganizationsClient({region:e});let o={};try{const e=new t.DescribeOrganizationCommand({}),i=await n.send(e);i.Organization&&(o.id=i.Organization.Id??"",o.arn=i.Organization.Arn??"");const a=new t.ListRootsCommand({}),s=await n.send(a);s.Roots?o.rootOuId=s.Roots[0].Id:console.log("No info found for your AWS Organization.")}catch(e){console.error(`An error occurred: ${e}`)}finally{return n.destroy(),o}}("us-east-1");console.log("collecting CUR details...");const n=await(async e=>{const t=new l.CostAndUsageReportServiceClient({region:e});let n=!1;try{const e={},o=new l.DescribeReportDefinitionsCommand(e),i=await t.send(o);return i.ReportDefinitions&&i.ReportDefinitions.length>0&&(n=!0),{isLegacyCurSetup:n}}catch(e){return console.error(`Error: ${e}`),n=!1,{isLegacyCurSetup:n}}finally{t.destroy()}})("us-east-1");console.log("collecting AWS Organization Policy details...");const a=await async function(e){const n=new t.OrganizationsClient({region:e});let o={scpEnabled:!1,tagPolicyEnabled:!1,backupPolicyEnabled:!1};try{const e={},i=new t.ListRootsCommand(e),a=await n.send(i);if(a.Roots&&a.Roots[0].PolicyTypes)for(const e of a.Roots[0].PolicyTypes)"SERVICE_CONTROL_POLICY"==e.Type&&"ENABLED"==e.Status&&(o.scpEnabled=!0),"TAG_POLICY"==e.Type&&"ENABLED"==e.Status&&(o.tagPolicyEnabled=!0),"BACKUP_POLICY"==e.Type&&"ENABLED"==e.Status&&(o.backupPolicyEnabled=!0)}catch(e){console.error(`An error occurred: ${e}`)}finally{return n.destroy(),o}}("us-east-1");console.log("collecting AWS Organization service trusted access details..."),d.orgServices=await async function(e){const n=[],o=new t.OrganizationsClient({region:e});try{const e=new t.ListAWSServiceAccessForOrganizationCommand({}),i=await o.send(e);if(i.EnabledServicePrincipals&&i.EnabledServicePrincipals.length>0){i.EnabledServicePrincipals;for(const e of i.EnabledServicePrincipals){const t={service:e.ServicePrincipal??""};n.push(t)}}}catch(e){console.error("Error checking service access:",e)}finally{return o.destroy(),n}}("us-east-1"),console.log("collecting AWS Organization CloudFormation status details...");const s=await async function(e){let t={status:"disabled"};const n=new o.CloudFormationClient({region:e});try{const e={},i=new o.DescribeOrganizationsAccessCommand(e),a=await n.send(i);t.status=a.Status??"disabled"}catch(e){console.log(`Error: ${e}`)}finally{return n.destroy(),t}}(A);console.log("collecting AWS Control Tower details...");const r=await async function(e){let t={};const n=new c.ControlTowerClient({region:e});try{const e=new c.ListLandingZonesCommand({}),o=await n.send(e);if(o.landingZones&&o.landingZones.length>0){const e={landingZoneIdentifier:o.landingZones[0].arn},n=o.landingZones[0].arn?.toString().split(":")[3]??"";if(n){t.controlTowerRegion=n;const o=new c.ControlTowerClient({region:n}),i=new c.GetLandingZoneCommand(e),a=await o.send(i);a.landingZone&&(t.status=a.landingZone.status,t.latestAvailableVersion=a.landingZone.latestAvailableVersion,t.deployedVersion=a.landingZone.version,t.driftStatus=a.landingZone.driftStatus?.status)}}}catch(t){console.error(`Error checking Control Tower in ${e}:`,t)}finally{n.destroy()}return t}(A);if(d.idcInfo=await async function(e){let t={found:!1};for(const n of e){const e=new i.SSOAdminClient({region:n});try{const o={MaxResults:Number("100")},a=new i.ListInstancesCommand(o),s=await e.send(a);if(s.Instances&&s.Instances.length>0){const e=s.Instances[0];t.found=!0,t.region=n,t.arn=e.InstanceArn,t.id=e.IdentityStoreId;break}}catch(e){console.log(`Error looking for AWS Identity Center details in region ${n}`)}finally{e.destroy()}}return t}(S),console.log("collecting AWS Organization service delegated admin details..."),d.orgDelegatedAdminAccounts=await async function(){let e=[];const n=new t.OrganizationsClient({region:"us-east-1"});let o={};try{const i=new t.ListDelegatedAdministratorsCommand({}),a=await n.send(i);if(a.DelegatedAdministrators)for(const i of a.DelegatedAdministrators){const a={AccountId:i.Id},s=new t.ListDelegatedServicesForAccountCommand(a),r=await n.send(s);r.DelegatedServices&&(o={services:r.DelegatedServices,accountName:i.Name},e.push(o))}}catch(e){console.log("Error looking for delegated services.")}finally{n.destroy()}return e}(),console.log("collecting AWS Organization member account details..."),d.orgMemberAccounts=await async function(){let e=[];const n=new t.OrganizationsClient({region:"us-east-1"});Number("200");try{let o=await n.send(new t.ListAccountsCommand({}));if(o.Accounts&&o.Accounts.length>0){for(const t of o.Accounts){let n={accountName:t.Name,accountEmail:t.Email};e.push(n)}do{if(o.NextToken&&(o=await n.send(new t.ListAccountsCommand({NextToken:o.NextToken})),o.Accounts&&o.Accounts.length>0))for(const t of o.Accounts){let n={accountName:t.Name,accountEmail:t.Email};e.push(n)}}while(o.NextToken)}}catch(e){console.error("Error listing AWS accounts:",e)}finally{n.destroy()}return e}(),d.isLegacyCurSetup=n.isLegacyCurSetup,d.orgArn=e.arn,d.orgId=e.id,d.orgRootOuId=e.rootOuId,d.backupPolicyEnabled=a.backupPolicyEnabled,d.scpEnabled=a.scpEnabled,d.tagPolicyEnabled=a.tagPolicyEnabled,d.orgCloudFormationStatus=s.status,d.controlTowerDeployedVersion=r.deployedVersion,d.controlTowerDriftStatus=r.driftStatus,d.controlTowerLatestAvailableVersion=r.latestAvailableVersion,d.controlTowerRegion=r.controlTowerRegion,d.controlTowerStatus=r.status,d.idcInfo.arn&&(E=!0),d.cloudTrailDetails&&d.cloudTrailDetails.length>0){W=!0;for(const e of d.cloudTrailDetails)e.trailFound&&e.isOrgTrail&&(I=!0)}if(d.orgServices.find((e=>"cloudtrail.amazonaws.com"===e.service))&&(N=!0),d.orgServices.find((e=>"config.amazonaws.com"===e.service))&&(K=!0),a.scpEnabled&&(P=!0),a.tagPolicyEnabled&&(R=!0),a.backupPolicyEnabled&&(M=!0),e.rootOuId&&(console.log("collecting OU and member account details..."),d.orgOuInfo=await async function(e,n){const o=new t.OrganizationsClient({region:e});let i=[];try{const e=new t.ListOrganizationalUnitsForParentCommand({ParentId:n}),a=await o.send(e);if(a.OrganizationalUnits)for(const e of a.OrganizationalUnits){let n={id:e.Id,name:e.Name};const a=await o.send(new t.ListAccountsForParentCommand({ParentId:e.Id}));a.Accounts&&a.Accounts.length>0&&(n.accounts=a.Accounts),i.push(n)}}catch(e){return console.error("Error checking service access:",e),[]}finally{o.destroy()}return i}("us-east-1",e.rootOuId),d.orgOuInfo&&d.orgOuInfo.length>0))for(const e of d.orgOuInfo)"suspended"===e.name?.toLowerCase()&&(v=!0),"transitional"===e.name?.toLowerCase()&&(w=!0),"workloads"===e.name?.toLowerCase()&&(z=!0),"security"===e.name?.toLowerCase()&&(b=!0),"infrastructure"===e.name?.toLowerCase()&&(C=!0);if(d.orgMemberAccounts&&d.orgMemberAccounts.length>0)for(const e of d.orgMemberAccounts)e.accountName&&("log archive"===e.accountName.toLowerCase()&&(Y=!0),"audit"===e.accountName.toLowerCase()&&(H=!0),"security tooling"===e.accountName.toLowerCase()&&(H=!0));let u=!1,g=!1,m=!1,p=!1,h=!1,f=!1,y=!1,O=!1,$=!1;if(d.orgDelegatedAdminAccounts&&d.orgDelegatedAdminAccounts.length>0)for(const e of d.orgDelegatedAdminAccounts)if(e.services&&e.services.length>0)for(const t of e.services)"securityhub.amazonaws.com"===t.ServicePrincipal&&(g=!0),"guardduty.amazonaws.com"===t.ServicePrincipal&&(m=!0),"sso.amazonaws.com"===t.ServicePrincipal&&(u=!0),"config.amazonaws.com"===t.ServicePrincipal&&(p=!0),"access-analyzer.amazonaws.com"===t.ServicePrincipal&&(h=!0),"storage-lens.s3.amazonaws.com"===t.ServicePrincipal&&(f=!0),"ipam.amazonaws.com"===t.ServicePrincipal&&(y=!0),"account.amazonaws.com"===t.ServicePrincipal&&(O=!0),"backup.amazonaws.com"===t.ServicePrincipal&&($=!0);r.controlTowerRegion&&(_=!0),"DRIFTED"!==r.driftStatus&&(Z=!0),r.deployedVersion===r.latestAvailableVersion&&(x=!0),d.orgServices.find((e=>"member.org.stacksets.cloudformation.amazonaws.com"===e.service))&&(F=!0),d.orgServices.find((e=>"sso.amazonaws.com"===e.service))&&(k=!0),d.orgServices.find((e=>"guardduty.amazonaws.com"===e.service))&&(G=!0),d.orgServices.find((e=>"securityhub.amazonaws.com"===e.service))&&(q=!0),d.orgServices.find((e=>"access-analyzer.amazonaws.com"===e.service))&&(V=!0),d.orgServices.find((e=>"ram.amazonaws.com"===e.service))&&(B=!0),d.orgServices.find((e=>"backup.amazonaws.com"===e.service))&&(J=!0),"ENABLED"===d.orgCloudFormationStatus&&(U=!0)}else if(y.isInOrganization&&!y.isManagementAccount){const e="\nWARNING: You are running CFAT from an account that is a member of your AWS Organization. Please run the solution from your AWS Management account.";console.warn(e)}else{const e="\nWARNING: You are running CFAT from an account that not part of an AWS Organization. This account will be treated as a standalone account.";console.warn(e)}let te={check:"AWS Organization created",description:"AWS Organization is enabled.",status:y.isInOrganization?"complete":"incomplete",required:!0,weight:6,loe:1,remediationLink:"https://aws.amazon.com/organizations/getting-started/"};u.push(te);let ne={check:"Management Account created",description:"AWS Management account exists.",status:j?"complete":"incomplete",required:!0,weight:6,loe:1,remediationLink:"https://docs.aws.amazon.com/accounts/latest/reference/manage-acct-creating.html"};u.push(ne);const oe={check:"Management Account IAM users removed",description:"IAM Users should not exist in Management Account.",status:O?"complete":"incomplete",required:!1,weight:4,loe:1,remediationLink:"https://docs.aws.amazon.com/IAM/latest/UserGuide/id_users_manage.html#id_users_deleting"};u.push(oe);const ie={check:"Management Account EC2 instances removed",description:"EC2 Instances should not exist in Management Account.",status:D?"complete":"incomplete",required:!1,weight:4,loe:1,remediationLink:"https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/terminating-instances.html"};u.push(ie);const ae={check:"Management Account VPCs removed",description:"Management Account should not have any VPCs.",status:$?"complete":"incomplete",required:!1,weight:4,loe:1,remediationLink:"https://github.com/cloud-foundations-on-aws/cloud-foundations-templates/blob/main/network/network-default-vpc-deletion/README.md"};u.push(ae),d.isLegacyCurSetup;const se={check:"CloudTrail Trail created",description:"CloudTrail should be enabled within the account.",status:W?"complete":"incomplete",required:!0,weight:6,loe:3,remediationLink:"https://docs.aws.amazon.com/awscloudtrail/latest/userguide/creating-trail-organization.html"};u.push(se);const re={check:"CloudTrail Organization Service enabled",description:"CloudTrail should be enabled on the Organization.",status:N?"complete":"incomplete",required:!0,weight:6,loe:1,remediationLink:"https://docs.aws.amazon.com/organizations/latest/userguide/services-that-can-integrate-cloudtrail.html"};u.push(re);const ce={check:"CloudTrail Org Trail deployed",description:"At least one CloudTrail Organization Trail should be enabled.",status:I?"complete":"incomplete",required:!0,weight:6,loe:1,remediationLink:"https://docs.aws.amazon.com/awscloudtrail/latest/userguide/creating-trail-organization.html"};u.push(ce);const le={check:"Config Recorder in Management Account configured",description:"Config Recorder in the Management Account should be enabled.",status:T?"complete":"incomplete",required:!0,weight:6,loe:2,remediationLink:"https://aws.amazon.com/blogs/mt/managing-aws-organizations-accounts-using-aws-config-and-aws-cloudformation-stacksets/"};u.push(le);const de={check:"Config Delivery Channel in Management Account configured",description:"Config Delivery Channel in Management Account should be enabled.",status:L?"complete":"incomplete",required:!0,weight:6,loe:2,remediationLink:"https://aws.amazon.com/blogs/mt/managing-aws-organizations-accounts-using-aws-config-and-aws-cloudformation-stacksets/"};u.push(de);const ue={check:"CloudFormation StackSets activated",description:"CloudFormation StackSets should be activated in the CloudFormation console.",status:U?"complete":"incomplete",required:!1,weight:5,loe:1,remediationLink:"https://docs.aws.amazon.com/organizations/latest/userguide/services-that-can-integrate-cloudformation.html#integrate-enable-ta-cloudformation"};u.push(ue);const ge={check:"GuardDuty Organization service enabled",description:"GuardDuty Organization services should be enabled.",status:G?"complete":"incomplete",required:!1,weight:4,loe:1,remediationLink:"https://docs.aws.amazon.com/organizations/latest/userguide/services-that-can-integrate-guardduty.html#integrate-enable-ta-guardduty"};u.push(ge);const me={check:"RAM Organization service enabled",description:"Resource Access Manager (RAM) trusted access should be enabled in the AWS Organization.",status:B?"complete":"incomplete",required:!1,weight:4,loe:1,remediationLink:"https://docs.aws.amazon.com/organizations/latest/userguide/services-that-can-integrate-ram.html#integrate-enable-ta-ram"};u.push(me);const pe={check:"Security Hub Organization service enabled",description:"Security Hub trusted access should be enabled in the AWS Organization.",status:q?"complete":"incomplete",required:!1,weight:4,loe:1,remediationLink:"https://docs.aws.amazon.com/organizations/latest/userguide/services-that-can-integrate-securityhub.html#integrate-enable-ta-securityhub"};u.push(pe);const he={check:"IAM Access Analyzer Organization service enabled",description:"IAM Access Analyzer trusted access should be enabled in the AWS Organization.",status:V?"complete":"incomplete",required:!1,weight:4,loe:1,remediationLink:"https://docs.aws.amazon.com/IAM/latest/UserGuide/access-analyzer-getting-started.html#access-analyzer-enabling"};u.push(he);const fe={check:"Config Organization service enabled",description:"AWS Config trusted access should be enabled in the AWS Organization.",status:K?"complete":"incomplete",required:!1,weight:4,loe:1,remediationLink:"https://docs.aws.amazon.com/organizations/latest/userguide/services-that-can-integrate-config.html#integrate-enable-ta-config"};u.push(fe);const Ae={check:"CloudFormation Organization service enabled",description:"CloudFormation trusted access should be enabled in the AWS Organization.",status:F?"complete":"incomplete",required:!1,weight:5,loe:1,remediationLink:"https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/stacksets-orgs-activate-trusted-access.html"};u.push(Ae);const Se={check:"Top-level Infrastructure OU deployed",description:"Top-level Infrastructure OU should exist.",status:C?"complete":"incomplete",required:!1,weight:5,loe:2,remediationLink:"https://catalog.workshops.aws/control-tower/en-US/introduction/manage-ou"};u.push(Se);const ye={check:"Top-level Security OU deployed",description:"Top-level Security OU should exist.",status:b?"complete":"incomplete",required:!0,weight:6,loe:2,remediationLink:"https://catalog.workshops.aws/control-tower/en-US/introduction/manage-ou"};u.push(ye);const we={check:"Top-level Workloads OU deployed",description:"Top-level Workloads OU should exist.",status:z?"complete":"incomplete",required:!1,weight:5,loe:2,remediationLink:"https://catalog.workshops.aws/control-tower/en-US/introduction/manage-ou"};u.push(we);const ve={check:"IAM IdC Organization service enabled",description:"IAM Identity Center trusted access should be enabled in the AWS Organization",status:k?"complete":"incomplete",required:!0,weight:6,loe:1,remediationLink:"https://docs.aws.amazon.com/singlesignon/latest/userguide/get-set-up-for-idc.html"};u.push(ve);const Ce={check:"IAM IdC configured",description:"IAM Identity Center should be configured.",status:E?"complete":"incomplete",required:!0,weight:6,loe:3,remediationLink:"https://docs.aws.amazon.com/singlesignon/latest/userguide/tutorials.html"};u.push(Ce);const ze={check:"Service Control Policies enabled",description:"Service Control Policy should be enabled within the AWS Organization.",status:P?"complete":"incomplete",required:!0,weight:6,loe:1,remediationLink:"https://docs.aws.amazon.com/organizations/latest/userguide/orgs_manage_policies_enable-disable.html"};u.push(ze);const be={check:"Organization Tag Policy enabled",description:"Tag Policy should be enabled within the AWS Organization.",status:R?"complete":"incomplete",required:!0,weight:6,loe:1,remediationLink:"https://docs.aws.amazon.com/organizations/latest/userguide/orgs_manage_policies_enable-disable.html"};u.push(be);const Oe={check:"Organization Backup Policy enabled",description:"Backup Policy should be enabled within the AWS Organization.",status:M?"complete":"incomplete",required:!1,weight:5,loe:1,remediationLink:"https://docs.aws.amazon.com/organizations/latest/userguide/orgs_manage_policies_enable-disable.html"};u.push(Oe);const ke={check:"Control Tower deployed",description:"Control Tower should be deployed.",status:_?"complete":"incomplete",required:!0,weight:6,loe:6,remediationLink:"https://catalog.workshops.aws/control-tower/en-US/prerequisites/deploying"};u.push(ke);const Ee={check:"Control Tower latest version",description:"Control Tower should be the latest version.",status:x?"complete":"incomplete",required:!1,weight:5,loe:2,remediationLink:"https://docs.aws.amazon.com/controltower/latest/userguide/update-controltower.html"};u.push(Ee);const We={check:"Control Tower not drifted",description:"Control Tower should not be drifted.",status:Z?"complete":"incomplete",required:!0,weight:6,loe:2,remediationLink:"https://docs.aws.amazon.com/controltower/latest/userguide/resolve-drift.html"};u.push(We);const Ie={check:"Log Archive account deployed",description:"Log Archive account should exist.",status:Y?"complete":"incomplete",required:!0,weight:6,loe:2,remediationLink:"https://docs.aws.amazon.com/controltower/latest/userguide/getting-started-from-console.html"};u.push(Ie);const $e={check:"Audit account deployed",description:"Audit/Security Tooling account should exist.",status:H?"complete":"incomplete",required:!0,weight:6,loe:2,remediationLink:"https://docs.aws.amazon.com/controltower/latest/userguide/getting-started-from-console.html"};u.push($e),d.cfatChecks=u,console.table(u,["check","status","required","loe"]),console.log("writing assessment summary checks to ./cfat/cfat-checks.csv...");const De=function(e){const t=Array.isArray(e)?e:[e],n=t.length>0?Object.keys(t[0]):[],o=[n.join(",")];for(const e of t){const t=n.map((t=>{const n=e[t];return"string"==typeof n?`"${n.replace(/"/g,'""')}"`:n}));o.push(t.join(","))}return o.join("\n")}(u);g.writeFileSync("./cfat-checks.csv",De),await async function(e){let t=[],n="Cloud Foundation Assessment Tool";n+=`\nGenerated on: ${(new Date).toUTCString()} \n\n`;let o=0,i=0,a=0,s="COMPLETE";if(e.cfatChecks&&e.cfatChecks.length>0){n+="\nIncomplete Requirements:";for(const t of e.cfatChecks)a+=t.weight,!0===t.required&&"incomplete"===t.status&&(n+=`\n    INCOMPLETE: ${t.check}`,i+=t.loe,s="INCOMPLETE"),"complete"===t.status&&(o+=t.weight);n+="\n\n====================================\n",n+=`\nFoundation Status: ${s}`,"INCOMPLETE"===s&&(n+=`\nEstimate of Required Level of Effort (LOE): ${i} hours`),n+=`\nCFAT Score: ${o} out of ${a}`,n+="\n\n====================================\n",n+="\nFoundation Checks:\n",e.cfatChecks&&e.cfatChecks.length>0&&(n+=`${r=e.cfatChecks,p.table(r),(m.read()||"").toString()}`)}var r;if(n+="\n\nStart Detailed Report:\n\n",n+="\n*********************************************************",n+="\n                   MANAGEMENT ACCOUNT",n+="\n*********************************************************",n+="\n\nAWS ACCOUNT TYPE\n",n+=`\n  Is in AWS Organization: ${e.organizationDeploy}`,n+=`\n  Assessing AWS Management Account: ${e.managementAccount}`,n+="\n\nIAM USERS CHECK\n",e.iamUserChecks&&e.iamUserChecks.length>0)for(const t of e.iamUserChecks)n+=`\n  IAM User: ${t.userName}`,t.accessKeyId&&(n+=`\n    User API Key ID: ${t.accessKeyId}`),n+="\n";else n+="\n  No IAM Users found.";if(n+="\n\nEC2 INSTANCE CHECK\n",e.ec2Checks&&e.ec2Checks.find((e=>!0===e.ec2Found)))for(const t of e.ec2Checks)t.ec2Found&&(n+=`\n  ${t.region} - found EC2 Instance(s).`);else n+="\n  No EC2 instances found.";if(n+="\n\nVPC CHECK\n",e.vpcChecks&&e.vpcChecks.length>0)for(const t of e.vpcChecks)t.vpcFound&&(n+=`\n  ${t.region} - found VPC(s).`);else n+="\n  No VPCs found.";if(n+="\n\nAWS CONFIG CHECK\n",e.configDetails&&e.configDetails.find((e=>!0===e.configRecorderFound)))for(const t of e.configDetails)t.configRecorderFound&&(n+=`\n  ${t.region} - Config Recorder found`),t.configDeliveryChannelFound&&(n+=`\n  ${t.region} - Config Delivery Channel found`);else n+="\n  No AWS Config resource discovered";n+="\n\nMANAGEMENT ACCOUNT TASKS:";const c="Management Account";if(e.iamUserChecks&&e.iamUserChecks.length>0)for(const o of e.iamUserChecks){let e={title:`Remove IAM user ${o.userName}`,category:c,detail:`Review and determine if IAM user ${o.userName} can be deleted.`};const i=`${e.title} - ${e.category} - ${e.detail}`;if(t.push(e),n+=`\n  ${i}`,o.accessKeyId){let e={title:`Remove IAM user ${o.userName} API key ${o.accessKeyId} `,category:c,detail:`Review and determine if IAM user API key ${o.accessKeyId} for ${o.userName} can be removed.`};n+=`\n  ${e.title} - ${e.category} - ${e.detail}`,t.push(e)}}if(e.ec2Checks&&e.ec2Checks.find((e=>!0===e.ec2Found)))for(const o of e.ec2Checks)if(o.ec2Found&&o.region){let e={title:`Delete EC2 instance in ${o.region}`,category:c,detail:`Delete any unnecessary EC2 instance in ${o.region}`};n+=`\n  ${e.title} - ${e.category} - ${e.detail}`,t.push(e)}if(e.vpcChecks&&e.vpcChecks.length>0)for(const o of e.vpcChecks)if(o.vpcFound&&o.region){let e={title:`Delete VPC in ${o.region}`,category:c,detail:`Delete any unnecessary VPC in ${o.region} to include the default VPC.`};n+=`\n  ${e.title} - ${e.category} - ${e.detail}`,t.push(e)}if(n+="\n\n*********************************************************",n+="\n                    GOVERNANCE",n+="\n*********************************************************",n+="\n\nAWS ORGANIZATION POLICY TYPES\n",n+=`\n  Service Control Policies (SCP) enabled: ${e.scpEnabled}`,n+=`\n  Tag Policies enabled: ${e.tagPolicyEnabled}`,n+=`\n  Backup Policies enabled: ${e.backupPolicyEnabled}`,n+="\n\nAWS ORGANIZATION CLOUDFORMATION\n",n+=`\n  AWS CloudFormation Organization stack sets status : ${e.orgCloudFormationStatus}`,n+="\n\nCLOUDTRAIL CHECK\n",e.cloudTrailDetails&&e.cloudTrailDetails.length>0)for(const t of e.cloudTrailDetails)t.trailFound&&(n+=`\n  CloudTrail found in ${t.region}`,n+=`\n    Is Organization Trail: ${t.isOrgTrail}`,n+=`\n    Is MultiRegion: ${t.isMultiRegion}`,n+="\n");else n+="\n  No AWS CloudTrail resource discovered";n+="\n\nGOVERNANCE SERVICES ENABLED IN AWS ORGANIZATION:\n",e.orgServices?(e.orgServices.find((e=>"cloudtrail.amazonaws.com"===e.service))&&(n+="\n  AWS CloudTrail"),e.orgServices.find((e=>"config.amazonaws.com"===e.service))&&(n+="\n  AWS Config")):n+="\n  No governance service enabled",n+="\n\nGOVERNANCE TASKS:";const l="Governance";if(!e.orgServices||!e.orgServices.find((e=>"cloudtrail.amazonaws.com"===e.service))){const e={title:"Enable AWS CloudTrail",category:l,detail:"Enable AWS CloudTrail in AWS Organization"};t.push(e),n+=`\n  ${e.title} - ${e.category} - ${e.detail}`}if(!e.orgServices||!e.orgServices.find((e=>"config.amazonaws.com"===e.service))){const e={title:"Enable AWS Config",category:l,detail:"Enable AWS Config in AWS Organization"};t.push(e),n+=`\n  ${e.title} - ${e.category} - ${e.detail}`}if(!e.scpEnabled){const e={title:"Enable SCP",category:l,detail:"Enable SCP in AWS Organization"};t.push(e),n+=`\n  ${e.title} - ${e.category} - ${e.detail}`}if(!e.tagPolicyEnabled){let e={title:"Enable Tag Policy",category:l,detail:"Enable Tag Policy in AWS Organization"};t.push(e),n+=`\n  ${e.title} - ${e.category} - ${e.detail}`}if(!e.backupPolicyEnabled){let e={title:"Enable Backup Policy",category:l,detail:"Enable Backup Policy in AWS Organization"};t.push(e),n+=`\n  ${e.title} - ${e.category} - ${e.detail}`}if(n+="\n\n*********************************************************",n+="\n                FINANCIAL MANAGEMENT",n+="\n*********************************************************",n+="\n\nLegacy CUR",n+=`\n  Is legacy CUR setup: ${e.isLegacyCurSetup}`,n+="\n\nCLOUD FINANCIAL MANAGEMENT TASKS:",!e.isLegacyCurSetup){const e={title:"Setup legacy CUR",category:"Cloud Financial Management",detail:"Setup legacy CUR in AWS Organization"};t.push(e),n+=`\n  ${e.title} - ${e.category} - ${e.detail}`}n+="\n\n*********************************************************",n+="\n                MULTI-ACCOUNT STRATEGY",n+="\n*********************************************************",n+="\n\nAWS ORGANIZATION DETAILS\n",n+=`\n  AWS Organization Id: ${e.orgId}`,n+=`\n  AWS Organization ARN: ${e.orgArn}`,n+=`\n  AWS Organization Root OU Id: ${e.orgRootOuId}`,n+="\n\nAWS ORGANIZATION CLOUDFORMATION\n",n+=`\n  AWS CloudFormation Organization stack sets status : ${e.orgCloudFormationStatus}`;let d,u,h=!1,f=!1,A=!1;if(e.orgRootOuId)if(n+="\n\nAWS ORGANIZATION TOP-LEVEL ORGANIZATION UNITS\n",n+="\n  List of Organization's top-level OUs and AWS accounts:",e.orgOuInfo&&e.orgOuInfo.length>0)for(const t of e.orgOuInfo)if("suspended"===t.name?.toLowerCase()&&(u=!0),"transitional"===t.name?.toLowerCase()&&(d=!0),"workloads"===t.name?.toLowerCase()&&(f=!0),"security"===t.name?.toLowerCase()&&(A=!0),"infrastructure"===t.name?.toLowerCase()&&(h=!0),n+=`\n    Organizational Unit: ${t.name}`,n+=`\n      Organizational Unit Id: ${t.id}`,t.accounts&&t.accounts.length>0){n+="\n      AWS Accounts:";for(const e of t.accounts)n+=`\n        ${e.Name}`;n+="\n"}else n+="\n      AWS Accounts: None",n+="\n";else n+="\n  No top level OUs found.";if(n+="\n\nAWS ORGANIZATION MEMBER ACCOUNTS\n",e.orgMemberAccounts&&e.orgMemberAccounts.length>0)for(const t of e.orgMemberAccounts)n+=`\n  Account: ${t.accountName}`,n+=`\n  Account Email: ${t.accountEmail}\n`;else n+="No member accounts found which is amazing as this is running from one.";if(n+="\n\nAWS ORGANIZATION ENABLED SERVICES\n",n+="\n  The following AWS Services are enabled within your AWS Organization:",e.orgServices&&e.orgServices.length>0)for(const t of e.orgServices)n+=`\n    ${t.service}`;else n+="\n    No trusted access enabled in the AWS Organization";let S=!1,y=!1,w=!1,v=!1,C=!1,z=!1,b=!1,O=!1,k=!1;if(n+="\n\nAWS ORGANIZATION INTEGRATED SERVICE REGISTERED DELEGATED ADMINS\n",e.orgDelegatedAdminAccounts&&e.orgDelegatedAdminAccounts.length>0)for(const t of e.orgDelegatedAdminAccounts){if(n+=`\n  Account: ${t.accountName}`,t.services&&t.services.length>0){n+="\n  Delegated Services:";for(const e of t.services)n+=`\n    ${e.ServicePrincipal}`,"securityhub.amazonaws.com"===e.ServicePrincipal&&(y=!0),"guardduty.amazonaws.com"===e.ServicePrincipal&&(w=!0),"sso.amazonaws.com"===e.ServicePrincipal&&(S=!0),"config.amazonaws.com"===e.ServicePrincipal&&(v=!0),"access-analyzer.amazonaws.com"===e.ServicePrincipal&&(C=!0),"storage-lens.s3.amazonaws.com"===e.ServicePrincipal&&(z=!0),"ipam.amazonaws.com"===e.ServicePrincipal&&(b=!0),"account.amazonaws.com"===e.ServicePrincipal&&(O=!0),"backup.amazonaws.com"===e.ServicePrincipal&&(k=!0)}n+="\n "}else n+="\n  No delegated admin accounts in AWS Organization";n+="\n\nMULTI-ACCOUNT STRATEGY TASKS:";let E="Multi-Account Strategy";if(n+=`\n  Review Account Email Addresses - ${E} - Review Account Email Addresses in AWS Organization`,!e.scpEnabled){const e={title:"Enable Service Control Policy",category:E,detail:"Enable Service Control Policy in AWS Organization"};t.push(e),n+=`\n  ${e.title} - ${e.category} - ${e.detail}`}if(!d){const e={title:"Deploy Transitional OU",category:E,detail:"Deploy Transitional OU in AWS Organization"};t.push(e),n+=`\n  ${e.title} - ${e.category} - ${e.detail}`}if(!u){const e={title:"Deploy Suspended OU",category:E,detail:"Deploy Suspended OU in AWS Organization"};t.push(e),n+=`\n  ${e.title} - ${e.category} - ${e.detail}`}if(!f){const e={title:"Deploy Workloads OU",category:E,detail:"Deploy Workloads OU in AWS Organization"};t.push(e),n+=`\n  ${e.title} - ${e.category} - ${e.detail}`}if(!A){const e={title:"Deploy Security OU",category:E,detail:"Deploy Security OU in AWS Organization"};t.push(e),n+=`\n  ${e.title} - ${e.category} - ${e.detail}`}if(!h){const e={title:"Deploy Infrastructure OU",category:E,detail:"Deploy Infrastructure OU in AWS Organization"};t.push(e),n+=`\n  ${e.title} - ${e.category} - ${e.detail}`}n+="\n\n*********************************************************",n+="\n                  LANDING ZONE",n+="\n*********************************************************",n+="\n\nAWS CONTROL TOWER\n",e.controlTowerRegion?(n+=`\n  Control Tower home region: ${e.controlTowerRegion}`,n+=`\n  Control Tower status: ${e.controlTowerStatus}`,n+=`\n  Control Tower Landing Zone version: ${e.controlTowerDeployedVersion}`,n+=`\n  Latest available version: ${e.controlTowerLatestAvailableVersion}`,n+=`\n  Drift Status: ${e.controlTowerDriftStatus}`):n+="\n  AWS Control Tower is not deployed in the AWS Organization",n+="\n\nLANDING ZONE TASKS:";const W="Landing Zone";if(void 0===e.controlTowerRegion){const e={title:"Deploy AWS Control Tower",category:W,detail:"Deploy AWS Control Tower in AWS Organization"};t.push(e),n+=`\n  ${e.title} - ${e.category} - ${e.detail}`}if("DRIFTED"===e.controlTowerDriftStatus){const e={title:"Fix drift in deployed landing zone",category:W,detail:"Fix drift in deployed landing zone"};t.push(e),n+=`\n  ${e.title} - ${e.category} - ${e.detail}`}if(e.controlTowerDeployedVersion!==e.controlTowerLatestAvailableVersion){const o={title:"Update AWS Control Tower to latest version",category:W,detail:`Update AWS Control Tower to version ${e.controlTowerLatestAvailableVersion}`};t.push(o),n+=`\n  ${o.title} - ${o.category} - ${o.detail}`}if(!e.orgServices||!e.orgServices.find((e=>"member.org.stacksets.cloudformation.amazonaws.com"===e.service))){const e={title:"Enable AWS CloudFormation",category:W,detail:"Enable AWS CloudFormation in AWS Organization"};t.push(e),n+=`\n  ${e.title} - ${e.category} - ${e.detail}`}n+="\n\n*********************************************************",n+="\n                    IDENTITY",n+="\n*********************************************************",e.idcInfo?(n+="\n\nAWS IAM IDENTITY CENTER\n",n+=`\n  IdC Region: ${e.idcInfo.region}`,n+=`\n  IdC ARN: ${e.idcInfo.arn}`,n+=`\n  IdC Instance Id: ${e.idcInfo.id}`):n+="\n\nAWS IAM IDENTITY CENTER NOT FOUND\n",n+="\n\nIDENTITY TASKS:";const I="Identity";if(!e.orgServices||!e.orgServices.find((e=>"sso.amazonaws.com"===e.service))){const e={title:"Enable AWS Single Sign-On",category:I,detail:"Enable AWS Single Sign-On in AWS Organization"};t.push(e),n+=`\n  ${e.title} - ${e.category} - ${e.detail}`}if(!S){const e={title:"Delegate administration to AWS IAM Identity Center",category:I,detail:"Delegate administration to AWS IAM Identity Center"};t.push(e),n+=`\n  ${e.title} - ${e.category} - ${e.detail}`}if(!e.scpEnabled){const e={title:"Enable AWS Single Sign-On",category:I,detail:"Enable AWS Single Sign-On in AWS Organization"};t.push(e),n+=`\n  ${e.title} - ${e.category} - ${e.detail}`}n+="\n\n*********************************************************",n+="\n                    SECURITY",n+="\n*********************************************************",n+="\n\nAWS SECURITY SERVICES ENABLED IN AWS ORGANIZATION:\n",e.orgServices&&e.orgServices.find((e=>"guardduty.amazonaws.com"===e.service))&&(n+="\n  AWS GuardDuty"),e.orgServices&&e.orgServices.find((e=>"securityhub.amazonaws.com"===e.service))&&(n+="\n  AWS Security Hub"),e.orgServices&&e.orgServices.find((e=>"access-analyzer.amazonaws.com"===e.service))&&(n+="\n  IAM Access Analyzer"),e.orgServices&&e.orgServices.find((e=>"macie.amazonaws.com"===e.service))&&(n+="\n  Macie"),e.orgServices&&e.orgServices.find((e=>"storage-lens.s3.amazonaws.com"===e.service))&&(n+="\n  Amazon S3 Storage Lens"),e.orgServices&&e.orgServices.find((e=>"inspector2.amazonaws.com"===e.service))&&(n+="\n  Amazon Inspector"),e.orgServices&&e.orgServices.find((e=>"cloudtrail.amazonaws.com"===e.service))&&(n+="\n  AWS CloudTrail"),e.orgServices&&e.orgServices.find((e=>"config.amazonaws.com"===e.service))&&(n+="\n  AWS Config"),n+="\n\nSECURITY TASKS:";const $="Security";if(!e.scpEnabled){const e={title:"Enable AWS Single Sign-On",category:$,detail:"Enable AWS Single Sign-On in AWS Organization"};t.push(e),n+=`\n  ${e.title} - ${e.category} - ${e.detail}`}if(!e.orgServices||!e.orgServices.find((e=>"guardduty.amazonaws.com"===e.service))){const e={title:"Delegate administration to AWS GuardDuty",category:$,detail:"Delegate administration to AWS GuardDuty"};t.push(e),n+=`\n  ${e.title} - ${e.category} - ${e.detail}`}if(!e.orgServices||!e.orgServices.find((e=>"securityhub.amazonaws.com"===e.service))){const e={title:"Delegate administration to AWS Security Hub",category:$,detail:"Delegate administration to AWS Security Hub"};t.push(e),n+=`\n  ${e.title} - ${e.category} - ${e.detail}`}if(!e.orgServices||!e.orgServices.find((e=>"access-analyzer.amazonaws.com"===e.service))){const e={title:"Delegate administration to AWS IAM Access Analyzer",category:$,detail:"Delegate administration to AWS IAM Access Analyzer"};t.push(e),n+=`\n  ${e.title} - ${e.category} - ${e.detail}`}if(!e.orgServices||!e.orgServices.find((e=>"cloudtrail.amazonaws.com"===e.service))){const e={title:"Delegate administration to AWS CloudTrail",category:$,detail:"Delegate administration to AWS CloudTrail"};t.push(e),n+=`\n  ${e.title} - ${e.category} - ${e.detail}`}if(!e.orgServices||!e.orgServices.find((e=>"config.amazonaws.com"===e.service))){const e={title:"Delegate administration to AWS Config",category:$,detail:"Delegate administration to AWS Config"};t.push(e),n+=`\n  ${e.title} - ${e.category} - ${e.detail}`}if(!y){const e={title:"Delegate administration of AWS Security Hub",category:$,detail:"Delegate administration to AWS Security Hub"};t.push(e),n+=`\n  ${e.title} - ${e.category} - ${e.detail}`}if(!w){const e={title:"Delegate administration of AWS GuardDuty",category:$,detail:"Delegate administration to AWS GuardDuty"};t.push(e),n+=`\n  ${e.title} - ${e.category} - ${e.detail}`}if(!v){const e={title:"Delegate administration of AWS Config",category:$,detail:"Delegate administration to AWS Config"};t.push(e),n+=`\n  ${e.title} - ${e.category} - ${e.detail}`}if(!C){const e={title:"Delegate administration of AWS IAM Access Analyzer",category:$,detail:"Delegate administration to AWS IAM Access Analyzer"};t.push(e),n+=`\n  ${e.title} - ${e.category} - ${e.detail}`}if(!z){const e={title:"Delegate administration of Amazon S3 Storage Lens",category:$,detail:"Delegate administration to Amazon S3 Storage Lens"};t.push(e),n+=`\n  ${e.title} - ${e.category} - ${e.detail}`}n+="\n\n*********************************************************",n+="\n                    NETWORK",n+="\n*********************************************************",n+="\n\nNETWORK TASKS:";const D="Network";if(!e.orgServices||!e.orgServices.find((e=>"guardduty.amazonaws.com"===e.service))){const e={title:"Enable AWS GuardDuty",category:D,detail:"Enable AWS GuardDuty in AWS Organization"};t.push(e),n+=`\n  ${e.title} - ${e.category} - ${e.detail}`}if(!e.orgServices||!e.orgServices.find((e=>"ipam.amazonaws.com"===e.service))){const e={title:"Enable AWS IPAM",category:D,detail:"Enable AWS IPAM in AWS Organization"};t.push(e),n+=`\n  ${e.title} - ${e.category} - ${e.detail}`}if(!e.orgServices||!e.orgServices.find((e=>"ram.amazonaws.com"===e.service))){const e={title:"Enable AWS Resource Access Manager",category:D,detail:"Enable AWS Resource Access Manager in AWS Organization"};t.push(e),n+=`\n  ${e.title} - ${e.category} - ${e.detail}`}if(!b){const e={title:"Delegate administration of AWS IPAM",category:D,detail:"Delegate administration to AWS IPAM"};t.push(e),n+=`\n  ${e.title} - ${e.category} - ${e.detail}`}if(!e.scpEnabled){const e={title:"Enable AWS Service Control Policy",category:D,detail:"Enable AWS Service Control Policy in AWS Organization"};t.push(e),n+=`\n  ${e.title} - ${e.category} - ${e.detail}`}n+="\n\n*********************************************************",n+="\n                  OBSERVABILITY",n+="\n*********************************************************",n+="\n\nOBSERVABILITY TASKS:";const T="Observability";if(!e.orgServices||!e.orgServices.find((e=>"account.amazonaws.com"===e.service))){const e={title:"Enable AWS Account",category:T,detail:"Enable AWS Account in AWS Organization"};t.push(e),n+=`\n  ${e.title} - ${e.category} - ${e.detail}`}if(!O){const e={title:"Delegate administration of AWS Account",category:T,detail:"Delegate administration to AWS Account"};t.push(e),n+=`\n  ${e.title} - ${e.category} - ${e.detail}`}n+="\n\n*********************************************************",n+="\n               BACKUP AND RECOVERY",n+="\n*********************************************************",n+="\n\nBACKUP AND RECOVERY TASKS:";const L="Backup and Recovery";if(!e.orgServices||!e.orgServices.find((e=>"backup.amazonaws.com"===e.service))){const e={title:"Enable AWS Backup",category:L,detail:"Enable AWS Backup in AWS Organization"};t.push(e),n+=`\n  ${e.title} - ${e.category} - ${e.detail}`}if(!k){const e={title:"Delegate administration of AWS Backup",category:L,detail:"Delegate administration to AWS Backup"};t.push(e),n+=`\n  ${e.title} - ${e.category} - ${e.detail}`}if(!e.backupPolicyEnabled){const e={title:"Enable AWS Backup Policy",category:L,detail:"Enable AWS Backup Policy in AWS Organization"};t.push(e),n+=`\n  ${e.title} - ${e.category} - ${e.detail}`}if(!e.scpEnabled){const e={title:"Enable AWS Service Control Policy",category:L,detail:"Enable AWS Service Control Policy in AWS Organization"};t.push(e),n+=`\n  ${e.title} - ${e.category} - ${e.detail}`}return n+="\n\n\n  END REVIEW",console.log("compiling report..."),console.log("saving report to ./cfat/cfat.txt..."),g.appendFileSync("./cfat.txt",n),t}(d);const Te=await async function(e){let t=[];if(e.iamUserChecks&&e.iamUserChecks.length>0)for(const n of e.iamUserChecks){let e={title:`Remove IAM user ${n.userName}`,detail:`Review and determine if IAM user ${n.userName} can be deleted.`,remediationLink:""};if(t.push(e),n.accessKeyId){let e={title:`Remove IAM user ${n.userName} API key ${n.accessKeyId} `,detail:`Review and determine if IAM user API key ${n.accessKeyId} for ${n.userName} can be removed.`,remediationLink:"https://docs.aws.amazon.com/IAM/latest/UserGuide/id_users_manage.html#id_users_deleting"};t.push(e)}}if(e.ec2Checks&&e.ec2Checks.find((e=>!0===e.ec2Found)))for(const n of e.ec2Checks)if(n.ec2Found&&n.region){let e={title:`Delete EC2 instance in ${n.region}`,detail:`Delete any unnecessary EC2 instance in ${n.region}`,remediationLink:"https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/terminating-instances.html"};t.push(e)}if(e.vpcChecks&&e.vpcChecks.length>0)for(const n of e.vpcChecks)if(n.vpcFound&&n.region){let e={title:`Delete VPC in ${n.region}`,detail:`Delete any unnecessary VPC in ${n.region} to include the default VPC.`,remediationLink:"https://github.com/cloud-foundations-on-aws/cloud-foundations-templates/blob/main/network/network-default-vpc-deletion/README.md"};t.push(e)}if(!e.scpEnabled){const e={title:"Enable SCP",detail:"Enable SCP in AWS Organization",remediationLink:"https://docs.aws.amazon.com/organizations/latest/userguide/orgs_manage_policies_enable-disable.html"};t.push(e)}if(!e.tagPolicyEnabled){let e={title:"Enable Tag Policy",detail:"Enable Tag Policy in AWS Organization",remediationLink:"https://docs.aws.amazon.com/organizations/latest/userguide/orgs_manage_policies_enable-disable.html"};t.push(e)}if(!e.backupPolicyEnabled){let e={title:"Enable Backup Policy",detail:"Enable Backup Policy in AWS Organization",remediationLink:"https://docs.aws.amazon.com/organizations/latest/userguide/orgs_manage_policies_enable-disable.html"};t.push(e)}if(!e.isLegacyCurSetup){const e={title:"Setup legacy CUR",detail:"Setup legacy CUR in AWS Organization",remediationLink:"https://docs.aws.amazon.com/cur/latest/userguide/dataexports-create-legacy.html"};t.push(e)}let n,o,i=!1,a=!1,s=!1;if(e.orgRootOuId&&e.orgOuInfo&&e.orgOuInfo.length>0)for(const t of e.orgOuInfo)"suspended"===t.name?.toLowerCase()&&(o=!0),"transitional"===t.name?.toLowerCase()&&(n=!0),"workloads"===t.name?.toLowerCase()&&(a=!0),"security"===t.name?.toLowerCase()&&(s=!0),"infrastructure"===t.name?.toLowerCase()&&(i=!0);let r=!1,c=!1,l=!1,d=!1,u=!1,g=!1,m=!1,p=!1,h=!1;if(e.orgDelegatedAdminAccounts&&e.orgDelegatedAdminAccounts.length>0)for(const t of e.orgDelegatedAdminAccounts)if(t.services&&t.services.length>0)for(const e of t.services)"securityhub.amazonaws.com"===e.ServicePrincipal&&(c=!0),"guardduty.amazonaws.com"===e.ServicePrincipal&&(l=!0),"sso.amazonaws.com"===e.ServicePrincipal&&(r=!0),"config.amazonaws.com"===e.ServicePrincipal&&(d=!0),"access-analyzer.amazonaws.com"===e.ServicePrincipal&&(u=!0),"storage-lens.s3.amazonaws.com"===e.ServicePrincipal&&(g=!0),"ipam.amazonaws.com"===e.ServicePrincipal&&(m=!0),"account.amazonaws.com"===e.ServicePrincipal&&(p=!0),"backup.amazonaws.com"===e.ServicePrincipal&&(h=!0);if(t.push({title:"Review account email addresses",detail:"Review Account Email Addresses in AWS Organization",remediationLink:"https://docs.aws.amazon.com/IAM/latest/UserGuide/root-user-best-practices.html#ru-bp-group"}),!n){const e={title:"Deploy Transitional OU",detail:"Deploy Transitional OU in AWS Organization",remediationLink:"https://docs.aws.amazon.com/whitepapers/latest/organizing-your-aws-environment/transitional-ou.html"};t.push(e)}if(!o){const e={title:"Deploy Suspended OU",detail:"Deploy Suspended OU in AWS Organization",remediationLink:"https://docs.aws.amazon.com/whitepapers/latest/organizing-your-aws-environment/suspended-ou.html"};t.push(e)}if(!a){const e={title:"Deploy Workloads OU",detail:"Deploy Workloads OU in AWS Organization",remediationLink:"https://docs.aws.amazon.com/whitepapers/latest/organizing-your-aws-environment/workloads-ou.html"};t.push(e)}if(!s){const e={title:"Deploy Security OU",detail:"Deploy Security OU in AWS Organization",remediationLink:"https://docs.aws.amazon.com/whitepapers/latest/organizing-your-aws-environment/security-ou-and-accounts.html"};t.push(e)}if(!i){const e={title:"Deploy Infrastructure OU",detail:"Deploy Infrastructure OU in AWS Organization",remediationLink:"https://docs.aws.amazon.com/whitepapers/latest/organizing-your-aws-environment/infrastructure-ou-and-accounts.html"};t.push(e)}if(void 0===e.controlTowerRegion){const e={title:"Deploy AWS Control Tower",detail:"Deploy AWS Control Tower in AWS Organization",remediationLink:"https://catalog.workshops.aws/control-tower/en-US/prerequisites/deploying"};t.push(e)}if("DRIFTED"===e.controlTowerDriftStatus){const e={title:"Fix drift in deployed landing zone",detail:"Fix drift in deployed landing zone",remediationLink:"https://docs.aws.amazon.com/controltower/latest/userguide/resolve-drift.html"};t.push(e)}if(e.controlTowerDeployedVersion!==e.controlTowerLatestAvailableVersion){const n={title:"Update AWS Control Tower to latest version",detail:`Update AWS Control Tower to version ${e.controlTowerLatestAvailableVersion}`,remediationLink:"https://docs.aws.amazon.com/controltower/latest/userguide/update-controltower.html"};t.push(n)}if(!e.orgServices||!e.orgServices.find((e=>"cloudtrail.amazonaws.com"===e.service))){const e={title:"Enable AWS CloudTrail",detail:"Enable AWS CloudTrail in AWS Organization",remediationLink:"https://docs.aws.amazon.com/controltower/latest/userguide/resolve-drift.html"};t.push(e)}if(!g){const e={title:"Delegate administration of Amazon S3 Storage Lens",detail:"Delegate administration to Amazon S3 Storage Lens",remediationLink:"https://docs.aws.amazon.com/organizations/latest/userguide/services-that-can-integrate-s3lens.html#integrate-enable-da-s3lens"};t.push(e)}if(!e.orgServices||!e.orgServices.find((e=>"member.org.stacksets.cloudformation.amazonaws.com"===e.service))){const e={title:"Enable AWS CloudFormation",detail:"Enable AWS CloudFormation in AWS Organization",remediationLink:"https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/stacksets-orgs-activate-trusted-access.html"};t.push(e)}if(!e.orgServices||!e.orgServices.find((e=>"sso.amazonaws.com"===e.service))){const e={title:"Enable AWS Single Sign-On",detail:"Enable AWS Single Sign-On in AWS Organization",remediationLink:"https://docs.aws.amazon.com/singlesignon/latest/userguide/get-set-up-for-idc.html"};t.push(e)}if(!r){const e={title:"Delegate administration to AWS IAM Identity Center",detail:"Delegate administration to AWS IAM Identity Center",remediationLink:"https://docs.aws.amazon.com/singlesignon/latest/userguide/delegated-admin.html"};t.push(e)}if(!e.orgServices||!e.orgServices.find((e=>"securityhub.amazonaws.com"===e.service))){const e={title:"Delegate administration to AWS Security Hub",detail:"Delegate administration to AWS Security Hub",remediationLink:"https://docs.aws.amazon.com/organizations/latest/userguide/services-that-can-integrate-securityhub.html#integrate-enable-ta-securityhub"};t.push(e)}if(!c){const e={title:"Delegate administration of AWS Security Hub",detail:"Delegate administration to AWS Security Hub",remediationLink:"https://docs.aws.amazon.com/securityhub/latest/userguide/designate-orgs-admin-account.html"};t.push(e)}if(!e.orgServices||!e.orgServices.find((e=>"access-analyzer.amazonaws.com"===e.service))){const e={title:"Delegate administration to AWS IAM Access Analyzer",detail:"Delegate administration to AWS IAM Access Analyzer",remediationLink:"https://docs.aws.amazon.com/IAM/latest/UserGuide/access-analyzer-getting-started.html#access-analyzer-enabling"};t.push(e)}if(!u){const e={title:"Delegate administration of AWS IAM Access Analyzer",detail:"Delegate administration to AWS IAM Access Analyzer",remediationLink:"https://docs.aws.amazon.com/IAM/latest/UserGuide/access-analyzer-settings.html"};t.push(e)}if(!e.orgServices||!e.orgServices.find((e=>"guardduty.amazonaws.com"===e.service))){const e={title:"Enable AWS GuardDuty",detail:"Enable AWS GuardDuty in AWS Organization",remediationLink:"https://docs.aws.amazon.com/organizations/latest/userguide/services-that-can-integrate-guardduty.html#integrate-enable-ta-guardduty"};t.push(e)}if(!l){const e={title:"Delegate administration of AWS GuardDuty",detail:"Delegate administration to AWS GuardDuty",remediationLink:"https://docs.aws.amazon.com/organizations/latest/userguide/services-that-can-integrate-guardduty.html"};t.push(e)}if(!e.orgServices||!e.orgServices.find((e=>"config.amazonaws.com"===e.service))){const e={title:"Enable AWS Config",detail:"Enable AWS Config in AWS Organization",remediationLink:"https://docs.aws.amazon.com/organizations/latest/userguide/services-that-can-integrate-config.html#integrate-enable-ta-config"};t.push(e)}if(!d){const e={title:"Delegate administration of AWS Config",detail:"Delegate administration to AWS Config",remediationLink:"https://docs.aws.amazon.com/organizations/latest/userguide/services-that-can-integrate-config.html"};t.push(e)}if(!e.orgServices||!e.orgServices.find((e=>"ram.amazonaws.com"===e.service))){const e={title:"Enable AWS Resource Access Manager",detail:"Enable AWS Resource Access Manager in AWS Organization",remediationLink:"https://docs.aws.amazon.com/organizations/latest/userguide/services-that-can-integrate-ram.html#integrate-enable-ta-ram"};t.push(e)}if(!e.orgServices||!e.orgServices.find((e=>"ipam.amazonaws.com"===e.service))){const e={title:"Enable AWS IPAM",detail:"Enable AWS IPAM in AWS Organization",remediationLink:"https://docs.aws.amazon.com/organizations/latest/userguide/services-that-can-integrate-ipam.html"};t.push(e)}if(!m){const e={title:"Delegate administration of AWS IPAM",detail:"Delegate administration to AWS IPAM",remediationLink:"https://docs.aws.amazon.com/vpc/latest/ipam/enable-integ-ipam.html"};t.push(e)}if(!e.orgServices||!e.orgServices.find((e=>"account.amazonaws.com"===e.service))){const e={title:"Enable AWS Account",detail:"Enable AWS Account in AWS Organization",remediationLink:"https://docs.aws.amazon.com/accounts/latest/reference/using-orgs-delegated-admin.html"};t.push(e)}if(!p){const e={title:"Delegate administration of AWS Account management",detail:"Delegate administration to AWS Account contact management",remediationLink:"https://docs.aws.amazon.com/organizations/latest/userguide/services-that-can-integrate-account.html#integrate-enable-da-account"};t.push(e)}if(!e.orgServices||!e.orgServices.find((e=>"backup.amazonaws.com"===e.service))){const e={title:"Enable AWS Backup",detail:"Enable AWS Backup in AWS Organization",remediationLink:"https://docs.aws.amazon.com/organizations/latest/userguide/services-that-can-integrate-backup.html#integrate-enable-ta-backup"};t.push(e)}if(!h){const e={title:"Delegate administration of AWS Backup",detail:"Delegate administration to AWS Backup",remediationLink:"https://docs.aws.amazon.com/aws-backup/latest/devguide/manage-cross-account.html#backup-delegatedadmin"};t.push(e)}return t}(d);console.log("cloud foundation assessment complete. Access your report at ./cfat/cfat.txt"),console.log("assessment summary checks written to ./cfat/cfat-checks.csv"),async function(e){let t='"Summary", "Description", "Status" \r\n';for(const n of e)t+=`"cfat - ${n.category} - ${n.title}", "${n.detail}", "Open" \r\n`;g.writeFileSync("./jira-import.csv",t)}(Te),await async function(e){let t='"Task", "Description", "Status"  \r\n';for(const n of e)t+=`"cfat - ${n.title}", "${n.detail} - Remediation Link: ${n.remediationLink}", "Not Started" \r\n`;g.writeFileSync("./asana-import.csv",t)}(Te),await async function(){try{const e=g.createWriteStream(h.join(process.cwd(),"assessment.zip")),t=f("zip",{zlib:{level:9}});t.pipe(e),t.file(h.join(process.cwd(),"cfat.txt"),{name:"cfat.txt"}),t.file(h.join(process.cwd(),"cfat-checks.csv"),{name:"cfat-checks.csv"}),t.file(h.join(process.cwd(),"asana-import.csv"),{name:"asana-import.csv"}),t.file(h.join(process.cwd(),"jira-import.csv"),{name:"jira-import.csv"}),t.finalize(),console.log("Zip file created successfully!")}catch(e){console.error("Error creating zip file:",e)}}(),console.log("assessment files zipped to ./cfat/assessment.zip")})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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QUFTLG9CQUFxQixPQUFVN1ksUUFBUThZLE1BQU8sbUJBQ3ZEQyxFQUFVLEVBQVMsTUFBTyxDQUM1QkMsS0FBTSxDQUFFQyxNQUFPLEtBRW5CRixFQUFRRyxLQUFLTCxHQUViRSxFQUFRSSxLQUFLLE9BQVVuWixRQUFROFksTUFBTyxZQUFhLENBQUVySSxLQUFNLGFBQzNEc0ksRUFBUUksS0FBSyxPQUFVblosUUFBUThZLE1BQU8sbUJBQW9CLENBQUVySSxLQUFNLG9CQUNsRXNJLEVBQVFJLEtBQUssT0FBVW5aLFFBQVE4WSxNQUFPLG9CQUFxQixDQUFFckksS0FBTSxxQkFDbkVzSSxFQUFRSSxLQUFLLE9BQVVuWixRQUFROFksTUFBTyxtQkFBb0IsQ0FBRXJJLEtBQU0sb0JBQ2xFc0ksRUFBUUssV0FDUnJZLFFBQVFFLElBQUksaUNBQ2hCLENBQ0EsTUFBT29ZLEdBQ0h0WSxRQUFRRCxNQUFNLDJCQUE0QnVZLEVBQzlDLENBQ0osQ3JCdW1CVSxHQUNOdFksUUFBUUUsSUFBSSxtREFBbUQsRUFFbkVxWSxFIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vL2V4dGVybmFsIGNvbW1vbmpzIFwiQGF3cy1zZGsvY2xpZW50LXN0c1wiIiwid2VicGFjazovLy9leHRlcm5hbCBjb21tb25qcyBcIkBhd3Mtc2RrL2NsaWVudC1vcmdhbml6YXRpb25zXCIiLCJ3ZWJwYWNrOi8vL2V4dGVybmFsIGNvbW1vbmpzIFwiQGF3cy1zZGsvY2xpZW50LWlhbVwiIiwid2VicGFjazovLy9leHRlcm5hbCBjb21tb25qcyBcIkBhd3Mtc2RrL2NsaWVudC1jbG91ZGZvcm1hdGlvblwiIiwid2VicGFjazovLy9leHRlcm5hbCBjb21tb25qcyBcIkBhd3Mtc2RrL2NsaWVudC1zc28tYWRtaW5cIiIsIndlYnBhY2s6Ly8vZXh0ZXJuYWwgY29tbW9uanMgXCJAYXdzLXNkay9jbGllbnQtZWMyXCIiLCJ3ZWJwYWNrOi8vL2V4dGVybmFsIGNvbW1vbmpzIFwiQGF3cy1zZGsvY2xpZW50LWNsb3VkdHJhaWxcIiIsIndlYnBhY2s6Ly8vZXh0ZXJuYWwgY29tbW9uanMgXCJAYXdzLXNkay9jbGllbnQtY29uZmlnLXNlcnZpY2VcIiIsIndlYnBhY2s6Ly8vZXh0ZXJuYWwgY29tbW9uanMgXCJAYXdzLXNkay9jbGllbnQtY29udHJvbHRvd2VyXCIiLCJ3ZWJwYWNrOi8vL2V4dGVybmFsIGNvbW1vbmpzIFwiQGF3cy1zZGsvY2xpZW50LWNvc3QtYW5kLXVzYWdlLXJlcG9ydC1zZXJ2aWNlXCIiLCJ3ZWJwYWNrOi8vL2V4dGVybmFsIG5vZGUtY29tbW9uanMgXCJub2RlOmNvbnNvbGVcIiIsIndlYnBhY2s6Ly8vZXh0ZXJuYWwgbm9kZS1jb21tb25qcyBcIm5vZGU6c3RyZWFtXCIiLCJ3ZWJwYWNrOi8vL2V4dGVybmFsIG5vZGUtY29tbW9uanMgXCJmc1wiIiwid2VicGFjazovLy8uL2J1aWxkL3NyYy9hY3Rpb25zL2NyZWF0ZS1yZXBvcnQuanMiLCJ3ZWJwYWNrOi8vL2V4dGVybmFsIG5vZGUtY29tbW9uanMgXCJwYXRoXCIiLCJ3ZWJwYWNrOi8vL2V4dGVybmFsIGNvbW1vbmpzIFwiYXJjaGl2ZXJcIiIsIndlYnBhY2s6Ly8vLi9idWlsZC9hcHAuanMiLCJ3ZWJwYWNrOi8vLy4vYnVpbGQvc3JjL2FjdGlvbnMvZ2V0LXJlZ2lvbnMuanMiLCJ3ZWJwYWNrOi8vLy4vYnVpbGQvc3JjL2FjdGlvbnMvZGVmaW5lLWFjY291bnQtdHlwZS5qcyIsIndlYnBhY2s6Ly8vLi9idWlsZC9zcmMvYWN0aW9ucy9jaGVjay1pYW0tdXNlcnMuanMiLCJ3ZWJwYWNrOi8vLy4vYnVpbGQvc3JjL2FjdGlvbnMvY2hlY2stZWMyLWV4aXN0ZW5jZS5qcyIsIndlYnBhY2s6Ly8vLi9idWlsZC9zcmMvYWN0aW9ucy9jaGVjay12cGMtZXhpc3RlbmNlLmpzIiwid2VicGFjazovLy8uL2J1aWxkL3NyYy9hY3Rpb25zL2NoZWNrLWNsb3VkdHJhaWwtZXhpc3RlbmNlLmpzIiwid2VicGFjazovLy8uL2J1aWxkL3NyYy9hY3Rpb25zL2NoZWNrLWNvbmZpZy1leGlzdGVuY2UuanMiLCJ3ZWJwYWNrOi8vLy4vYnVpbGQvc3JjL2FjdGlvbnMvZ2V0LW9yZy1kZXRhaWxzLmpzIiwid2VicGFjazovLy8uL2J1aWxkL3NyYy9hY3Rpb25zL2NoZWNrLWxlZ2FjeS1jdXIuanMiLCJ3ZWJwYWNrOi8vLy4vYnVpbGQvc3JjL2FjdGlvbnMvZ2V0LWVuYWJsZWQtb3JnLXBvbGljeS10eXBlcy5qcyIsIndlYnBhY2s6Ly8vLi9idWlsZC9zcmMvYWN0aW9ucy9nZXQtZW5hYmxlZC1vcmctc2VydmljZXMuanMiLCJ3ZWJwYWNrOi8vLy4vYnVpbGQvc3JjL2FjdGlvbnMvY2hlY2stb3JnLWNsb3VkZm9ybWF0aW9uLmpzIiwid2VicGFjazovLy8uL2J1aWxkL3NyYy9hY3Rpb25zL2NoZWNrLWNvbnRyb2wtdG93ZXIuanMiLCJ3ZWJwYWNrOi8vLy4vYnVpbGQvc3JjL2FjdGlvbnMvZ2V0LWlkYy1pbmZvLmpzIiwid2VicGFjazovLy8uL2J1aWxkL3NyYy9hY3Rpb25zL2dldC1vcmctZGEtYWNjb3VudHMuanMiLCJ3ZWJwYWNrOi8vLy4vYnVpbGQvc3JjL2FjdGlvbnMvZ2V0LW9yZy1tZW1iZXItYWNjb3VudHMuanMiLCJ3ZWJwYWNrOi8vLy4vYnVpbGQvc3JjL2FjdGlvbnMvZ2V0LW9yZy1vdXMuanMiLCJ3ZWJwYWNrOi8vLy4vYnVpbGQvc3JjL2FjdGlvbnMvY3JlYXRlLWJhY2tsb2cuanMiLCJ3ZWJwYWNrOi8vLy4vYnVpbGQvc3JjL2FjdGlvbnMvY3JlYXRlLWppcmFpbXBvcnQuanMiLCJ3ZWJwYWNrOi8vLy4vYnVpbGQvc3JjL2FjdGlvbnMvY3JlYXRlLWFzYW5haW1wb3J0LmpzIiwid2VicGFjazovLy8uL2J1aWxkL3NyYy9hY3Rpb25zL3ppcC1hc3Nlc3NtZW50LmpzIl0sInNvdXJjZXNDb250ZW50IjpbImNvbnN0IF9fV0VCUEFDS19OQU1FU1BBQ0VfT0JKRUNUX18gPSByZXF1aXJlKFwiQGF3cy1zZGsvY2xpZW50LXN0c1wiKTsiLCJjb25zdCBfX1dFQlBBQ0tfTkFNRVNQQUNFX09CSkVDVF9fID0gcmVxdWlyZShcIkBhd3Mtc2RrL2NsaWVudC1vcmdhbml6YXRpb25zXCIpOyIsImNvbnN0IF9fV0VCUEFDS19OQU1FU1BBQ0VfT0JKRUNUX18gPSByZXF1aXJlKFwiQGF3cy1zZGsvY2xpZW50LWlhbVwiKTsiLCJjb25zdCBfX1dFQlBBQ0tfTkFNRVNQQUNFX09CSkVDVF9fID0gcmVxdWlyZShcIkBhd3Mtc2RrL2NsaWVudC1jbG91ZGZvcm1hdGlvblwiKTsiLCJjb25zdCBfX1dFQlBBQ0tfTkFNRVNQQUNFX09CSkVDVF9fID0gcmVxdWlyZShcIkBhd3Mtc2RrL2NsaWVudC1zc28tYWRtaW5cIik7IiwiY29uc3QgX19XRUJQQUNLX05BTUVTUEFDRV9PQkpFQ1RfXyA9IHJlcXVpcmUoXCJAYXdzLXNkay9jbGllbnQtZWMyXCIpOyIsImNvbnN0IF9fV0VCUEFDS19OQU1FU1BBQ0VfT0JKRUNUX18gPSByZXF1aXJlKFwiQGF3cy1zZGsvY2xpZW50LWNsb3VkdHJhaWxcIik7IiwiY29uc3QgX19XRUJQQUNLX05BTUVTUEFDRV9PQkpFQ1RfXyA9IHJlcXVpcmUoXCJAYXdzLXNkay9jbGllbnQtY29uZmlnLXNlcnZpY2VcIik7IiwiY29uc3QgX19XRUJQQUNLX05BTUVTUEFDRV9PQkpFQ1RfXyA9IHJlcXVpcmUoXCJAYXdzLXNkay9jbGllbnQtY29udHJvbHRvd2VyXCIpOyIsImNvbnN0IF9fV0VCUEFDS19OQU1FU1BBQ0VfT0JKRUNUX18gPSByZXF1aXJlKFwiQGF3cy1zZGsvY2xpZW50LWNvc3QtYW5kLXVzYWdlLXJlcG9ydC1zZXJ2aWNlXCIpOyIsImNvbnN0IF9fV0VCUEFDS19OQU1FU1BBQ0VfT0JKRUNUX18gPSByZXF1aXJlKFwibm9kZTpjb25zb2xlXCIpOyIsImNvbnN0IF9fV0VCUEFDS19OQU1FU1BBQ0VfT0JKRUNUX18gPSByZXF1aXJlKFwibm9kZTpzdHJlYW1cIik7IiwiY29uc3QgX19XRUJQQUNLX05BTUVTUEFDRV9PQkpFQ1RfXyA9IHJlcXVpcmUoXCJmc1wiKTsiLCJpbXBvcnQgeyBDb25zb2xlIH0gZnJvbSAnbm9kZTpjb25zb2xlJztcbmltcG9ydCB7IFRyYW5zZm9ybSB9IGZyb20gJ25vZGU6c3RyZWFtJztcbmltcG9ydCAqIGFzIGZzIGZyb20gJ2ZzJztcbmNvbnN0IHRzID0gbmV3IFRyYW5zZm9ybSh7IHRyYW5zZm9ybShjaHVuaywgZW5jLCBjYikgeyBjYihudWxsLCBjaHVuayk7IH0gfSk7XG5jb25zdCBsb2dnZXIgPSBuZXcgQ29uc29sZSh7IHN0ZG91dDogdHMgfSk7XG5mdW5jdGlvbiBnZXRUYWJsZShkYXRhKSB7XG4gICAgbG9nZ2VyLnRhYmxlKGRhdGEpO1xuICAgIHJldHVybiAodHMucmVhZCgpIHx8ICcnKS50b1N0cmluZygpO1xufVxuYXN5bmMgZnVuY3Rpb24gY3JlYXRlUmVwb3J0KGFzc2Vzc21lbnQpIHtcbiAgICBsZXQgdGFza3MgPSBbXTtcbiAgICBsZXQgZGF0ZVRpbWUgPSBuZXcgRGF0ZSgpO1xuICAgIGNvbnN0IHJlcG9ydEZpbGUgPSBcIi4vY2ZhdC50eHRcIjtcbiAgICBsZXQgcmVwb3J0ID0gXCJDbG91ZCBGb3VuZGF0aW9uIEFzc2Vzc21lbnQgVG9vbFwiO1xuICAgIHJlcG9ydCArPSBgXFxuR2VuZXJhdGVkIG9uOiAke2RhdGVUaW1lLnRvVVRDU3RyaW5nKCl9IFxcblxcbmA7XG4gICAgbGV0IHNjb3JlID0gMDtcbiAgICBsZXQgdG90YWxSZXF1aXJlZExvZSA9IDA7XG4gICAgbGV0IHRvdGFsU2NvcmUgPSAwO1xuICAgIGxldCBjZmF0U3RhdHVzID0gXCJDT01QTEVURVwiO1xuICAgIGlmIChhc3Nlc3NtZW50LmNmYXRDaGVja3MgJiYgYXNzZXNzbWVudC5jZmF0Q2hlY2tzLmxlbmd0aCA+IDApIHtcbiAgICAgICAgcmVwb3J0ICs9IGBcXG5JbmNvbXBsZXRlIFJlcXVpcmVtZW50czpgO1xuICAgICAgICBmb3IgKGNvbnN0IGNoZWNrIG9mIGFzc2Vzc21lbnQuY2ZhdENoZWNrcykge1xuICAgICAgICAgICAgdG90YWxTY29yZSArPSBjaGVjay53ZWlnaHQ7XG4gICAgICAgICAgICBpZiAoY2hlY2sucmVxdWlyZWQgPT09IHRydWUgJiYgY2hlY2suc3RhdHVzID09PSAnaW5jb21wbGV0ZScpIHtcbiAgICAgICAgICAgICAgICByZXBvcnQgKz0gYFxcbiAgICBJTkNPTVBMRVRFOiAke2NoZWNrLmNoZWNrfWA7XG4gICAgICAgICAgICAgICAgdG90YWxSZXF1aXJlZExvZSArPSBjaGVjay5sb2U7XG4gICAgICAgICAgICAgICAgY2ZhdFN0YXR1cyA9IFwiSU5DT01QTEVURVwiO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGNoZWNrLnN0YXR1cyA9PT0gJ2NvbXBsZXRlJykge1xuICAgICAgICAgICAgICAgIHNjb3JlICs9IGNoZWNrLndlaWdodDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXBvcnQgKz0gYFxcblxcbj09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxcbmA7XG4gICAgICAgIHJlcG9ydCArPSBgXFxuRm91bmRhdGlvbiBTdGF0dXM6ICR7Y2ZhdFN0YXR1c31gO1xuICAgICAgICBpZiAoY2ZhdFN0YXR1cyA9PT0gXCJJTkNPTVBMRVRFXCIpIHtcbiAgICAgICAgICAgIHJlcG9ydCArPSBgXFxuRXN0aW1hdGUgb2YgUmVxdWlyZWQgTGV2ZWwgb2YgRWZmb3J0IChMT0UpOiAke3RvdGFsUmVxdWlyZWRMb2V9IGhvdXJzYDtcbiAgICAgICAgfVxuICAgICAgICByZXBvcnQgKz0gYFxcbkNGQVQgU2NvcmU6ICR7c2NvcmV9IG91dCBvZiAke3RvdGFsU2NvcmV9YDtcbiAgICAgICAgcmVwb3J0ICs9IGBcXG5cXG49PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cXG5gO1xuICAgICAgICByZXBvcnQgKz0gYFxcbkZvdW5kYXRpb24gQ2hlY2tzOlxcbmA7XG4gICAgICAgIGlmIChhc3Nlc3NtZW50LmNmYXRDaGVja3MgJiYgYXNzZXNzbWVudC5jZmF0Q2hlY2tzLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgIGNvbnN0IHN0clRhYmxlID0gZ2V0VGFibGUoYXNzZXNzbWVudC5jZmF0Q2hlY2tzKTtcbiAgICAgICAgICAgIHJlcG9ydCArPSBgJHtzdHJUYWJsZX1gO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJlcG9ydCArPSBgXFxuXFxuU3RhcnQgRGV0YWlsZWQgUmVwb3J0OlxcblxcbmA7XG4gICAgcmVwb3J0ICs9IGBcXG4qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKipgO1xuICAgIHJlcG9ydCArPSBgXFxuICAgICAgICAgICAgICAgICAgIE1BTkFHRU1FTlQgQUNDT1VOVGA7XG4gICAgcmVwb3J0ICs9IGBcXG4qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKipgO1xuICAgIHJlcG9ydCArPSBgXFxuXFxuQVdTIEFDQ09VTlQgVFlQRVxcbmA7XG4gICAgcmVwb3J0ICs9IGBcXG4gIElzIGluIEFXUyBPcmdhbml6YXRpb246ICR7YXNzZXNzbWVudC5vcmdhbml6YXRpb25EZXBsb3l9YDtcbiAgICByZXBvcnQgKz0gYFxcbiAgQXNzZXNzaW5nIEFXUyBNYW5hZ2VtZW50IEFjY291bnQ6ICR7YXNzZXNzbWVudC5tYW5hZ2VtZW50QWNjb3VudH1gO1xuICAgIHJlcG9ydCArPSBgXFxuXFxuSUFNIFVTRVJTIENIRUNLXFxuYDtcbiAgICBpZiAoYXNzZXNzbWVudC5pYW1Vc2VyQ2hlY2tzICYmIGFzc2Vzc21lbnQuaWFtVXNlckNoZWNrcy5sZW5ndGggPiAwKSB7XG4gICAgICAgIGZvciAoY29uc3QgaWFtVXNlciBvZiBhc3Nlc3NtZW50LmlhbVVzZXJDaGVja3MpIHtcbiAgICAgICAgICAgIHJlcG9ydCArPSBgXFxuICBJQU0gVXNlcjogJHtpYW1Vc2VyLnVzZXJOYW1lfWA7XG4gICAgICAgICAgICBpZiAoaWFtVXNlci5hY2Nlc3NLZXlJZCkge1xuICAgICAgICAgICAgICAgIHJlcG9ydCArPSBgXFxuICAgIFVzZXIgQVBJIEtleSBJRDogJHtpYW1Vc2VyLmFjY2Vzc0tleUlkfWA7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXBvcnQgKz0gYFxcbmA7XG4gICAgICAgIH1cbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIHJlcG9ydCArPSBgXFxuICBObyBJQU0gVXNlcnMgZm91bmQuYDtcbiAgICB9XG4gICAgcmVwb3J0ICs9IGBcXG5cXG5FQzIgSU5TVEFOQ0UgQ0hFQ0tcXG5gO1xuICAgIGlmIChhc3Nlc3NtZW50LmVjMkNoZWNrcyAmJiBhc3Nlc3NtZW50LmVjMkNoZWNrcy5maW5kKHBhcmFtID0+IHBhcmFtLmVjMkZvdW5kID09PSB0cnVlKSkge1xuICAgICAgICBmb3IgKGNvbnN0IGVjMiBvZiBhc3Nlc3NtZW50LmVjMkNoZWNrcykge1xuICAgICAgICAgICAgaWYgKGVjMi5lYzJGb3VuZCkge1xuICAgICAgICAgICAgICAgIHJlcG9ydCArPSBgXFxuICAke2VjMi5yZWdpb259IC0gZm91bmQgRUMyIEluc3RhbmNlKHMpLmA7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIHJlcG9ydCArPSBgXFxuICBObyBFQzIgaW5zdGFuY2VzIGZvdW5kLmA7XG4gICAgfVxuICAgIHJlcG9ydCArPSBgXFxuXFxuVlBDIENIRUNLXFxuYDtcbiAgICBpZiAoYXNzZXNzbWVudC52cGNDaGVja3MgJiYgYXNzZXNzbWVudC52cGNDaGVja3MubGVuZ3RoID4gMCkge1xuICAgICAgICBmb3IgKGNvbnN0IHZwY0ZpbmQgb2YgYXNzZXNzbWVudC52cGNDaGVja3MpIHtcbiAgICAgICAgICAgIGlmICh2cGNGaW5kLnZwY0ZvdW5kKSB7XG4gICAgICAgICAgICAgICAgcmVwb3J0ICs9IGBcXG4gICR7dnBjRmluZC5yZWdpb259IC0gZm91bmQgVlBDKHMpLmA7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIHJlcG9ydCArPSBgXFxuICBObyBWUENzIGZvdW5kLmA7XG4gICAgfVxuICAgIHJlcG9ydCArPSBgXFxuXFxuQVdTIENPTkZJRyBDSEVDS1xcbmA7XG4gICAgaWYgKGFzc2Vzc21lbnQuY29uZmlnRGV0YWlscyAmJiBhc3Nlc3NtZW50LmNvbmZpZ0RldGFpbHMuZmluZChwYXJhbSA9PiBwYXJhbS5jb25maWdSZWNvcmRlckZvdW5kID09PSB0cnVlKSkge1xuICAgICAgICBmb3IgKGNvbnN0IGNvbmZpZ0ZpbmQgb2YgYXNzZXNzbWVudC5jb25maWdEZXRhaWxzKSB7XG4gICAgICAgICAgICBpZiAoY29uZmlnRmluZC5jb25maWdSZWNvcmRlckZvdW5kKSB7XG4gICAgICAgICAgICAgICAgcmVwb3J0ICs9IGBcXG4gICR7Y29uZmlnRmluZC5yZWdpb259IC0gQ29uZmlnIFJlY29yZGVyIGZvdW5kYDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChjb25maWdGaW5kLmNvbmZpZ0RlbGl2ZXJ5Q2hhbm5lbEZvdW5kKSB7XG4gICAgICAgICAgICAgICAgcmVwb3J0ICs9IGBcXG4gICR7Y29uZmlnRmluZC5yZWdpb259IC0gQ29uZmlnIERlbGl2ZXJ5IENoYW5uZWwgZm91bmRgO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICByZXBvcnQgKz0gYFxcbiAgTm8gQVdTIENvbmZpZyByZXNvdXJjZSBkaXNjb3ZlcmVkYDtcbiAgICB9XG4gICAgcmVwb3J0ICs9IGBcXG5cXG5NQU5BR0VNRU5UIEFDQ09VTlQgVEFTS1M6YDtcbiAgICBjb25zdCBtYUNhdGVnb3J5ID0gXCJNYW5hZ2VtZW50IEFjY291bnRcIjtcbiAgICBpZiAoYXNzZXNzbWVudC5pYW1Vc2VyQ2hlY2tzICYmIGFzc2Vzc21lbnQuaWFtVXNlckNoZWNrcy5sZW5ndGggPiAwKSB7XG4gICAgICAgIGZvciAoY29uc3QgaWFtVXNlciBvZiBhc3Nlc3NtZW50LmlhbVVzZXJDaGVja3MpIHtcbiAgICAgICAgICAgIGxldCBpYW1UYXNrID0geyB0aXRsZTogYFJlbW92ZSBJQU0gdXNlciAke2lhbVVzZXIudXNlck5hbWV9YCwgY2F0ZWdvcnk6IG1hQ2F0ZWdvcnksIGRldGFpbDogYFJldmlldyBhbmQgZGV0ZXJtaW5lIGlmIElBTSB1c2VyICR7aWFtVXNlci51c2VyTmFtZX0gY2FuIGJlIGRlbGV0ZWQuYCB9O1xuICAgICAgICAgICAgY29uc3QgbWVzc2FnZSA9IGAke2lhbVRhc2sudGl0bGV9IC0gJHtpYW1UYXNrLmNhdGVnb3J5fSAtICR7aWFtVGFzay5kZXRhaWx9YDtcbiAgICAgICAgICAgIHRhc2tzLnB1c2goaWFtVGFzayk7XG4gICAgICAgICAgICByZXBvcnQgKz0gYFxcbiAgJHttZXNzYWdlfWA7XG4gICAgICAgICAgICBpZiAoaWFtVXNlci5hY2Nlc3NLZXlJZCkge1xuICAgICAgICAgICAgICAgIGxldCBpYW1BcGlUYXNrID0geyB0aXRsZTogYFJlbW92ZSBJQU0gdXNlciAke2lhbVVzZXIudXNlck5hbWV9IEFQSSBrZXkgJHtpYW1Vc2VyLmFjY2Vzc0tleUlkfSBgLCBjYXRlZ29yeTogbWFDYXRlZ29yeSwgZGV0YWlsOiBgUmV2aWV3IGFuZCBkZXRlcm1pbmUgaWYgSUFNIHVzZXIgQVBJIGtleSAke2lhbVVzZXIuYWNjZXNzS2V5SWR9IGZvciAke2lhbVVzZXIudXNlck5hbWV9IGNhbiBiZSByZW1vdmVkLmAgfTtcbiAgICAgICAgICAgICAgICBjb25zdCBtZXNzYWdlID0gYCR7aWFtQXBpVGFzay50aXRsZX0gLSAke2lhbUFwaVRhc2suY2F0ZWdvcnl9IC0gJHtpYW1BcGlUYXNrLmRldGFpbH1gO1xuICAgICAgICAgICAgICAgIHJlcG9ydCArPSBgXFxuICAke21lc3NhZ2V9YDtcbiAgICAgICAgICAgICAgICB0YXNrcy5wdXNoKGlhbUFwaVRhc2spO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICAgIGlmIChhc3Nlc3NtZW50LmVjMkNoZWNrcyAmJiBhc3Nlc3NtZW50LmVjMkNoZWNrcy5maW5kKHBhcmFtID0+IHBhcmFtLmVjMkZvdW5kID09PSB0cnVlKSkge1xuICAgICAgICBmb3IgKGNvbnN0IGVjMiBvZiBhc3Nlc3NtZW50LmVjMkNoZWNrcykge1xuICAgICAgICAgICAgaWYgKGVjMi5lYzJGb3VuZCAmJiBlYzIucmVnaW9uKSB7XG4gICAgICAgICAgICAgICAgbGV0IGVjMlRhc2sgPSB7IHRpdGxlOiBgRGVsZXRlIEVDMiBpbnN0YW5jZSBpbiAke2VjMi5yZWdpb259YCwgY2F0ZWdvcnk6IG1hQ2F0ZWdvcnksIGRldGFpbDogYERlbGV0ZSBhbnkgdW5uZWNlc3NhcnkgRUMyIGluc3RhbmNlIGluICR7ZWMyLnJlZ2lvbn1gIH07XG4gICAgICAgICAgICAgICAgY29uc3QgbWVzc2FnZSA9IGAke2VjMlRhc2sudGl0bGV9IC0gJHtlYzJUYXNrLmNhdGVnb3J5fSAtICR7ZWMyVGFzay5kZXRhaWx9YDtcbiAgICAgICAgICAgICAgICByZXBvcnQgKz0gYFxcbiAgJHttZXNzYWdlfWA7XG4gICAgICAgICAgICAgICAgdGFza3MucHVzaChlYzJUYXNrKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbiAgICBpZiAoYXNzZXNzbWVudC52cGNDaGVja3MgJiYgYXNzZXNzbWVudC52cGNDaGVja3MubGVuZ3RoID4gMCkge1xuICAgICAgICBmb3IgKGNvbnN0IHZwY0ZpbmQgb2YgYXNzZXNzbWVudC52cGNDaGVja3MpIHtcbiAgICAgICAgICAgIGlmICh2cGNGaW5kLnZwY0ZvdW5kICYmIHZwY0ZpbmQucmVnaW9uKSB7XG4gICAgICAgICAgICAgICAgbGV0IHZwY1Rhc2sgPSB7IHRpdGxlOiBgRGVsZXRlIFZQQyBpbiAke3ZwY0ZpbmQucmVnaW9ufWAsIGNhdGVnb3J5OiBtYUNhdGVnb3J5LCBkZXRhaWw6IGBEZWxldGUgYW55IHVubmVjZXNzYXJ5IFZQQyBpbiAke3ZwY0ZpbmQucmVnaW9ufSB0byBpbmNsdWRlIHRoZSBkZWZhdWx0IFZQQy5gIH07XG4gICAgICAgICAgICAgICAgY29uc3QgbWVzc2FnZSA9IGAke3ZwY1Rhc2sudGl0bGV9IC0gJHt2cGNUYXNrLmNhdGVnb3J5fSAtICR7dnBjVGFzay5kZXRhaWx9YDtcbiAgICAgICAgICAgICAgICByZXBvcnQgKz0gYFxcbiAgJHttZXNzYWdlfWA7XG4gICAgICAgICAgICAgICAgdGFza3MucHVzaCh2cGNUYXNrKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbiAgICByZXBvcnQgKz0gYFxcblxcbioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKmA7XG4gICAgcmVwb3J0ICs9IGBcXG4gICAgICAgICAgICAgICAgICAgIEdPVkVSTkFOQ0VgO1xuICAgIHJlcG9ydCArPSBgXFxuKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqYDtcbiAgICByZXBvcnQgKz0gYFxcblxcbkFXUyBPUkdBTklaQVRJT04gUE9MSUNZIFRZUEVTXFxuYDtcbiAgICByZXBvcnQgKz0gYFxcbiAgU2VydmljZSBDb250cm9sIFBvbGljaWVzIChTQ1ApIGVuYWJsZWQ6ICR7YXNzZXNzbWVudC5zY3BFbmFibGVkfWA7XG4gICAgcmVwb3J0ICs9IGBcXG4gIFRhZyBQb2xpY2llcyBlbmFibGVkOiAke2Fzc2Vzc21lbnQudGFnUG9saWN5RW5hYmxlZH1gO1xuICAgIHJlcG9ydCArPSBgXFxuICBCYWNrdXAgUG9saWNpZXMgZW5hYmxlZDogJHthc3Nlc3NtZW50LmJhY2t1cFBvbGljeUVuYWJsZWR9YDtcbiAgICByZXBvcnQgKz0gYFxcblxcbkFXUyBPUkdBTklaQVRJT04gQ0xPVURGT1JNQVRJT05cXG5gO1xuICAgIHJlcG9ydCArPSBgXFxuICBBV1MgQ2xvdWRGb3JtYXRpb24gT3JnYW5pemF0aW9uIHN0YWNrIHNldHMgc3RhdHVzIDogJHthc3Nlc3NtZW50Lm9yZ0Nsb3VkRm9ybWF0aW9uU3RhdHVzfWA7XG4gICAgcmVwb3J0ICs9IGBcXG5cXG5DTE9VRFRSQUlMIENIRUNLXFxuYDtcbiAgICBpZiAoYXNzZXNzbWVudC5jbG91ZFRyYWlsRGV0YWlscyAmJiBhc3Nlc3NtZW50LmNsb3VkVHJhaWxEZXRhaWxzLmxlbmd0aCA+IDApIHtcbiAgICAgICAgZm9yIChjb25zdCBjdEZpbmQgb2YgYXNzZXNzbWVudC5jbG91ZFRyYWlsRGV0YWlscykge1xuICAgICAgICAgICAgaWYgKGN0RmluZC50cmFpbEZvdW5kKSB7XG4gICAgICAgICAgICAgICAgcmVwb3J0ICs9IGBcXG4gIENsb3VkVHJhaWwgZm91bmQgaW4gJHtjdEZpbmQucmVnaW9ufWA7XG4gICAgICAgICAgICAgICAgcmVwb3J0ICs9IGBcXG4gICAgSXMgT3JnYW5pemF0aW9uIFRyYWlsOiAke2N0RmluZC5pc09yZ1RyYWlsfWA7XG4gICAgICAgICAgICAgICAgcmVwb3J0ICs9IGBcXG4gICAgSXMgTXVsdGlSZWdpb246ICR7Y3RGaW5kLmlzTXVsdGlSZWdpb259YDtcbiAgICAgICAgICAgICAgICByZXBvcnQgKz0gYFxcbmA7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIHJlcG9ydCArPSBgXFxuICBObyBBV1MgQ2xvdWRUcmFpbCByZXNvdXJjZSBkaXNjb3ZlcmVkYDtcbiAgICB9XG4gICAgcmVwb3J0ICs9IGBcXG5cXG5HT1ZFUk5BTkNFIFNFUlZJQ0VTIEVOQUJMRUQgSU4gQVdTIE9SR0FOSVpBVElPTjpcXG5gO1xuICAgIGlmIChhc3Nlc3NtZW50Lm9yZ1NlcnZpY2VzKSB7XG4gICAgICAgIGlmIChhc3Nlc3NtZW50Lm9yZ1NlcnZpY2VzLmZpbmQocGFyYW0gPT4gcGFyYW0uc2VydmljZSA9PT0gJ2Nsb3VkdHJhaWwuYW1hem9uYXdzLmNvbScpKSB7XG4gICAgICAgICAgICByZXBvcnQgKz0gYFxcbiAgQVdTIENsb3VkVHJhaWxgO1xuICAgICAgICB9XG4gICAgICAgIGlmIChhc3Nlc3NtZW50Lm9yZ1NlcnZpY2VzLmZpbmQocGFyYW0gPT4gcGFyYW0uc2VydmljZSA9PT0gJ2NvbmZpZy5hbWF6b25hd3MuY29tJykpIHtcbiAgICAgICAgICAgIHJlcG9ydCArPSBgXFxuICBBV1MgQ29uZmlnYDtcbiAgICAgICAgfVxuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgcmVwb3J0ICs9IGBcXG4gIE5vIGdvdmVybmFuY2Ugc2VydmljZSBlbmFibGVkYDtcbiAgICB9XG4gICAgLy8vLy8gU0VUIFRIRSBCQUNLTE9HIFRBU0sgRk9SIEdPVkVSTkFOQ0UgLy8vLy9cbiAgICByZXBvcnQgKz0gYFxcblxcbkdPVkVSTkFOQ0UgVEFTS1M6YDtcbiAgICBjb25zdCBnb3ZDYXRlZ29yeSA9IFwiR292ZXJuYW5jZVwiO1xuICAgIGlmICghYXNzZXNzbWVudC5vcmdTZXJ2aWNlcyB8fCAhYXNzZXNzbWVudC5vcmdTZXJ2aWNlcy5maW5kKHBhcmFtID0+IHBhcmFtLnNlcnZpY2UgPT09ICdjbG91ZHRyYWlsLmFtYXpvbmF3cy5jb20nKSkge1xuICAgICAgICBjb25zdCBjdE9yZ1NlcnZpY2VUYXNrID0geyB0aXRsZTogJ0VuYWJsZSBBV1MgQ2xvdWRUcmFpbCcsIGNhdGVnb3J5OiBnb3ZDYXRlZ29yeSwgZGV0YWlsOiBgRW5hYmxlIEFXUyBDbG91ZFRyYWlsIGluIEFXUyBPcmdhbml6YXRpb25gIH07XG4gICAgICAgIHRhc2tzLnB1c2goY3RPcmdTZXJ2aWNlVGFzayk7XG4gICAgICAgIGNvbnN0IG1lc3NhZ2UgPSBgJHtjdE9yZ1NlcnZpY2VUYXNrLnRpdGxlfSAtICR7Y3RPcmdTZXJ2aWNlVGFzay5jYXRlZ29yeX0gLSAke2N0T3JnU2VydmljZVRhc2suZGV0YWlsfWA7XG4gICAgICAgIHJlcG9ydCArPSBgXFxuICAke21lc3NhZ2V9YDtcbiAgICB9XG4gICAgaWYgKCFhc3Nlc3NtZW50Lm9yZ1NlcnZpY2VzIHx8ICFhc3Nlc3NtZW50Lm9yZ1NlcnZpY2VzLmZpbmQocGFyYW0gPT4gcGFyYW0uc2VydmljZSA9PT0gJ2NvbmZpZy5hbWF6b25hd3MuY29tJykpIHtcbiAgICAgICAgY29uc3QgY29uZmlnT3JnU2VydmljZVRhc2sgPSB7IHRpdGxlOiAnRW5hYmxlIEFXUyBDb25maWcnLCBjYXRlZ29yeTogZ292Q2F0ZWdvcnksIGRldGFpbDogYEVuYWJsZSBBV1MgQ29uZmlnIGluIEFXUyBPcmdhbml6YXRpb25gIH07XG4gICAgICAgIHRhc2tzLnB1c2goY29uZmlnT3JnU2VydmljZVRhc2spO1xuICAgICAgICBjb25zdCBtZXNzYWdlID0gYCR7Y29uZmlnT3JnU2VydmljZVRhc2sudGl0bGV9IC0gJHtjb25maWdPcmdTZXJ2aWNlVGFzay5jYXRlZ29yeX0gLSAke2NvbmZpZ09yZ1NlcnZpY2VUYXNrLmRldGFpbH1gO1xuICAgICAgICByZXBvcnQgKz0gYFxcbiAgJHttZXNzYWdlfWA7XG4gICAgfVxuICAgIGlmICghYXNzZXNzbWVudC5zY3BFbmFibGVkKSB7XG4gICAgICAgIGNvbnN0IHNjcEVuYWJsZWRUYXNrID0geyB0aXRsZTogJ0VuYWJsZSBTQ1AnLCBjYXRlZ29yeTogZ292Q2F0ZWdvcnksIGRldGFpbDogYEVuYWJsZSBTQ1AgaW4gQVdTIE9yZ2FuaXphdGlvbmAgfTtcbiAgICAgICAgdGFza3MucHVzaChzY3BFbmFibGVkVGFzayk7XG4gICAgICAgIGNvbnN0IG1lc3NhZ2UgPSBgJHtzY3BFbmFibGVkVGFzay50aXRsZX0gLSAke3NjcEVuYWJsZWRUYXNrLmNhdGVnb3J5fSAtICR7c2NwRW5hYmxlZFRhc2suZGV0YWlsfWA7XG4gICAgICAgIHJlcG9ydCArPSBgXFxuICAke21lc3NhZ2V9YDtcbiAgICB9XG4gICAgaWYgKCFhc3Nlc3NtZW50LnRhZ1BvbGljeUVuYWJsZWQpIHtcbiAgICAgICAgbGV0IHRhZ1BvbGljeUVuYWJsZWRUYXNrID0geyB0aXRsZTogJ0VuYWJsZSBUYWcgUG9saWN5JywgY2F0ZWdvcnk6IGdvdkNhdGVnb3J5LCBkZXRhaWw6IGBFbmFibGUgVGFnIFBvbGljeSBpbiBBV1MgT3JnYW5pemF0aW9uYCB9O1xuICAgICAgICB0YXNrcy5wdXNoKHRhZ1BvbGljeUVuYWJsZWRUYXNrKTtcbiAgICAgICAgY29uc3QgbWVzc2FnZSA9IGAke3RhZ1BvbGljeUVuYWJsZWRUYXNrLnRpdGxlfSAtICR7dGFnUG9saWN5RW5hYmxlZFRhc2suY2F0ZWdvcnl9IC0gJHt0YWdQb2xpY3lFbmFibGVkVGFzay5kZXRhaWx9YDtcbiAgICAgICAgcmVwb3J0ICs9IGBcXG4gICR7bWVzc2FnZX1gO1xuICAgIH1cbiAgICBpZiAoIWFzc2Vzc21lbnQuYmFja3VwUG9saWN5RW5hYmxlZCkge1xuICAgICAgICBsZXQgYmFja3VwUG9saWN5RW5hYmxlZFRhc2sgPSB7IHRpdGxlOiAnRW5hYmxlIEJhY2t1cCBQb2xpY3knLCBjYXRlZ29yeTogZ292Q2F0ZWdvcnksIGRldGFpbDogYEVuYWJsZSBCYWNrdXAgUG9saWN5IGluIEFXUyBPcmdhbml6YXRpb25gIH07XG4gICAgICAgIHRhc2tzLnB1c2goYmFja3VwUG9saWN5RW5hYmxlZFRhc2spO1xuICAgICAgICBjb25zdCBtZXNzYWdlID0gYCR7YmFja3VwUG9saWN5RW5hYmxlZFRhc2sudGl0bGV9IC0gJHtiYWNrdXBQb2xpY3lFbmFibGVkVGFzay5jYXRlZ29yeX0gLSAke2JhY2t1cFBvbGljeUVuYWJsZWRUYXNrLmRldGFpbH1gO1xuICAgICAgICByZXBvcnQgKz0gYFxcbiAgJHttZXNzYWdlfWA7XG4gICAgfVxuICAgIHJlcG9ydCArPSBgXFxuXFxuKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqYDtcbiAgICByZXBvcnQgKz0gYFxcbiAgICAgICAgICAgICAgICBGSU5BTkNJQUwgTUFOQUdFTUVOVGA7XG4gICAgcmVwb3J0ICs9IGBcXG4qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKipgO1xuICAgIHJlcG9ydCArPSBgXFxuXFxuTGVnYWN5IENVUmA7XG4gICAgcmVwb3J0ICs9IGBcXG4gIElzIGxlZ2FjeSBDVVIgc2V0dXA6ICR7YXNzZXNzbWVudC5pc0xlZ2FjeUN1clNldHVwfWA7XG4gICAgcmVwb3J0ICs9IGBcXG5cXG5DTE9VRCBGSU5BTkNJQUwgTUFOQUdFTUVOVCBUQVNLUzpgO1xuICAgIGNvbnN0IGZpbkNhdGVnb3J5ID0gXCJDbG91ZCBGaW5hbmNpYWwgTWFuYWdlbWVudFwiO1xuICAgIGlmICghYXNzZXNzbWVudC5pc0xlZ2FjeUN1clNldHVwKSB7XG4gICAgICAgIGNvbnN0IGxlZ2FjeUN1clNldHVwVGFzayA9IHsgdGl0bGU6ICdTZXR1cCBsZWdhY3kgQ1VSJywgY2F0ZWdvcnk6IGZpbkNhdGVnb3J5LCBkZXRhaWw6IGBTZXR1cCBsZWdhY3kgQ1VSIGluIEFXUyBPcmdhbml6YXRpb25gIH07XG4gICAgICAgIHRhc2tzLnB1c2gobGVnYWN5Q3VyU2V0dXBUYXNrKTtcbiAgICAgICAgY29uc3QgbWVzc2FnZSA9IGAke2xlZ2FjeUN1clNldHVwVGFzay50aXRsZX0gLSAke2xlZ2FjeUN1clNldHVwVGFzay5jYXRlZ29yeX0gLSAke2xlZ2FjeUN1clNldHVwVGFzay5kZXRhaWx9YDtcbiAgICAgICAgcmVwb3J0ICs9IGBcXG4gICR7bWVzc2FnZX1gO1xuICAgIH1cbiAgICByZXBvcnQgKz0gYFxcblxcbioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKmA7XG4gICAgcmVwb3J0ICs9IGBcXG4gICAgICAgICAgICAgICAgTVVMVEktQUNDT1VOVCBTVFJBVEVHWWA7XG4gICAgcmVwb3J0ICs9IGBcXG4qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKipgO1xuICAgIHJlcG9ydCArPSBgXFxuXFxuQVdTIE9SR0FOSVpBVElPTiBERVRBSUxTXFxuYDtcbiAgICByZXBvcnQgKz0gYFxcbiAgQVdTIE9yZ2FuaXphdGlvbiBJZDogJHthc3Nlc3NtZW50Lm9yZ0lkfWA7XG4gICAgcmVwb3J0ICs9IGBcXG4gIEFXUyBPcmdhbml6YXRpb24gQVJOOiAke2Fzc2Vzc21lbnQub3JnQXJufWA7XG4gICAgcmVwb3J0ICs9IGBcXG4gIEFXUyBPcmdhbml6YXRpb24gUm9vdCBPVSBJZDogJHthc3Nlc3NtZW50Lm9yZ1Jvb3RPdUlkfWA7XG4gICAgcmVwb3J0ICs9IGBcXG5cXG5BV1MgT1JHQU5JWkFUSU9OIENMT1VERk9STUFUSU9OXFxuYDtcbiAgICByZXBvcnQgKz0gYFxcbiAgQVdTIENsb3VkRm9ybWF0aW9uIE9yZ2FuaXphdGlvbiBzdGFjayBzZXRzIHN0YXR1cyA6ICR7YXNzZXNzbWVudC5vcmdDbG91ZEZvcm1hdGlvblN0YXR1c31gO1xuICAgIGxldCB0cmFuc2l0aW9uYWxGb3VuZCwgc3VzcGVuZGVkRm91bmQsIGluZnJhc3RydWN0dXJlRm91bmQgPSBmYWxzZTtcbiAgICBsZXQgd29ya2xvYWRzRm91bmQgPSBmYWxzZTtcbiAgICBsZXQgc2VjdXJpdHlGb3VuZCA9IGZhbHNlO1xuICAgIGlmIChhc3Nlc3NtZW50Lm9yZ1Jvb3RPdUlkKSB7XG4gICAgICAgIHJlcG9ydCArPSBgXFxuXFxuQVdTIE9SR0FOSVpBVElPTiBUT1AtTEVWRUwgT1JHQU5JWkFUSU9OIFVOSVRTXFxuYDtcbiAgICAgICAgcmVwb3J0ICs9IGBcXG4gIExpc3Qgb2YgT3JnYW5pemF0aW9uJ3MgdG9wLWxldmVsIE9VcyBhbmQgQVdTIGFjY291bnRzOmA7XG4gICAgICAgIGlmIChhc3Nlc3NtZW50Lm9yZ091SW5mbyAmJiBhc3Nlc3NtZW50Lm9yZ091SW5mby5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICBmb3IgKGNvbnN0IG91IG9mIGFzc2Vzc21lbnQub3JnT3VJbmZvKSB7XG4gICAgICAgICAgICAgICAgaWYgKG91Lm5hbWU/LnRvTG93ZXJDYXNlKCkgPT09ICdzdXNwZW5kZWQnKSB7XG4gICAgICAgICAgICAgICAgICAgIHN1c3BlbmRlZEZvdW5kID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKG91Lm5hbWU/LnRvTG93ZXJDYXNlKCkgPT09ICd0cmFuc2l0aW9uYWwnKSB7XG4gICAgICAgICAgICAgICAgICAgIHRyYW5zaXRpb25hbEZvdW5kID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKG91Lm5hbWU/LnRvTG93ZXJDYXNlKCkgPT09ICd3b3JrbG9hZHMnKSB7XG4gICAgICAgICAgICAgICAgICAgIHdvcmtsb2Fkc0ZvdW5kID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKG91Lm5hbWU/LnRvTG93ZXJDYXNlKCkgPT09ICdzZWN1cml0eScpIHtcbiAgICAgICAgICAgICAgICAgICAgc2VjdXJpdHlGb3VuZCA9IHRydWU7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmIChvdS5uYW1lPy50b0xvd2VyQ2FzZSgpID09PSAnaW5mcmFzdHJ1Y3R1cmUnKSB7XG4gICAgICAgICAgICAgICAgICAgIGluZnJhc3RydWN0dXJlRm91bmQgPSB0cnVlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXBvcnQgKz0gYFxcbiAgICBPcmdhbml6YXRpb25hbCBVbml0OiAke291Lm5hbWV9YDtcbiAgICAgICAgICAgICAgICByZXBvcnQgKz0gYFxcbiAgICAgIE9yZ2FuaXphdGlvbmFsIFVuaXQgSWQ6ICR7b3UuaWR9YDtcbiAgICAgICAgICAgICAgICBpZiAob3UuYWNjb3VudHMgJiYgb3UuYWNjb3VudHMubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgICAgICAgICByZXBvcnQgKz0gYFxcbiAgICAgIEFXUyBBY2NvdW50czpgO1xuICAgICAgICAgICAgICAgICAgICBmb3IgKGNvbnN0IGFjY291bnQgb2Ygb3UuYWNjb3VudHMpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlcG9ydCArPSBgXFxuICAgICAgICAke2FjY291bnQuTmFtZX1gO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHJlcG9ydCArPSBgXFxuYDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHJlcG9ydCArPSBgXFxuICAgICAgQVdTIEFjY291bnRzOiBOb25lYDtcbiAgICAgICAgICAgICAgICAgICAgcmVwb3J0ICs9IGBcXG5gO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHJlcG9ydCArPSBgXFxuICBObyB0b3AgbGV2ZWwgT1VzIGZvdW5kLmA7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmVwb3J0ICs9IGBcXG5cXG5BV1MgT1JHQU5JWkFUSU9OIE1FTUJFUiBBQ0NPVU5UU1xcbmA7XG4gICAgaWYgKGFzc2Vzc21lbnQub3JnTWVtYmVyQWNjb3VudHMgJiYgYXNzZXNzbWVudC5vcmdNZW1iZXJBY2NvdW50cy5sZW5ndGggPiAwKSB7XG4gICAgICAgIGZvciAoY29uc3QgbWVtYmVyQWNjb3VudCBvZiBhc3Nlc3NtZW50Lm9yZ01lbWJlckFjY291bnRzKSB7XG4gICAgICAgICAgICByZXBvcnQgKz0gYFxcbiAgQWNjb3VudDogJHttZW1iZXJBY2NvdW50LmFjY291bnROYW1lfWA7XG4gICAgICAgICAgICByZXBvcnQgKz0gYFxcbiAgQWNjb3VudCBFbWFpbDogJHttZW1iZXJBY2NvdW50LmFjY291bnRFbWFpbH1cXG5gO1xuICAgICAgICB9XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICByZXBvcnQgKz0gYE5vIG1lbWJlciBhY2NvdW50cyBmb3VuZCB3aGljaCBpcyBhbWF6aW5nIGFzIHRoaXMgaXMgcnVubmluZyBmcm9tIG9uZS5gO1xuICAgIH1cbiAgICByZXBvcnQgKz0gYFxcblxcbkFXUyBPUkdBTklaQVRJT04gRU5BQkxFRCBTRVJWSUNFU1xcbmA7XG4gICAgcmVwb3J0ICs9IGBcXG4gIFRoZSBmb2xsb3dpbmcgQVdTIFNlcnZpY2VzIGFyZSBlbmFibGVkIHdpdGhpbiB5b3VyIEFXUyBPcmdhbml6YXRpb246YDtcbiAgICBpZiAoYXNzZXNzbWVudC5vcmdTZXJ2aWNlcyAmJiBhc3Nlc3NtZW50Lm9yZ1NlcnZpY2VzLmxlbmd0aCA+IDApIHtcbiAgICAgICAgZm9yIChjb25zdCBvcmdTZXJ2aWNlIG9mIGFzc2Vzc21lbnQub3JnU2VydmljZXMpIHtcbiAgICAgICAgICAgIHJlcG9ydCArPSBgXFxuICAgICR7b3JnU2VydmljZS5zZXJ2aWNlfWA7XG4gICAgICAgIH1cbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIHJlcG9ydCArPSBgXFxuICAgIE5vIHRydXN0ZWQgYWNjZXNzIGVuYWJsZWQgaW4gdGhlIEFXUyBPcmdhbml6YXRpb25gO1xuICAgIH1cbiAgICBsZXQgaWRlbnRpdHlEZWxlZ2F0ZWQgPSBmYWxzZTtcbiAgICBsZXQgc2VjdXJpdHlIdWJEZWxlZ2F0ZWQgPSBmYWxzZTtcbiAgICBsZXQgZ3VhcmREdXR5RGVsZWdhdGVkID0gZmFsc2U7XG4gICAgbGV0IGNvbmZpZ0RlbGVnYXRlZCA9IGZhbHNlO1xuICAgIGxldCBpYW1BY2Nlc3NBbmFseXplckRlbGVnYXRlZCA9IGZhbHNlO1xuICAgIGxldCBzM1N0b3JhZ2VMZW5zRGVsZWdhdGVkID0gZmFsc2U7XG4gICAgbGV0IGlwYW1EZWxlZ2F0ZWQgPSBmYWxzZTtcbiAgICBsZXQgYWNjb3VudERlbGVnYXRlZCA9IGZhbHNlO1xuICAgIGxldCBiYWNrdXBEZWxlZ2F0ZWQgPSBmYWxzZTtcbiAgICByZXBvcnQgKz0gYFxcblxcbkFXUyBPUkdBTklaQVRJT04gSU5URUdSQVRFRCBTRVJWSUNFIFJFR0lTVEVSRUQgREVMRUdBVEVEIEFETUlOU1xcbmA7XG4gICAgaWYgKGFzc2Vzc21lbnQub3JnRGVsZWdhdGVkQWRtaW5BY2NvdW50cyAmJiBhc3Nlc3NtZW50Lm9yZ0RlbGVnYXRlZEFkbWluQWNjb3VudHMubGVuZ3RoID4gMCkge1xuICAgICAgICBmb3IgKGNvbnN0IGFjY291bnQgb2YgYXNzZXNzbWVudC5vcmdEZWxlZ2F0ZWRBZG1pbkFjY291bnRzKSB7XG4gICAgICAgICAgICByZXBvcnQgKz0gYFxcbiAgQWNjb3VudDogJHthY2NvdW50LmFjY291bnROYW1lfWA7XG4gICAgICAgICAgICBpZiAoYWNjb3VudC5zZXJ2aWNlcyAmJiBhY2NvdW50LnNlcnZpY2VzLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgICAgICByZXBvcnQgKz0gYFxcbiAgRGVsZWdhdGVkIFNlcnZpY2VzOmA7XG4gICAgICAgICAgICAgICAgZm9yIChjb25zdCBzcnYgb2YgYWNjb3VudC5zZXJ2aWNlcykge1xuICAgICAgICAgICAgICAgICAgICByZXBvcnQgKz0gYFxcbiAgICAke3Nydi5TZXJ2aWNlUHJpbmNpcGFsfWA7XG4gICAgICAgICAgICAgICAgICAgIGlmIChzcnYuU2VydmljZVByaW5jaXBhbCA9PT0gJ3NlY3VyaXR5aHViLmFtYXpvbmF3cy5jb20nKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBzZWN1cml0eUh1YkRlbGVnYXRlZCA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgaWYgKHNydi5TZXJ2aWNlUHJpbmNpcGFsID09PSAnZ3VhcmRkdXR5LmFtYXpvbmF3cy5jb20nKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBndWFyZER1dHlEZWxlZ2F0ZWQgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGlmIChzcnYuU2VydmljZVByaW5jaXBhbCA9PT0gJ3Nzby5hbWF6b25hd3MuY29tJykge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWRlbnRpdHlEZWxlZ2F0ZWQgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGlmIChzcnYuU2VydmljZVByaW5jaXBhbCA9PT0gJ2NvbmZpZy5hbWF6b25hd3MuY29tJykge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uZmlnRGVsZWdhdGVkID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBpZiAoc3J2LlNlcnZpY2VQcmluY2lwYWwgPT09ICdhY2Nlc3MtYW5hbHl6ZXIuYW1hem9uYXdzLmNvbScpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlhbUFjY2Vzc0FuYWx5emVyRGVsZWdhdGVkID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBpZiAoc3J2LlNlcnZpY2VQcmluY2lwYWwgPT09ICdzdG9yYWdlLWxlbnMuczMuYW1hem9uYXdzLmNvbScpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHMzU3RvcmFnZUxlbnNEZWxlZ2F0ZWQgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGlmIChzcnYuU2VydmljZVByaW5jaXBhbCA9PT0gJ2lwYW0uYW1hem9uYXdzLmNvbScpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlwYW1EZWxlZ2F0ZWQgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGlmIChzcnYuU2VydmljZVByaW5jaXBhbCA9PT0gJ2FjY291bnQuYW1hem9uYXdzLmNvbScpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGFjY291bnREZWxlZ2F0ZWQgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGlmIChzcnYuU2VydmljZVByaW5jaXBhbCA9PT0gJ2JhY2t1cC5hbWF6b25hd3MuY29tJykge1xuICAgICAgICAgICAgICAgICAgICAgICAgYmFja3VwRGVsZWdhdGVkID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJlcG9ydCArPSBgXFxuIGA7XG4gICAgICAgIH1cbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIHJlcG9ydCArPSBgXFxuICBObyBkZWxlZ2F0ZWQgYWRtaW4gYWNjb3VudHMgaW4gQVdTIE9yZ2FuaXphdGlvbmA7XG4gICAgfVxuICAgIHJlcG9ydCArPSBgXFxuXFxuTVVMVEktQUNDT1VOVCBTVFJBVEVHWSBUQVNLUzpgO1xuICAgIGxldCBtYXNDYXRlZ29yeSA9ICdNdWx0aS1BY2NvdW50IFN0cmF0ZWd5JztcbiAgICBjb25zdCBhY2NvdW50RW1haWxSZXZpZXdUYXNrID0geyB0aXRsZTogJ1JldmlldyBBY2NvdW50IEVtYWlsIEFkZHJlc3NlcycsIGNhdGVnb3J5OiBtYXNDYXRlZ29yeSwgZGV0YWlsOiBgUmV2aWV3IEFjY291bnQgRW1haWwgQWRkcmVzc2VzIGluIEFXUyBPcmdhbml6YXRpb25gIH07XG4gICAgY29uc3QgbWVzc2FnZSA9IGAke2FjY291bnRFbWFpbFJldmlld1Rhc2sudGl0bGV9IC0gJHthY2NvdW50RW1haWxSZXZpZXdUYXNrLmNhdGVnb3J5fSAtICR7YWNjb3VudEVtYWlsUmV2aWV3VGFzay5kZXRhaWx9YDtcbiAgICByZXBvcnQgKz0gYFxcbiAgJHttZXNzYWdlfWA7XG4gICAgaWYgKCFhc3Nlc3NtZW50LnNjcEVuYWJsZWQpIHtcbiAgICAgICAgY29uc3Qgc2NwRW5hYmxlZFRhc2sgPSB7IHRpdGxlOiAnRW5hYmxlIFNlcnZpY2UgQ29udHJvbCBQb2xpY3knLCBjYXRlZ29yeTogbWFzQ2F0ZWdvcnksIGRldGFpbDogYEVuYWJsZSBTZXJ2aWNlIENvbnRyb2wgUG9saWN5IGluIEFXUyBPcmdhbml6YXRpb25gIH07XG4gICAgICAgIHRhc2tzLnB1c2goc2NwRW5hYmxlZFRhc2spO1xuICAgICAgICBjb25zdCBtZXNzYWdlID0gYCR7c2NwRW5hYmxlZFRhc2sudGl0bGV9IC0gJHtzY3BFbmFibGVkVGFzay5jYXRlZ29yeX0gLSAke3NjcEVuYWJsZWRUYXNrLmRldGFpbH1gO1xuICAgICAgICByZXBvcnQgKz0gYFxcbiAgJHttZXNzYWdlfWA7XG4gICAgfVxuICAgIGlmICghdHJhbnNpdGlvbmFsRm91bmQpIHtcbiAgICAgICAgY29uc3QgdHJhbnNpdGlvbmFsVGFzayA9IHsgdGl0bGU6ICdEZXBsb3kgVHJhbnNpdGlvbmFsIE9VJywgY2F0ZWdvcnk6IG1hc0NhdGVnb3J5LCBkZXRhaWw6IGBEZXBsb3kgVHJhbnNpdGlvbmFsIE9VIGluIEFXUyBPcmdhbml6YXRpb25gIH07XG4gICAgICAgIHRhc2tzLnB1c2godHJhbnNpdGlvbmFsVGFzayk7XG4gICAgICAgIGNvbnN0IG1lc3NhZ2UgPSBgJHt0cmFuc2l0aW9uYWxUYXNrLnRpdGxlfSAtICR7dHJhbnNpdGlvbmFsVGFzay5jYXRlZ29yeX0gLSAke3RyYW5zaXRpb25hbFRhc2suZGV0YWlsfWA7XG4gICAgICAgIHJlcG9ydCArPSBgXFxuICAke21lc3NhZ2V9YDtcbiAgICB9XG4gICAgaWYgKCFzdXNwZW5kZWRGb3VuZCkge1xuICAgICAgICBjb25zdCBzdXNwZW5kZWRUYXNrID0geyB0aXRsZTogJ0RlcGxveSBTdXNwZW5kZWQgT1UnLCBjYXRlZ29yeTogbWFzQ2F0ZWdvcnksIGRldGFpbDogYERlcGxveSBTdXNwZW5kZWQgT1UgaW4gQVdTIE9yZ2FuaXphdGlvbmAgfTtcbiAgICAgICAgdGFza3MucHVzaChzdXNwZW5kZWRUYXNrKTtcbiAgICAgICAgY29uc3QgbWVzc2FnZSA9IGAke3N1c3BlbmRlZFRhc2sudGl0bGV9IC0gJHtzdXNwZW5kZWRUYXNrLmNhdGVnb3J5fSAtICR7c3VzcGVuZGVkVGFzay5kZXRhaWx9YDtcbiAgICAgICAgcmVwb3J0ICs9IGBcXG4gICR7bWVzc2FnZX1gO1xuICAgIH1cbiAgICBpZiAoIXdvcmtsb2Fkc0ZvdW5kKSB7XG4gICAgICAgIGNvbnN0IHdvcmtsb2Fkc1Rhc2sgPSB7IHRpdGxlOiAnRGVwbG95IFdvcmtsb2FkcyBPVScsIGNhdGVnb3J5OiBtYXNDYXRlZ29yeSwgZGV0YWlsOiBgRGVwbG95IFdvcmtsb2FkcyBPVSBpbiBBV1MgT3JnYW5pemF0aW9uYCB9O1xuICAgICAgICB0YXNrcy5wdXNoKHdvcmtsb2Fkc1Rhc2spO1xuICAgICAgICBjb25zdCBtZXNzYWdlID0gYCR7d29ya2xvYWRzVGFzay50aXRsZX0gLSAke3dvcmtsb2Fkc1Rhc2suY2F0ZWdvcnl9IC0gJHt3b3JrbG9hZHNUYXNrLmRldGFpbH1gO1xuICAgICAgICByZXBvcnQgKz0gYFxcbiAgJHttZXNzYWdlfWA7XG4gICAgfVxuICAgIGlmICghc2VjdXJpdHlGb3VuZCkge1xuICAgICAgICBjb25zdCBzZWN1cml0eVRhc2sgPSB7IHRpdGxlOiAnRGVwbG95IFNlY3VyaXR5IE9VJywgY2F0ZWdvcnk6IG1hc0NhdGVnb3J5LCBkZXRhaWw6IGBEZXBsb3kgU2VjdXJpdHkgT1UgaW4gQVdTIE9yZ2FuaXphdGlvbmAgfTtcbiAgICAgICAgdGFza3MucHVzaChzZWN1cml0eVRhc2spO1xuICAgICAgICBjb25zdCBtZXNzYWdlID0gYCR7c2VjdXJpdHlUYXNrLnRpdGxlfSAtICR7c2VjdXJpdHlUYXNrLmNhdGVnb3J5fSAtICR7c2VjdXJpdHlUYXNrLmRldGFpbH1gO1xuICAgICAgICByZXBvcnQgKz0gYFxcbiAgJHttZXNzYWdlfWA7XG4gICAgfVxuICAgIGlmICghaW5mcmFzdHJ1Y3R1cmVGb3VuZCkge1xuICAgICAgICBjb25zdCBpbmZyYXN0cnVjdHVyZVRhc2sgPSB7IHRpdGxlOiAnRGVwbG95IEluZnJhc3RydWN0dXJlIE9VJywgY2F0ZWdvcnk6IG1hc0NhdGVnb3J5LCBkZXRhaWw6IGBEZXBsb3kgSW5mcmFzdHJ1Y3R1cmUgT1UgaW4gQVdTIE9yZ2FuaXphdGlvbmAgfTtcbiAgICAgICAgdGFza3MucHVzaChpbmZyYXN0cnVjdHVyZVRhc2spO1xuICAgICAgICBjb25zdCBtZXNzYWdlID0gYCR7aW5mcmFzdHJ1Y3R1cmVUYXNrLnRpdGxlfSAtICR7aW5mcmFzdHJ1Y3R1cmVUYXNrLmNhdGVnb3J5fSAtICR7aW5mcmFzdHJ1Y3R1cmVUYXNrLmRldGFpbH1gO1xuICAgICAgICByZXBvcnQgKz0gYFxcbiAgJHttZXNzYWdlfWA7XG4gICAgfVxuICAgIHJlcG9ydCArPSBgXFxuXFxuKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqYDtcbiAgICByZXBvcnQgKz0gYFxcbiAgICAgICAgICAgICAgICAgIExBTkRJTkcgWk9ORWA7XG4gICAgcmVwb3J0ICs9IGBcXG4qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKipgO1xuICAgIHJlcG9ydCArPSBgXFxuXFxuQVdTIENPTlRST0wgVE9XRVJcXG5gO1xuICAgIGlmIChhc3Nlc3NtZW50LmNvbnRyb2xUb3dlclJlZ2lvbikge1xuICAgICAgICByZXBvcnQgKz0gYFxcbiAgQ29udHJvbCBUb3dlciBob21lIHJlZ2lvbjogJHthc3Nlc3NtZW50LmNvbnRyb2xUb3dlclJlZ2lvbn1gO1xuICAgICAgICByZXBvcnQgKz0gYFxcbiAgQ29udHJvbCBUb3dlciBzdGF0dXM6ICR7YXNzZXNzbWVudC5jb250cm9sVG93ZXJTdGF0dXN9YDtcbiAgICAgICAgcmVwb3J0ICs9IGBcXG4gIENvbnRyb2wgVG93ZXIgTGFuZGluZyBab25lIHZlcnNpb246ICR7YXNzZXNzbWVudC5jb250cm9sVG93ZXJEZXBsb3llZFZlcnNpb259YDtcbiAgICAgICAgcmVwb3J0ICs9IGBcXG4gIExhdGVzdCBhdmFpbGFibGUgdmVyc2lvbjogJHthc3Nlc3NtZW50LmNvbnRyb2xUb3dlckxhdGVzdEF2YWlsYWJsZVZlcnNpb259YDtcbiAgICAgICAgcmVwb3J0ICs9IGBcXG4gIERyaWZ0IFN0YXR1czogJHthc3Nlc3NtZW50LmNvbnRyb2xUb3dlckRyaWZ0U3RhdHVzfWA7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICByZXBvcnQgKz0gYFxcbiAgQVdTIENvbnRyb2wgVG93ZXIgaXMgbm90IGRlcGxveWVkIGluIHRoZSBBV1MgT3JnYW5pemF0aW9uYDtcbiAgICB9XG4gICAgcmVwb3J0ICs9IGBcXG5cXG5MQU5ESU5HIFpPTkUgVEFTS1M6YDtcbiAgICBsZXQgbHpUYXNrTnVtYmVyID0gMTtcbiAgICBjb25zdCBseldheXBvaW50ID0gXCJMYW5kaW5nIFpvbmVcIjtcbiAgICBpZiAoYXNzZXNzbWVudC5jb250cm9sVG93ZXJSZWdpb24gPT09IHVuZGVmaW5lZCkge1xuICAgICAgICBjb25zdCBkZXBsb3lDb250cm9sVG93ZXJUYXNrID0geyB0aXRsZTogJ0RlcGxveSBBV1MgQ29udHJvbCBUb3dlcicsIGNhdGVnb3J5OiBseldheXBvaW50LCBkZXRhaWw6IGBEZXBsb3kgQVdTIENvbnRyb2wgVG93ZXIgaW4gQVdTIE9yZ2FuaXphdGlvbmAgfTtcbiAgICAgICAgdGFza3MucHVzaChkZXBsb3lDb250cm9sVG93ZXJUYXNrKTtcbiAgICAgICAgY29uc3QgbWVzc2FnZSA9IGAke2RlcGxveUNvbnRyb2xUb3dlclRhc2sudGl0bGV9IC0gJHtkZXBsb3lDb250cm9sVG93ZXJUYXNrLmNhdGVnb3J5fSAtICR7ZGVwbG95Q29udHJvbFRvd2VyVGFzay5kZXRhaWx9YDtcbiAgICAgICAgcmVwb3J0ICs9IGBcXG4gICR7bWVzc2FnZX1gO1xuICAgIH1cbiAgICBpZiAoYXNzZXNzbWVudC5jb250cm9sVG93ZXJEcmlmdFN0YXR1cyA9PT0gJ0RSSUZURUQnKSB7XG4gICAgICAgIGNvbnN0IGZpeEx6RHJpZnRUYXNrID0geyB0aXRsZTogJ0ZpeCBkcmlmdCBpbiBkZXBsb3llZCBsYW5kaW5nIHpvbmUnLCBjYXRlZ29yeTogbHpXYXlwb2ludCwgZGV0YWlsOiBgRml4IGRyaWZ0IGluIGRlcGxveWVkIGxhbmRpbmcgem9uZWAgfTtcbiAgICAgICAgdGFza3MucHVzaChmaXhMekRyaWZ0VGFzayk7XG4gICAgICAgIGNvbnN0IG1lc3NhZ2UgPSBgJHtmaXhMekRyaWZ0VGFzay50aXRsZX0gLSAke2ZpeEx6RHJpZnRUYXNrLmNhdGVnb3J5fSAtICR7Zml4THpEcmlmdFRhc2suZGV0YWlsfWA7XG4gICAgICAgIHJlcG9ydCArPSBgXFxuICAke21lc3NhZ2V9YDtcbiAgICB9XG4gICAgaWYgKGFzc2Vzc21lbnQuY29udHJvbFRvd2VyRGVwbG95ZWRWZXJzaW9uICE9PSBhc3Nlc3NtZW50LmNvbnRyb2xUb3dlckxhdGVzdEF2YWlsYWJsZVZlcnNpb24pIHtcbiAgICAgICAgY29uc3QgdXBkYXRlQ29udHJvbFRvd2VyVGFzayA9IHsgdGl0bGU6IGBVcGRhdGUgQVdTIENvbnRyb2wgVG93ZXIgdG8gbGF0ZXN0IHZlcnNpb25gLCBjYXRlZ29yeTogbHpXYXlwb2ludCwgZGV0YWlsOiBgVXBkYXRlIEFXUyBDb250cm9sIFRvd2VyIHRvIHZlcnNpb24gJHthc3Nlc3NtZW50LmNvbnRyb2xUb3dlckxhdGVzdEF2YWlsYWJsZVZlcnNpb259YCB9O1xuICAgICAgICB0YXNrcy5wdXNoKHVwZGF0ZUNvbnRyb2xUb3dlclRhc2spO1xuICAgICAgICBjb25zdCBtZXNzYWdlID0gYCR7dXBkYXRlQ29udHJvbFRvd2VyVGFzay50aXRsZX0gLSAke3VwZGF0ZUNvbnRyb2xUb3dlclRhc2suY2F0ZWdvcnl9IC0gJHt1cGRhdGVDb250cm9sVG93ZXJUYXNrLmRldGFpbH1gO1xuICAgICAgICByZXBvcnQgKz0gYFxcbiAgJHttZXNzYWdlfWA7XG4gICAgfVxuICAgIGlmICghYXNzZXNzbWVudC5vcmdTZXJ2aWNlcyB8fCAhYXNzZXNzbWVudC5vcmdTZXJ2aWNlcy5maW5kKHBhcmFtID0+IHBhcmFtLnNlcnZpY2UgPT09ICdtZW1iZXIub3JnLnN0YWNrc2V0cy5jbG91ZGZvcm1hdGlvbi5hbWF6b25hd3MuY29tJykpIHtcbiAgICAgICAgY29uc3Qgb3JnU2VydmljZUNmbkVuYWJsZVRhc2sgPSB7IHRpdGxlOiAnRW5hYmxlIEFXUyBDbG91ZEZvcm1hdGlvbicsIGNhdGVnb3J5OiBseldheXBvaW50LCBkZXRhaWw6IGBFbmFibGUgQVdTIENsb3VkRm9ybWF0aW9uIGluIEFXUyBPcmdhbml6YXRpb25gIH07XG4gICAgICAgIHRhc2tzLnB1c2gob3JnU2VydmljZUNmbkVuYWJsZVRhc2spO1xuICAgICAgICBjb25zdCBtZXNzYWdlID0gYCR7b3JnU2VydmljZUNmbkVuYWJsZVRhc2sudGl0bGV9IC0gJHtvcmdTZXJ2aWNlQ2ZuRW5hYmxlVGFzay5jYXRlZ29yeX0gLSAke29yZ1NlcnZpY2VDZm5FbmFibGVUYXNrLmRldGFpbH1gO1xuICAgICAgICByZXBvcnQgKz0gYFxcbiAgJHttZXNzYWdlfWA7XG4gICAgfVxuICAgIHJlcG9ydCArPSBgXFxuXFxuKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqYDtcbiAgICByZXBvcnQgKz0gYFxcbiAgICAgICAgICAgICAgICAgICAgSURFTlRJVFlgO1xuICAgIHJlcG9ydCArPSBgXFxuKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqYDtcbiAgICBpZiAoYXNzZXNzbWVudC5pZGNJbmZvKSB7XG4gICAgICAgIHJlcG9ydCArPSBgXFxuXFxuQVdTIElBTSBJREVOVElUWSBDRU5URVJcXG5gO1xuICAgICAgICByZXBvcnQgKz0gYFxcbiAgSWRDIFJlZ2lvbjogJHthc3Nlc3NtZW50LmlkY0luZm8ucmVnaW9ufWA7XG4gICAgICAgIHJlcG9ydCArPSBgXFxuICBJZEMgQVJOOiAke2Fzc2Vzc21lbnQuaWRjSW5mby5hcm59YDtcbiAgICAgICAgcmVwb3J0ICs9IGBcXG4gIElkQyBJbnN0YW5jZSBJZDogJHthc3Nlc3NtZW50LmlkY0luZm8uaWR9YDtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIHJlcG9ydCArPSBgXFxuXFxuQVdTIElBTSBJREVOVElUWSBDRU5URVIgTk9UIEZPVU5EXFxuYDtcbiAgICB9XG4gICAgcmVwb3J0ICs9IGBcXG5cXG5JREVOVElUWSBUQVNLUzpgO1xuICAgIGNvbnN0IHNzb0NhdGVnb3J5ID0gJ0lkZW50aXR5JztcbiAgICBpZiAoIWFzc2Vzc21lbnQub3JnU2VydmljZXMgfHwgIWFzc2Vzc21lbnQub3JnU2VydmljZXMuZmluZChwYXJhbSA9PiBwYXJhbS5zZXJ2aWNlID09PSAnc3NvLmFtYXpvbmF3cy5jb20nKSkge1xuICAgICAgICBjb25zdCBzc29UYXNrID0geyB0aXRsZTogJ0VuYWJsZSBBV1MgU2luZ2xlIFNpZ24tT24nLCBjYXRlZ29yeTogc3NvQ2F0ZWdvcnksIGRldGFpbDogYEVuYWJsZSBBV1MgU2luZ2xlIFNpZ24tT24gaW4gQVdTIE9yZ2FuaXphdGlvbmAgfTtcbiAgICAgICAgdGFza3MucHVzaChzc29UYXNrKTtcbiAgICAgICAgY29uc3QgbWVzc2FnZSA9IGAke3Nzb1Rhc2sudGl0bGV9IC0gJHtzc29UYXNrLmNhdGVnb3J5fSAtICR7c3NvVGFzay5kZXRhaWx9YDtcbiAgICAgICAgcmVwb3J0ICs9IGBcXG4gICR7bWVzc2FnZX1gO1xuICAgIH1cbiAgICBpZiAoIWlkZW50aXR5RGVsZWdhdGVkKSB7XG4gICAgICAgIGNvbnN0IGlkZW50aXR5RGVsZWdhdGVkVGFzayA9IHsgdGl0bGU6ICdEZWxlZ2F0ZSBhZG1pbmlzdHJhdGlvbiB0byBBV1MgSUFNIElkZW50aXR5IENlbnRlcicsIGNhdGVnb3J5OiBzc29DYXRlZ29yeSwgZGV0YWlsOiBgRGVsZWdhdGUgYWRtaW5pc3RyYXRpb24gdG8gQVdTIElBTSBJZGVudGl0eSBDZW50ZXJgIH07XG4gICAgICAgIHRhc2tzLnB1c2goaWRlbnRpdHlEZWxlZ2F0ZWRUYXNrKTtcbiAgICAgICAgY29uc3QgbWVzc2FnZSA9IGAke2lkZW50aXR5RGVsZWdhdGVkVGFzay50aXRsZX0gLSAke2lkZW50aXR5RGVsZWdhdGVkVGFzay5jYXRlZ29yeX0gLSAke2lkZW50aXR5RGVsZWdhdGVkVGFzay5kZXRhaWx9YDtcbiAgICAgICAgcmVwb3J0ICs9IGBcXG4gICR7bWVzc2FnZX1gO1xuICAgIH1cbiAgICBpZiAoIWFzc2Vzc21lbnQuc2NwRW5hYmxlZCkge1xuICAgICAgICBjb25zdCBzc29UYXNrID0geyB0aXRsZTogJ0VuYWJsZSBBV1MgU2luZ2xlIFNpZ24tT24nLCBjYXRlZ29yeTogc3NvQ2F0ZWdvcnksIGRldGFpbDogYEVuYWJsZSBBV1MgU2luZ2xlIFNpZ24tT24gaW4gQVdTIE9yZ2FuaXphdGlvbmAgfTtcbiAgICAgICAgdGFza3MucHVzaChzc29UYXNrKTtcbiAgICAgICAgY29uc3QgbWVzc2FnZSA9IGAke3Nzb1Rhc2sudGl0bGV9IC0gJHtzc29UYXNrLmNhdGVnb3J5fSAtICR7c3NvVGFzay5kZXRhaWx9YDtcbiAgICAgICAgcmVwb3J0ICs9IGBcXG4gICR7bWVzc2FnZX1gO1xuICAgIH1cbiAgICByZXBvcnQgKz0gYFxcblxcbioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKmA7XG4gICAgcmVwb3J0ICs9IGBcXG4gICAgICAgICAgICAgICAgICAgIFNFQ1VSSVRZYDtcbiAgICByZXBvcnQgKz0gYFxcbioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKmA7XG4gICAgcmVwb3J0ICs9IGBcXG5cXG5BV1MgU0VDVVJJVFkgU0VSVklDRVMgRU5BQkxFRCBJTiBBV1MgT1JHQU5JWkFUSU9OOlxcbmA7XG4gICAgaWYgKGFzc2Vzc21lbnQub3JnU2VydmljZXMgJiYgYXNzZXNzbWVudC5vcmdTZXJ2aWNlcy5maW5kKHBhcmFtID0+IHBhcmFtLnNlcnZpY2UgPT09ICdndWFyZGR1dHkuYW1hem9uYXdzLmNvbScpKSB7XG4gICAgICAgIHJlcG9ydCArPSBgXFxuICBBV1MgR3VhcmREdXR5YDtcbiAgICB9XG4gICAgaWYgKGFzc2Vzc21lbnQub3JnU2VydmljZXMgJiYgYXNzZXNzbWVudC5vcmdTZXJ2aWNlcy5maW5kKHBhcmFtID0+IHBhcmFtLnNlcnZpY2UgPT09ICdzZWN1cml0eWh1Yi5hbWF6b25hd3MuY29tJykpIHtcbiAgICAgICAgcmVwb3J0ICs9IGBcXG4gIEFXUyBTZWN1cml0eSBIdWJgO1xuICAgIH1cbiAgICBpZiAoYXNzZXNzbWVudC5vcmdTZXJ2aWNlcyAmJiBhc3Nlc3NtZW50Lm9yZ1NlcnZpY2VzLmZpbmQocGFyYW0gPT4gcGFyYW0uc2VydmljZSA9PT0gJ2FjY2Vzcy1hbmFseXplci5hbWF6b25hd3MuY29tJykpIHtcbiAgICAgICAgcmVwb3J0ICs9IGBcXG4gIElBTSBBY2Nlc3MgQW5hbHl6ZXJgO1xuICAgIH1cbiAgICBpZiAoYXNzZXNzbWVudC5vcmdTZXJ2aWNlcyAmJiBhc3Nlc3NtZW50Lm9yZ1NlcnZpY2VzLmZpbmQocGFyYW0gPT4gcGFyYW0uc2VydmljZSA9PT0gJ21hY2llLmFtYXpvbmF3cy5jb20nKSkge1xuICAgICAgICByZXBvcnQgKz0gYFxcbiAgTWFjaWVgO1xuICAgIH1cbiAgICBpZiAoYXNzZXNzbWVudC5vcmdTZXJ2aWNlcyAmJiBhc3Nlc3NtZW50Lm9yZ1NlcnZpY2VzLmZpbmQocGFyYW0gPT4gcGFyYW0uc2VydmljZSA9PT0gJ3N0b3JhZ2UtbGVucy5zMy5hbWF6b25hd3MuY29tJykpIHtcbiAgICAgICAgcmVwb3J0ICs9IGBcXG4gIEFtYXpvbiBTMyBTdG9yYWdlIExlbnNgO1xuICAgIH1cbiAgICBpZiAoYXNzZXNzbWVudC5vcmdTZXJ2aWNlcyAmJiBhc3Nlc3NtZW50Lm9yZ1NlcnZpY2VzLmZpbmQocGFyYW0gPT4gcGFyYW0uc2VydmljZSA9PT0gJ2luc3BlY3RvcjIuYW1hem9uYXdzLmNvbScpKSB7XG4gICAgICAgIHJlcG9ydCArPSBgXFxuICBBbWF6b24gSW5zcGVjdG9yYDtcbiAgICB9XG4gICAgaWYgKGFzc2Vzc21lbnQub3JnU2VydmljZXMgJiYgYXNzZXNzbWVudC5vcmdTZXJ2aWNlcy5maW5kKHBhcmFtID0+IHBhcmFtLnNlcnZpY2UgPT09ICdjbG91ZHRyYWlsLmFtYXpvbmF3cy5jb20nKSkge1xuICAgICAgICByZXBvcnQgKz0gYFxcbiAgQVdTIENsb3VkVHJhaWxgO1xuICAgIH1cbiAgICBpZiAoYXNzZXNzbWVudC5vcmdTZXJ2aWNlcyAmJiBhc3Nlc3NtZW50Lm9yZ1NlcnZpY2VzLmZpbmQocGFyYW0gPT4gcGFyYW0uc2VydmljZSA9PT0gJ2NvbmZpZy5hbWF6b25hd3MuY29tJykpIHtcbiAgICAgICAgcmVwb3J0ICs9IGBcXG4gIEFXUyBDb25maWdgO1xuICAgIH1cbiAgICByZXBvcnQgKz0gYFxcblxcblNFQ1VSSVRZIFRBU0tTOmA7XG4gICAgY29uc3Qgc2VjQ2F0ZWdvcnkgPSBcIlNlY3VyaXR5XCI7XG4gICAgaWYgKCFhc3Nlc3NtZW50LnNjcEVuYWJsZWQpIHtcbiAgICAgICAgY29uc3Qgc3NvVGFzayA9IHsgdGl0bGU6ICdFbmFibGUgQVdTIFNpbmdsZSBTaWduLU9uJywgY2F0ZWdvcnk6IHNlY0NhdGVnb3J5LCBkZXRhaWw6IGBFbmFibGUgQVdTIFNpbmdsZSBTaWduLU9uIGluIEFXUyBPcmdhbml6YXRpb25gIH07XG4gICAgICAgIHRhc2tzLnB1c2goc3NvVGFzayk7XG4gICAgICAgIGNvbnN0IG1lc3NhZ2UgPSBgJHtzc29UYXNrLnRpdGxlfSAtICR7c3NvVGFzay5jYXRlZ29yeX0gLSAke3Nzb1Rhc2suZGV0YWlsfWA7XG4gICAgICAgIHJlcG9ydCArPSBgXFxuICAke21lc3NhZ2V9YDtcbiAgICB9XG4gICAgaWYgKCFhc3Nlc3NtZW50Lm9yZ1NlcnZpY2VzIHx8ICFhc3Nlc3NtZW50Lm9yZ1NlcnZpY2VzLmZpbmQocGFyYW0gPT4gcGFyYW0uc2VydmljZSA9PT0gJ2d1YXJkZHV0eS5hbWF6b25hd3MuY29tJykpIHtcbiAgICAgICAgY29uc3QgdGFza0d1YXJkRHV0eURlbGVnYXRlZCA9IHsgdGl0bGU6ICdEZWxlZ2F0ZSBhZG1pbmlzdHJhdGlvbiB0byBBV1MgR3VhcmREdXR5JywgY2F0ZWdvcnk6IHNlY0NhdGVnb3J5LCBkZXRhaWw6IGBEZWxlZ2F0ZSBhZG1pbmlzdHJhdGlvbiB0byBBV1MgR3VhcmREdXR5YCB9O1xuICAgICAgICB0YXNrcy5wdXNoKHRhc2tHdWFyZER1dHlEZWxlZ2F0ZWQpO1xuICAgICAgICBjb25zdCBtZXNzYWdlID0gYCR7dGFza0d1YXJkRHV0eURlbGVnYXRlZC50aXRsZX0gLSAke3Rhc2tHdWFyZER1dHlEZWxlZ2F0ZWQuY2F0ZWdvcnl9IC0gJHt0YXNrR3VhcmREdXR5RGVsZWdhdGVkLmRldGFpbH1gO1xuICAgICAgICByZXBvcnQgKz0gYFxcbiAgJHttZXNzYWdlfWA7XG4gICAgfVxuICAgIGlmICghYXNzZXNzbWVudC5vcmdTZXJ2aWNlcyB8fCAhYXNzZXNzbWVudC5vcmdTZXJ2aWNlcy5maW5kKHBhcmFtID0+IHBhcmFtLnNlcnZpY2UgPT09ICdzZWN1cml0eWh1Yi5hbWF6b25hd3MuY29tJykpIHtcbiAgICAgICAgY29uc3QgdGFza1NlY3VyaXR5SHViRGVsZWdhdGVkID0geyB0aXRsZTogJ0RlbGVnYXRlIGFkbWluaXN0cmF0aW9uIHRvIEFXUyBTZWN1cml0eSBIdWInLCBjYXRlZ29yeTogc2VjQ2F0ZWdvcnksIGRldGFpbDogYERlbGVnYXRlIGFkbWluaXN0cmF0aW9uIHRvIEFXUyBTZWN1cml0eSBIdWJgIH07XG4gICAgICAgIHRhc2tzLnB1c2godGFza1NlY3VyaXR5SHViRGVsZWdhdGVkKTtcbiAgICAgICAgY29uc3QgbWVzc2FnZSA9IGAke3Rhc2tTZWN1cml0eUh1YkRlbGVnYXRlZC50aXRsZX0gLSAke3Rhc2tTZWN1cml0eUh1YkRlbGVnYXRlZC5jYXRlZ29yeX0gLSAke3Rhc2tTZWN1cml0eUh1YkRlbGVnYXRlZC5kZXRhaWx9YDtcbiAgICAgICAgcmVwb3J0ICs9IGBcXG4gICR7bWVzc2FnZX1gO1xuICAgIH1cbiAgICBpZiAoIWFzc2Vzc21lbnQub3JnU2VydmljZXMgfHwgIWFzc2Vzc21lbnQub3JnU2VydmljZXMuZmluZChwYXJhbSA9PiBwYXJhbS5zZXJ2aWNlID09PSAnYWNjZXNzLWFuYWx5emVyLmFtYXpvbmF3cy5jb20nKSkge1xuICAgICAgICBjb25zdCB0YXNrSWFtQWNjZXNzQW5hbHl6ZXJEZWxlZ2F0ZWQgPSB7IHRpdGxlOiAnRGVsZWdhdGUgYWRtaW5pc3RyYXRpb24gdG8gQVdTIElBTSBBY2Nlc3MgQW5hbHl6ZXInLCBjYXRlZ29yeTogc2VjQ2F0ZWdvcnksIGRldGFpbDogYERlbGVnYXRlIGFkbWluaXN0cmF0aW9uIHRvIEFXUyBJQU0gQWNjZXNzIEFuYWx5emVyYCB9O1xuICAgICAgICB0YXNrcy5wdXNoKHRhc2tJYW1BY2Nlc3NBbmFseXplckRlbGVnYXRlZCk7XG4gICAgICAgIGNvbnN0IG1lc3NhZ2UgPSBgJHt0YXNrSWFtQWNjZXNzQW5hbHl6ZXJEZWxlZ2F0ZWQudGl0bGV9IC0gJHt0YXNrSWFtQWNjZXNzQW5hbHl6ZXJEZWxlZ2F0ZWQuY2F0ZWdvcnl9IC0gJHt0YXNrSWFtQWNjZXNzQW5hbHl6ZXJEZWxlZ2F0ZWQuZGV0YWlsfWA7XG4gICAgICAgIHJlcG9ydCArPSBgXFxuICAke21lc3NhZ2V9YDtcbiAgICB9XG4gICAgaWYgKCFhc3Nlc3NtZW50Lm9yZ1NlcnZpY2VzIHx8ICFhc3Nlc3NtZW50Lm9yZ1NlcnZpY2VzLmZpbmQocGFyYW0gPT4gcGFyYW0uc2VydmljZSA9PT0gJ2Nsb3VkdHJhaWwuYW1hem9uYXdzLmNvbScpKSB7XG4gICAgICAgIGNvbnN0IHRhc2tDbG91ZFRyYWlsRGVsZWdhdGVkID0geyB0aXRsZTogJ0RlbGVnYXRlIGFkbWluaXN0cmF0aW9uIHRvIEFXUyBDbG91ZFRyYWlsJywgY2F0ZWdvcnk6IHNlY0NhdGVnb3J5LCBkZXRhaWw6IGBEZWxlZ2F0ZSBhZG1pbmlzdHJhdGlvbiB0byBBV1MgQ2xvdWRUcmFpbGAgfTtcbiAgICAgICAgdGFza3MucHVzaCh0YXNrQ2xvdWRUcmFpbERlbGVnYXRlZCk7XG4gICAgICAgIGNvbnN0IG1lc3NhZ2UgPSBgJHt0YXNrQ2xvdWRUcmFpbERlbGVnYXRlZC50aXRsZX0gLSAke3Rhc2tDbG91ZFRyYWlsRGVsZWdhdGVkLmNhdGVnb3J5fSAtICR7dGFza0Nsb3VkVHJhaWxEZWxlZ2F0ZWQuZGV0YWlsfWA7XG4gICAgICAgIHJlcG9ydCArPSBgXFxuICAke21lc3NhZ2V9YDtcbiAgICB9XG4gICAgaWYgKCFhc3Nlc3NtZW50Lm9yZ1NlcnZpY2VzIHx8ICFhc3Nlc3NtZW50Lm9yZ1NlcnZpY2VzLmZpbmQocGFyYW0gPT4gcGFyYW0uc2VydmljZSA9PT0gJ2NvbmZpZy5hbWF6b25hd3MuY29tJykpIHtcbiAgICAgICAgY29uc3QgdGFza0NvbmZpZ0RlbGVnYXRlZCA9IHsgdGl0bGU6ICdEZWxlZ2F0ZSBhZG1pbmlzdHJhdGlvbiB0byBBV1MgQ29uZmlnJywgY2F0ZWdvcnk6IHNlY0NhdGVnb3J5LCBkZXRhaWw6IGBEZWxlZ2F0ZSBhZG1pbmlzdHJhdGlvbiB0byBBV1MgQ29uZmlnYCB9O1xuICAgICAgICB0YXNrcy5wdXNoKHRhc2tDb25maWdEZWxlZ2F0ZWQpO1xuICAgICAgICBjb25zdCBtZXNzYWdlID0gYCR7dGFza0NvbmZpZ0RlbGVnYXRlZC50aXRsZX0gLSAke3Rhc2tDb25maWdEZWxlZ2F0ZWQuY2F0ZWdvcnl9IC0gJHt0YXNrQ29uZmlnRGVsZWdhdGVkLmRldGFpbH1gO1xuICAgICAgICByZXBvcnQgKz0gYFxcbiAgJHttZXNzYWdlfWA7XG4gICAgfVxuICAgIGlmICghc2VjdXJpdHlIdWJEZWxlZ2F0ZWQpIHtcbiAgICAgICAgY29uc3QgdGFza1NlY3VyaXR5SHViRGVsZWdhdGVkID0geyB0aXRsZTogJ0RlbGVnYXRlIGFkbWluaXN0cmF0aW9uIG9mIEFXUyBTZWN1cml0eSBIdWInLCBjYXRlZ29yeTogc2VjQ2F0ZWdvcnksIGRldGFpbDogYERlbGVnYXRlIGFkbWluaXN0cmF0aW9uIHRvIEFXUyBTZWN1cml0eSBIdWJgIH07XG4gICAgICAgIHRhc2tzLnB1c2godGFza1NlY3VyaXR5SHViRGVsZWdhdGVkKTtcbiAgICAgICAgY29uc3QgbWVzc2FnZSA9IGAke3Rhc2tTZWN1cml0eUh1YkRlbGVnYXRlZC50aXRsZX0gLSAke3Rhc2tTZWN1cml0eUh1YkRlbGVnYXRlZC5jYXRlZ29yeX0gLSAke3Rhc2tTZWN1cml0eUh1YkRlbGVnYXRlZC5kZXRhaWx9YDtcbiAgICAgICAgcmVwb3J0ICs9IGBcXG4gICR7bWVzc2FnZX1gO1xuICAgIH1cbiAgICBpZiAoIWd1YXJkRHV0eURlbGVnYXRlZCkge1xuICAgICAgICBjb25zdCB0YXNrR3VhcmREdXR5RGVsZWdhdGVkID0geyB0aXRsZTogJ0RlbGVnYXRlIGFkbWluaXN0cmF0aW9uIG9mIEFXUyBHdWFyZER1dHknLCBjYXRlZ29yeTogc2VjQ2F0ZWdvcnksIGRldGFpbDogYERlbGVnYXRlIGFkbWluaXN0cmF0aW9uIHRvIEFXUyBHdWFyZER1dHlgIH07XG4gICAgICAgIHRhc2tzLnB1c2godGFza0d1YXJkRHV0eURlbGVnYXRlZCk7XG4gICAgICAgIGNvbnN0IG1lc3NhZ2UgPSBgJHt0YXNrR3VhcmREdXR5RGVsZWdhdGVkLnRpdGxlfSAtICR7dGFza0d1YXJkRHV0eURlbGVnYXRlZC5jYXRlZ29yeX0gLSAke3Rhc2tHdWFyZER1dHlEZWxlZ2F0ZWQuZGV0YWlsfWA7XG4gICAgICAgIHJlcG9ydCArPSBgXFxuICAke21lc3NhZ2V9YDtcbiAgICB9XG4gICAgaWYgKCFjb25maWdEZWxlZ2F0ZWQpIHtcbiAgICAgICAgY29uc3QgdGFza0NvbmZpZ0RlbGVnYXRlZCA9IHsgdGl0bGU6ICdEZWxlZ2F0ZSBhZG1pbmlzdHJhdGlvbiBvZiBBV1MgQ29uZmlnJywgY2F0ZWdvcnk6IHNlY0NhdGVnb3J5LCBkZXRhaWw6IGBEZWxlZ2F0ZSBhZG1pbmlzdHJhdGlvbiB0byBBV1MgQ29uZmlnYCB9O1xuICAgICAgICB0YXNrcy5wdXNoKHRhc2tDb25maWdEZWxlZ2F0ZWQpO1xuICAgICAgICBjb25zdCBtZXNzYWdlID0gYCR7dGFza0NvbmZpZ0RlbGVnYXRlZC50aXRsZX0gLSAke3Rhc2tDb25maWdEZWxlZ2F0ZWQuY2F0ZWdvcnl9IC0gJHt0YXNrQ29uZmlnRGVsZWdhdGVkLmRldGFpbH1gO1xuICAgICAgICByZXBvcnQgKz0gYFxcbiAgJHttZXNzYWdlfWA7XG4gICAgfVxuICAgIGlmICghaWFtQWNjZXNzQW5hbHl6ZXJEZWxlZ2F0ZWQpIHtcbiAgICAgICAgY29uc3QgdGFza0lhbUFjY2Vzc0FuYWx5emVyRGVsZWdhdGVkID0geyB0aXRsZTogJ0RlbGVnYXRlIGFkbWluaXN0cmF0aW9uIG9mIEFXUyBJQU0gQWNjZXNzIEFuYWx5emVyJywgY2F0ZWdvcnk6IHNlY0NhdGVnb3J5LCBkZXRhaWw6IGBEZWxlZ2F0ZSBhZG1pbmlzdHJhdGlvbiB0byBBV1MgSUFNIEFjY2VzcyBBbmFseXplcmAgfTtcbiAgICAgICAgdGFza3MucHVzaCh0YXNrSWFtQWNjZXNzQW5hbHl6ZXJEZWxlZ2F0ZWQpO1xuICAgICAgICBjb25zdCBtZXNzYWdlID0gYCR7dGFza0lhbUFjY2Vzc0FuYWx5emVyRGVsZWdhdGVkLnRpdGxlfSAtICR7dGFza0lhbUFjY2Vzc0FuYWx5emVyRGVsZWdhdGVkLmNhdGVnb3J5fSAtICR7dGFza0lhbUFjY2Vzc0FuYWx5emVyRGVsZWdhdGVkLmRldGFpbH1gO1xuICAgICAgICByZXBvcnQgKz0gYFxcbiAgJHttZXNzYWdlfWA7XG4gICAgfVxuICAgIGlmICghczNTdG9yYWdlTGVuc0RlbGVnYXRlZCkge1xuICAgICAgICBjb25zdCB0YXNrUzNTdG9yYWdlTGVuc0RlbGVnYXRlZCA9IHsgdGl0bGU6ICdEZWxlZ2F0ZSBhZG1pbmlzdHJhdGlvbiBvZiBBbWF6b24gUzMgU3RvcmFnZSBMZW5zJywgY2F0ZWdvcnk6IHNlY0NhdGVnb3J5LCBkZXRhaWw6IGBEZWxlZ2F0ZSBhZG1pbmlzdHJhdGlvbiB0byBBbWF6b24gUzMgU3RvcmFnZSBMZW5zYCB9O1xuICAgICAgICB0YXNrcy5wdXNoKHRhc2tTM1N0b3JhZ2VMZW5zRGVsZWdhdGVkKTtcbiAgICAgICAgY29uc3QgbWVzc2FnZSA9IGAke3Rhc2tTM1N0b3JhZ2VMZW5zRGVsZWdhdGVkLnRpdGxlfSAtICR7dGFza1MzU3RvcmFnZUxlbnNEZWxlZ2F0ZWQuY2F0ZWdvcnl9IC0gJHt0YXNrUzNTdG9yYWdlTGVuc0RlbGVnYXRlZC5kZXRhaWx9YDtcbiAgICAgICAgcmVwb3J0ICs9IGBcXG4gICR7bWVzc2FnZX1gO1xuICAgIH1cbiAgICByZXBvcnQgKz0gYFxcblxcbioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKmA7XG4gICAgcmVwb3J0ICs9IGBcXG4gICAgICAgICAgICAgICAgICAgIE5FVFdPUktgO1xuICAgIHJlcG9ydCArPSBgXFxuKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqYDtcbiAgICByZXBvcnQgKz0gYFxcblxcbk5FVFdPUksgVEFTS1M6YDtcbiAgICBjb25zdCBuZXR3b3JrQ2F0ZWdvcnkgPSAnTmV0d29yayc7XG4gICAgaWYgKCFhc3Nlc3NtZW50Lm9yZ1NlcnZpY2VzIHx8ICFhc3Nlc3NtZW50Lm9yZ1NlcnZpY2VzLmZpbmQocGFyYW0gPT4gcGFyYW0uc2VydmljZSA9PT0gJ2d1YXJkZHV0eS5hbWF6b25hd3MuY29tJykpIHtcbiAgICAgICAgY29uc3QgdGFza0d1YXJkRHV0eURlbGVnYXRlZCA9IHsgdGl0bGU6ICdFbmFibGUgQVdTIEd1YXJkRHV0eScsIGNhdGVnb3J5OiBuZXR3b3JrQ2F0ZWdvcnksIGRldGFpbDogYEVuYWJsZSBBV1MgR3VhcmREdXR5IGluIEFXUyBPcmdhbml6YXRpb25gIH07XG4gICAgICAgIHRhc2tzLnB1c2godGFza0d1YXJkRHV0eURlbGVnYXRlZCk7XG4gICAgICAgIGNvbnN0IG1lc3NhZ2UgPSBgJHt0YXNrR3VhcmREdXR5RGVsZWdhdGVkLnRpdGxlfSAtICR7dGFza0d1YXJkRHV0eURlbGVnYXRlZC5jYXRlZ29yeX0gLSAke3Rhc2tHdWFyZER1dHlEZWxlZ2F0ZWQuZGV0YWlsfWA7XG4gICAgICAgIHJlcG9ydCArPSBgXFxuICAke21lc3NhZ2V9YDtcbiAgICB9XG4gICAgaWYgKCFhc3Nlc3NtZW50Lm9yZ1NlcnZpY2VzIHx8ICFhc3Nlc3NtZW50Lm9yZ1NlcnZpY2VzLmZpbmQocGFyYW0gPT4gcGFyYW0uc2VydmljZSA9PT0gJ2lwYW0uYW1hem9uYXdzLmNvbScpKSB7XG4gICAgICAgIGNvbnN0IG9yZ1NlcnZpY2VJcGFtVGFzayA9IHsgdGl0bGU6ICdFbmFibGUgQVdTIElQQU0nLCBjYXRlZ29yeTogbmV0d29ya0NhdGVnb3J5LCBkZXRhaWw6IGBFbmFibGUgQVdTIElQQU0gaW4gQVdTIE9yZ2FuaXphdGlvbmAgfTtcbiAgICAgICAgdGFza3MucHVzaChvcmdTZXJ2aWNlSXBhbVRhc2spO1xuICAgICAgICBjb25zdCBtZXNzYWdlID0gYCR7b3JnU2VydmljZUlwYW1UYXNrLnRpdGxlfSAtICR7b3JnU2VydmljZUlwYW1UYXNrLmNhdGVnb3J5fSAtICR7b3JnU2VydmljZUlwYW1UYXNrLmRldGFpbH1gO1xuICAgICAgICByZXBvcnQgKz0gYFxcbiAgJHttZXNzYWdlfWA7XG4gICAgfVxuICAgIGlmICghYXNzZXNzbWVudC5vcmdTZXJ2aWNlcyB8fCAhYXNzZXNzbWVudC5vcmdTZXJ2aWNlcy5maW5kKHBhcmFtID0+IHBhcmFtLnNlcnZpY2UgPT09ICdyYW0uYW1hem9uYXdzLmNvbScpKSB7XG4gICAgICAgIGNvbnN0IG9yZ1NlcnZpY2VSYW1UYXNrID0geyB0aXRsZTogJ0VuYWJsZSBBV1MgUmVzb3VyY2UgQWNjZXNzIE1hbmFnZXInLCBjYXRlZ29yeTogbmV0d29ya0NhdGVnb3J5LCBkZXRhaWw6IGBFbmFibGUgQVdTIFJlc291cmNlIEFjY2VzcyBNYW5hZ2VyIGluIEFXUyBPcmdhbml6YXRpb25gIH07XG4gICAgICAgIHRhc2tzLnB1c2gob3JnU2VydmljZVJhbVRhc2spO1xuICAgICAgICBjb25zdCBtZXNzYWdlID0gYCR7b3JnU2VydmljZVJhbVRhc2sudGl0bGV9IC0gJHtvcmdTZXJ2aWNlUmFtVGFzay5jYXRlZ29yeX0gLSAke29yZ1NlcnZpY2VSYW1UYXNrLmRldGFpbH1gO1xuICAgICAgICByZXBvcnQgKz0gYFxcbiAgJHttZXNzYWdlfWA7XG4gICAgfVxuICAgIGlmICghaXBhbURlbGVnYXRlZCkge1xuICAgICAgICBjb25zdCB0YXNrSXBhbURlbGVnYXRlZCA9IHsgdGl0bGU6ICdEZWxlZ2F0ZSBhZG1pbmlzdHJhdGlvbiBvZiBBV1MgSVBBTScsIGNhdGVnb3J5OiBuZXR3b3JrQ2F0ZWdvcnksIGRldGFpbDogYERlbGVnYXRlIGFkbWluaXN0cmF0aW9uIHRvIEFXUyBJUEFNYCB9O1xuICAgICAgICB0YXNrcy5wdXNoKHRhc2tJcGFtRGVsZWdhdGVkKTtcbiAgICAgICAgY29uc3QgbWVzc2FnZSA9IGAke3Rhc2tJcGFtRGVsZWdhdGVkLnRpdGxlfSAtICR7dGFza0lwYW1EZWxlZ2F0ZWQuY2F0ZWdvcnl9IC0gJHt0YXNrSXBhbURlbGVnYXRlZC5kZXRhaWx9YDtcbiAgICAgICAgcmVwb3J0ICs9IGBcXG4gICR7bWVzc2FnZX1gO1xuICAgIH1cbiAgICBpZiAoIWFzc2Vzc21lbnQuc2NwRW5hYmxlZCkge1xuICAgICAgICBjb25zdCB0YXNrU2NwRGVsZWdhdGVkID0geyB0aXRsZTogJ0VuYWJsZSBBV1MgU2VydmljZSBDb250cm9sIFBvbGljeScsIGNhdGVnb3J5OiBuZXR3b3JrQ2F0ZWdvcnksIGRldGFpbDogYEVuYWJsZSBBV1MgU2VydmljZSBDb250cm9sIFBvbGljeSBpbiBBV1MgT3JnYW5pemF0aW9uYCB9O1xuICAgICAgICB0YXNrcy5wdXNoKHRhc2tTY3BEZWxlZ2F0ZWQpO1xuICAgICAgICBjb25zdCBtZXNzYWdlID0gYCR7dGFza1NjcERlbGVnYXRlZC50aXRsZX0gLSAke3Rhc2tTY3BEZWxlZ2F0ZWQuY2F0ZWdvcnl9IC0gJHt0YXNrU2NwRGVsZWdhdGVkLmRldGFpbH1gO1xuICAgICAgICByZXBvcnQgKz0gYFxcbiAgJHttZXNzYWdlfWA7XG4gICAgfVxuICAgIHJlcG9ydCArPSBgXFxuXFxuKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqYDtcbiAgICByZXBvcnQgKz0gYFxcbiAgICAgICAgICAgICAgICAgIE9CU0VSVkFCSUxJVFlgO1xuICAgIHJlcG9ydCArPSBgXFxuKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqYDtcbiAgICByZXBvcnQgKz0gYFxcblxcbk9CU0VSVkFCSUxJVFkgVEFTS1M6YDtcbiAgICBjb25zdCBvYkNhdGVnb3J5ID0gJ09ic2VydmFiaWxpdHknO1xuICAgIGlmICghYXNzZXNzbWVudC5vcmdTZXJ2aWNlcyB8fCAhYXNzZXNzbWVudC5vcmdTZXJ2aWNlcy5maW5kKHBhcmFtID0+IHBhcmFtLnNlcnZpY2UgPT09ICdhY2NvdW50LmFtYXpvbmF3cy5jb20nKSkge1xuICAgICAgICBjb25zdCBvcmdTZXJ2aWNlQWNjb3VudFRhc2sgPSB7IHRpdGxlOiAnRW5hYmxlIEFXUyBBY2NvdW50JywgY2F0ZWdvcnk6IG9iQ2F0ZWdvcnksIGRldGFpbDogYEVuYWJsZSBBV1MgQWNjb3VudCBpbiBBV1MgT3JnYW5pemF0aW9uYCB9O1xuICAgICAgICB0YXNrcy5wdXNoKG9yZ1NlcnZpY2VBY2NvdW50VGFzayk7XG4gICAgICAgIGNvbnN0IG1lc3NhZ2UgPSBgJHtvcmdTZXJ2aWNlQWNjb3VudFRhc2sudGl0bGV9IC0gJHtvcmdTZXJ2aWNlQWNjb3VudFRhc2suY2F0ZWdvcnl9IC0gJHtvcmdTZXJ2aWNlQWNjb3VudFRhc2suZGV0YWlsfWA7XG4gICAgICAgIHJlcG9ydCArPSBgXFxuICAke21lc3NhZ2V9YDtcbiAgICB9XG4gICAgaWYgKCFhY2NvdW50RGVsZWdhdGVkKSB7XG4gICAgICAgIGNvbnN0IHRhc2tBY2NvdW50RGVsZWdhdGVkID0geyB0aXRsZTogJ0RlbGVnYXRlIGFkbWluaXN0cmF0aW9uIG9mIEFXUyBBY2NvdW50JywgY2F0ZWdvcnk6IG9iQ2F0ZWdvcnksIGRldGFpbDogYERlbGVnYXRlIGFkbWluaXN0cmF0aW9uIHRvIEFXUyBBY2NvdW50YCB9O1xuICAgICAgICB0YXNrcy5wdXNoKHRhc2tBY2NvdW50RGVsZWdhdGVkKTtcbiAgICAgICAgY29uc3QgbWVzc2FnZSA9IGAke3Rhc2tBY2NvdW50RGVsZWdhdGVkLnRpdGxlfSAtICR7dGFza0FjY291bnREZWxlZ2F0ZWQuY2F0ZWdvcnl9IC0gJHt0YXNrQWNjb3VudERlbGVnYXRlZC5kZXRhaWx9YDtcbiAgICAgICAgcmVwb3J0ICs9IGBcXG4gICR7bWVzc2FnZX1gO1xuICAgIH1cbiAgICByZXBvcnQgKz0gYFxcblxcbioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKmA7XG4gICAgcmVwb3J0ICs9IGBcXG4gICAgICAgICAgICAgICBCQUNLVVAgQU5EIFJFQ09WRVJZYDtcbiAgICByZXBvcnQgKz0gYFxcbioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKmA7XG4gICAgcmVwb3J0ICs9IGBcXG5cXG5CQUNLVVAgQU5EIFJFQ09WRVJZIFRBU0tTOmA7XG4gICAgY29uc3QgYmFja3VwV2F5cG9pbnQgPSAnQmFja3VwIGFuZCBSZWNvdmVyeSc7XG4gICAgaWYgKCFhc3Nlc3NtZW50Lm9yZ1NlcnZpY2VzIHx8ICFhc3Nlc3NtZW50Lm9yZ1NlcnZpY2VzLmZpbmQocGFyYW0gPT4gcGFyYW0uc2VydmljZSA9PT0gJ2JhY2t1cC5hbWF6b25hd3MuY29tJykpIHtcbiAgICAgICAgY29uc3Qgb3JnU2VydmljZUJhY2t1cFRhc2sgPSB7IHRpdGxlOiAnRW5hYmxlIEFXUyBCYWNrdXAnLCBjYXRlZ29yeTogYmFja3VwV2F5cG9pbnQsIGRldGFpbDogYEVuYWJsZSBBV1MgQmFja3VwIGluIEFXUyBPcmdhbml6YXRpb25gIH07XG4gICAgICAgIHRhc2tzLnB1c2gob3JnU2VydmljZUJhY2t1cFRhc2spO1xuICAgICAgICBjb25zdCBtZXNzYWdlID0gYCR7b3JnU2VydmljZUJhY2t1cFRhc2sudGl0bGV9IC0gJHtvcmdTZXJ2aWNlQmFja3VwVGFzay5jYXRlZ29yeX0gLSAke29yZ1NlcnZpY2VCYWNrdXBUYXNrLmRldGFpbH1gO1xuICAgICAgICByZXBvcnQgKz0gYFxcbiAgJHttZXNzYWdlfWA7XG4gICAgfVxuICAgIGlmICghYmFja3VwRGVsZWdhdGVkKSB7XG4gICAgICAgIGNvbnN0IHRhc2tCYWNrdXBEZWxlZ2F0ZWQgPSB7IHRpdGxlOiAnRGVsZWdhdGUgYWRtaW5pc3RyYXRpb24gb2YgQVdTIEJhY2t1cCcsIGNhdGVnb3J5OiBiYWNrdXBXYXlwb2ludCwgZGV0YWlsOiBgRGVsZWdhdGUgYWRtaW5pc3RyYXRpb24gdG8gQVdTIEJhY2t1cGAgfTtcbiAgICAgICAgdGFza3MucHVzaCh0YXNrQmFja3VwRGVsZWdhdGVkKTtcbiAgICAgICAgY29uc3QgbWVzc2FnZSA9IGAke3Rhc2tCYWNrdXBEZWxlZ2F0ZWQudGl0bGV9IC0gJHt0YXNrQmFja3VwRGVsZWdhdGVkLmNhdGVnb3J5fSAtICR7dGFza0JhY2t1cERlbGVnYXRlZC5kZXRhaWx9YDtcbiAgICAgICAgcmVwb3J0ICs9IGBcXG4gICR7bWVzc2FnZX1gO1xuICAgIH1cbiAgICBpZiAoIWFzc2Vzc21lbnQuYmFja3VwUG9saWN5RW5hYmxlZCkge1xuICAgICAgICBjb25zdCBiYWNrdXBQb2xpY3lFbmFibGVkVGFzayA9IHsgdGl0bGU6ICdFbmFibGUgQVdTIEJhY2t1cCBQb2xpY3knLCBjYXRlZ29yeTogYmFja3VwV2F5cG9pbnQsIGRldGFpbDogYEVuYWJsZSBBV1MgQmFja3VwIFBvbGljeSBpbiBBV1MgT3JnYW5pemF0aW9uYCB9O1xuICAgICAgICB0YXNrcy5wdXNoKGJhY2t1cFBvbGljeUVuYWJsZWRUYXNrKTtcbiAgICAgICAgY29uc3QgbWVzc2FnZSA9IGAke2JhY2t1cFBvbGljeUVuYWJsZWRUYXNrLnRpdGxlfSAtICR7YmFja3VwUG9saWN5RW5hYmxlZFRhc2suY2F0ZWdvcnl9IC0gJHtiYWNrdXBQb2xpY3lFbmFibGVkVGFzay5kZXRhaWx9YDtcbiAgICAgICAgcmVwb3J0ICs9IGBcXG4gICR7bWVzc2FnZX1gO1xuICAgIH1cbiAgICBpZiAoIWFzc2Vzc21lbnQuc2NwRW5hYmxlZCkge1xuICAgICAgICBjb25zdCBlbmFibGVQb2xpY3lUeXBlVGFzayA9IHsgdGl0bGU6ICdFbmFibGUgQVdTIFNlcnZpY2UgQ29udHJvbCBQb2xpY3knLCBjYXRlZ29yeTogYmFja3VwV2F5cG9pbnQsIGRldGFpbDogYEVuYWJsZSBBV1MgU2VydmljZSBDb250cm9sIFBvbGljeSBpbiBBV1MgT3JnYW5pemF0aW9uYCB9O1xuICAgICAgICB0YXNrcy5wdXNoKGVuYWJsZVBvbGljeVR5cGVUYXNrKTtcbiAgICAgICAgY29uc3QgbWVzc2FnZSA9IGAke2VuYWJsZVBvbGljeVR5cGVUYXNrLnRpdGxlfSAtICR7ZW5hYmxlUG9saWN5VHlwZVRhc2suY2F0ZWdvcnl9IC0gJHtlbmFibGVQb2xpY3lUeXBlVGFzay5kZXRhaWx9YDtcbiAgICAgICAgcmVwb3J0ICs9IGBcXG4gICR7bWVzc2FnZX1gO1xuICAgIH1cbiAgICByZXBvcnQgKz0gYFxcblxcblxcbiAgRU5EIFJFVklFV2A7XG4gICAgY29uc3QgcmVwb3J0RmlsZVBhdGggPSBcIi4vY2ZhdC50eHRcIjtcbiAgICBjb25zb2xlLmxvZyhgY29tcGlsaW5nIHJlcG9ydC4uLmApO1xuICAgIGNvbnNvbGUubG9nKGBzYXZpbmcgcmVwb3J0IHRvIC4vY2ZhdC9jZmF0LnR4dC4uLmApO1xuICAgIGZzLmFwcGVuZEZpbGVTeW5jKHJlcG9ydEZpbGVQYXRoLCByZXBvcnQpO1xuICAgIHJldHVybiB0YXNrcztcbn1cbmV4cG9ydCBkZWZhdWx0IGNyZWF0ZVJlcG9ydDtcbiIsImNvbnN0IF9fV0VCUEFDS19OQU1FU1BBQ0VfT0JKRUNUX18gPSByZXF1aXJlKFwicGF0aFwiKTsiLCJjb25zdCBfX1dFQlBBQ0tfTkFNRVNQQUNFX09CSkVDVF9fID0gcmVxdWlyZShcImFyY2hpdmVyXCIpOyIsImltcG9ydCB7IGRlZmluZUFjY291bnRUeXBlIH0gZnJvbSAnLi9zcmMvYWN0aW9ucy9kZWZpbmUtYWNjb3VudC10eXBlLmpzJztcbmltcG9ydCBjaGVja0lhbVVzZXJzIGZyb20gJy4vc3JjL2FjdGlvbnMvY2hlY2staWFtLXVzZXJzLmpzJztcbmltcG9ydCBnZXRFbmFibGVkT3JnUG9saWN5VHlwZXMgZnJvbSAnLi9zcmMvYWN0aW9ucy9nZXQtZW5hYmxlZC1vcmctcG9saWN5LXR5cGVzLmpzJztcbmltcG9ydCBnZXRFbmFibGVkT3JnU2VydmljZXMgZnJvbSAnLi9zcmMvYWN0aW9ucy9nZXQtZW5hYmxlZC1vcmctc2VydmljZXMuanMnO1xuaW1wb3J0IGdldE9yZ0Nsb3VkRm9ybWF0aW9uIGZyb20gJy4vc3JjL2FjdGlvbnMvY2hlY2stb3JnLWNsb3VkZm9ybWF0aW9uLmpzJztcbmltcG9ydCBnZXRJZGNJbmZvIGZyb20gJy4vc3JjL2FjdGlvbnMvZ2V0LWlkYy1pbmZvLmpzJztcbmltcG9ydCBnZXRPcmdEZXRhaWxzIGZyb20gJy4vc3JjL2FjdGlvbnMvZ2V0LW9yZy1kZXRhaWxzLmpzJztcbmltcG9ydCBnZXRPcmdUb3BMZXZlbE91cyBmcm9tICcuL3NyYy9hY3Rpb25zL2dldC1vcmctb3VzLmpzJztcbmltcG9ydCBnZXRBbGxSZWdpb25zIGZyb20gJy4vc3JjL2FjdGlvbnMvZ2V0LXJlZ2lvbnMuanMnO1xuaW1wb3J0IGNoZWNrRWMyRXhpc3RzIGZyb20gJy4vc3JjL2FjdGlvbnMvY2hlY2stZWMyLWV4aXN0ZW5jZS5qcyc7XG5pbXBvcnQgY2hlY2tWcGNFeGlzdHMgZnJvbSAnLi9zcmMvYWN0aW9ucy9jaGVjay12cGMtZXhpc3RlbmNlLmpzJztcbmltcG9ydCBjaGVja0Nsb3VkVHJhaWxFeGlzdHMgZnJvbSAnLi9zcmMvYWN0aW9ucy9jaGVjay1jbG91ZHRyYWlsLWV4aXN0ZW5jZS5qcyc7XG5pbXBvcnQgZ2V0T3JnRGFBY2NvdW50cyBmcm9tICcuL3NyYy9hY3Rpb25zL2dldC1vcmctZGEtYWNjb3VudHMuanMnO1xuaW1wb3J0IGNoZWNrQ29uZmlnRXhpc3RzIGZyb20gJy4vc3JjL2FjdGlvbnMvY2hlY2stY29uZmlnLWV4aXN0ZW5jZS5qcyc7XG5pbXBvcnQgZ2V0T3JnTWVtYmVyQWNjb3VudHMgZnJvbSAnLi9zcmMvYWN0aW9ucy9nZXQtb3JnLW1lbWJlci1hY2NvdW50cy5qcyc7XG5pbXBvcnQgZ2V0Q29udHJvbFRvd2VyIGZyb20gJy4vc3JjL2FjdGlvbnMvY2hlY2stY29udHJvbC10b3dlci5qcyc7XG5pbXBvcnQgY2hlY2tMZWdhY3lDdXIgZnJvbSAnLi9zcmMvYWN0aW9ucy9jaGVjay1sZWdhY3ktY3VyLmpzJztcbmltcG9ydCBjcmVhdGVSZXBvcnQgZnJvbSAnLi9zcmMvYWN0aW9ucy9jcmVhdGUtcmVwb3J0LmpzJztcbmltcG9ydCBjcmVhdGVCYWNrbG9nIGZyb20gJy4vc3JjL2FjdGlvbnMvY3JlYXRlLWJhY2tsb2cuanMnO1xuaW1wb3J0IGNyZWF0ZUppcmFJbXBvcnQgZnJvbSAnLi9zcmMvYWN0aW9ucy9jcmVhdGUtamlyYWltcG9ydC5qcyc7XG5pbXBvcnQgY3JlYXRlQXNhbmFJbXBvcnQgZnJvbSAnLi9zcmMvYWN0aW9ucy9jcmVhdGUtYXNhbmFpbXBvcnQuanMnO1xuaW1wb3J0IHppcEFzc2Vzc21lbnRGaWxlcyBmcm9tICcuL3NyYy9hY3Rpb25zL3ppcC1hc3Nlc3NtZW50LmpzJztcbmltcG9ydCAqIGFzIGZzIGZyb20gJ2ZzJztcbmZ1bmN0aW9uIG9iamVjdFRvQ1NWKGRhdGEpIHtcbiAgICBjb25zdCBkYXRhQXJyYXkgPSBBcnJheS5pc0FycmF5KGRhdGEpID8gZGF0YSA6IFtkYXRhXTtcbiAgICBjb25zdCBrZXlzID0gZGF0YUFycmF5Lmxlbmd0aCA+IDAgPyBPYmplY3Qua2V5cyhkYXRhQXJyYXlbMF0pIDogW107XG4gICAgY29uc3Qgcm93cyA9IFtrZXlzLmpvaW4oJywnKV07XG4gICAgZm9yIChjb25zdCBvYmogb2YgZGF0YUFycmF5KSB7XG4gICAgICAgIGNvbnN0IHZhbHVlcyA9IGtleXMubWFwKGtleSA9PiB7XG4gICAgICAgICAgICBjb25zdCB2YWx1ZSA9IG9ialtrZXldO1xuICAgICAgICAgICAgcmV0dXJuIHR5cGVvZiB2YWx1ZSA9PT0gJ3N0cmluZycgPyBgXCIke3ZhbHVlLnJlcGxhY2UoL1wiL2csICdcIlwiJyl9XCJgIDogdmFsdWU7XG4gICAgICAgIH0pO1xuICAgICAgICByb3dzLnB1c2godmFsdWVzLmpvaW4oJywnKSk7XG4gICAgfVxuICAgIHJldHVybiByb3dzLmpvaW4oJ1xcbicpO1xufVxuY29uc3QgbWFpbiA9IGFzeW5jICgpID0+IHtcbiAgICBsZXQgcmVwb3J0ID0ge307XG4gICAgbGV0IGNmYXRDaGVja3MgPSBbXTtcbiAgICBjb25zdCByZWdpb24gPSBwcm9jZXNzLmVudi5BV1NfUkVHSU9OIHx8ICd1cy1lYXN0LTEnO1xuICAgIGNvbnN0IGFsbFJlZ2lvbnMgPSBhd2FpdCBnZXRBbGxSZWdpb25zKCk7XG4gICAgY29uc29sZS5sb2coXCJkaXNjb3ZlcmluZyB5b3VyIEFXUyBlbnZpcm9ubWVudC4uLlwiKTtcbiAgICBjb25zdCBhY2NvdW50VHlwZSA9IGF3YWl0IGRlZmluZUFjY291bnRUeXBlKHJlZ2lvbik7XG4gICAgbGV0IHRyYW5zaXRpb25hbEZvdW5kLCBzdXNwZW5kZWRGb3VuZCwgaW5mcmFzdHJ1Y3R1cmVGb3VuZCA9IGZhbHNlO1xuICAgIGxldCB3b3JrbG9hZHNGb3VuZCA9IGZhbHNlO1xuICAgIGxldCBzZWN1cml0eUZvdW5kID0gZmFsc2U7XG4gICAgbGV0IGNmYXRJYW1Vc2VyUGFzcyA9IGZhbHNlO1xuICAgIGxldCBjZmF0SWFtSWRQT3JnU2VydmljZVBhc3MgPSBmYWxzZTtcbiAgICBsZXQgY2ZhdElhbUlkY0NvbmZpZ3VyZWRQYXNzID0gZmFsc2U7XG4gICAgbGV0IGNmYXRDbG91ZFRyYWlsUGFzcyA9IGZhbHNlO1xuICAgIGxldCBjZmF0Q2xvdWRUcmFpbE9yZ1RyYWlsUGFzcyA9IGZhbHNlO1xuICAgIGxldCBjZmF0VnBjUGFzcyA9IHRydWU7XG4gICAgbGV0IGNmYXRFYzJQYXNzID0gZmFsc2U7XG4gICAgbGV0IGNmYXRDb25maWdNYW5hZ2VtZW50QWNjb3VudFBhc3MgPSBmYWxzZTtcbiAgICBsZXQgY2ZhdENvbmZpZ1JlY29yZGVyTWFuYWdlbWVudEFjY291bnRQYXNzID0gZmFsc2U7XG4gICAgbGV0IGNmYXRDbG91ZFRyYWlsT3JnU2VydmljZUVuYWJsZWRQYXNzID0gZmFsc2U7XG4gICAgbGV0IGNmYXRUYWdQb2xpY2llc0VuYWJsZWRQYXNzID0gZmFsc2U7XG4gICAgbGV0IGNmYXRTY3BFbmFibGVkUGFzcyA9IGZhbHNlO1xuICAgIGxldCBjZmF0QmFja3VwUG9saWNpZXNFbmFibGVkUGFzcyA9IGZhbHNlO1xuICAgIGxldCBjZmF0T3JnQ2xvdWRGb3JtYXRpb25FbmFibGVkUGFzcyA9IGZhbHNlO1xuICAgIGxldCBjZmF0T3JnQ2xvdWRGb3JtYXRpb25TdGF0dXNQYXNzID0gZmFsc2U7XG4gICAgbGV0IGNmYXRPcmdTZXJ2aWNlR3VhcmREdXR5RW5hYmxlZFBhc3MgPSBmYWxzZTtcbiAgICBsZXQgY2ZhdE9yZ1NlcnZpY2VTZWN1cml0eUh1YkVuYWJsZWRQYXNzID0gZmFsc2U7XG4gICAgbGV0IGNmYXRPcmdTZXJ2aWNlSWFtQWNjZXNzQW5hbHl6ZXJFbmFibGVkUGFzcyA9IGZhbHNlO1xuICAgIGxldCBjZmF0T3JnU2VydmljZUF3c0NvbmZpZ0VuYWJsZWRQYXNzID0gZmFsc2U7XG4gICAgbGV0IGNmYXRPcmdTZXJ2aWNlUmFtRW5hYmxlZFBhc3MgPSBmYWxzZTtcbiAgICBsZXQgY2ZhdENvbnRyb2xUb3dlckRlcGxveWVkUGFzcyA9IGZhbHNlO1xuICAgIGxldCBjZmF0Q29udHJvbFRvd2VyTm90RHJpZnRlZFBhc3MgPSBmYWxzZTtcbiAgICBsZXQgY2ZhdENvbnRyb2xUb3dlckxhdGVzdFZlcnNpb25QYXNzID0gZmFsc2U7XG4gICAgbGV0IGNmYXRMb2dBcmNoaXZlQWNjb3VudFBhc3MgPSBmYWxzZTtcbiAgICBsZXQgY2ZhdEF1ZGl0QWNjb3VudFBhc3MgPSBmYWxzZTtcbiAgICBsZXQgY2ZhdE1hbmFnZW1lbnRBY2NvdW50UGFzcyA9IHRydWU7XG4gICAgbGV0IGNmYXRPcmdTZXJ2aWNlQmFja3VwRW5hYmxlZFBhc3MgPSBmYWxzZTtcbiAgICBpZiAoYWNjb3VudFR5cGUpIHtcbiAgICAgICAgcmVwb3J0Lm9yZ2FuaXphdGlvbkRlcGxveSA9IGFjY291bnRUeXBlLmlzSW5Pcmdhbml6YXRpb247XG4gICAgICAgIHJlcG9ydC5tYW5hZ2VtZW50QWNjb3VudCA9IGFjY291bnRUeXBlLmlzTWFuYWdlbWVudEFjY291bnQ7XG4gICAgICAgIGlmIChhY2NvdW50VHlwZS5pc01hbmFnZW1lbnRBY2NvdW50ID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIGFjY291bnRUeXBlLmlzTWFuYWdlbWVudEFjY291bnQgPSBmYWxzZTtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKFwiQVdTIGFjY291bnQgaXMgbm90IHRoZSBNYW5hZ2VtZW50IEFjY291bnQgb2YgYW4gQVdTIE9yZ2FuaXphdGlvblwiKTtcbiAgICAgICAgfVxuICAgICAgICBjZmF0TWFuYWdlbWVudEFjY291bnRQYXNzID0gYWNjb3VudFR5cGUuaXNNYW5hZ2VtZW50QWNjb3VudDtcbiAgICB9XG4gICAgY29uc29sZS5sb2coXCJkaXNjb3ZlcmluZyBJQU0gVXNlcnMuLi5cIik7XG4gICAgY29uc3QgaWFtVXNlclJlc3VsdCA9IGF3YWl0IGNoZWNrSWFtVXNlcnMoKTtcbiAgICBpZiAoaWFtVXNlclJlc3VsdCAmJiBpYW1Vc2VyUmVzdWx0Lmxlbmd0aCA+IDApIHtcbiAgICAgICAgY29uc29sZS5sb2coXCJJQU0gVXNlcnMgZGlzY292ZXJlZC5cIik7XG4gICAgICAgIHJlcG9ydC5pYW1Vc2VyQ2hlY2tzID0gaWFtVXNlclJlc3VsdDtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIGNmYXRJYW1Vc2VyUGFzcyA9IHRydWU7XG4gICAgfVxuICAgIGNvbnNvbGUubG9nKFwiZGlzY292ZXJpbmcgRUMyIGluc3RhbmNlcyBhY3Jvc3MgYWxsIEFXUyBSZWdpb25zLi4uXCIpO1xuICAgIGNvbnN0IGVjMkNoZWNrID0gYXdhaXQgY2hlY2tFYzJFeGlzdHMoYWxsUmVnaW9ucyk7XG4gICAgaWYgKGVjMkNoZWNrICYmIGVjMkNoZWNrLmZpbmQocGFyYW0gPT4gcGFyYW0uZWMyRm91bmQgPT09IHRydWUpKSB7XG4gICAgICAgIHJlcG9ydC5lYzJDaGVja3MgPSBlYzJDaGVjaztcbiAgICAgICAgY29uc29sZS5pbmZvKFwid2FybmluZzogRUMyIGluc3RhbmNlcyBkaXNjb3ZlcmVkLlwiKTtcbiAgICAgICAgZm9yIChjb25zdCBlYzIgb2YgZWMyQ2hlY2spIHtcbiAgICAgICAgICAgIGNmYXRFYzJQYXNzID0gZmFsc2U7XG4gICAgICAgIH1cbiAgICB9XG4gICAgY29uc29sZS5sb2coXCJkaXNjb3ZlcmluZyBWUENzIGFjcm9zcyBhbGwgQVdTIFJlZ2lvbnMuLi5cIik7XG4gICAgY29uc3QgdnBjQ2hlY2sgPSBhd2FpdCBjaGVja1ZwY0V4aXN0cyhhbGxSZWdpb25zKTtcbiAgICByZXBvcnQudnBjQ2hlY2tzID0gdnBjQ2hlY2s7XG4gICAgaWYgKHZwY0NoZWNrICYmIHZwY0NoZWNrLmxlbmd0aCA+IDApIHtcbiAgICAgICAgY2ZhdFZwY1Bhc3MgPSBmYWxzZTtcbiAgICAgICAgY29uc29sZS5sb2coXCJ3YXJuaW5nOiBWUENzIGRpc2NvdmVyZWQuXCIpO1xuICAgIH1cbiAgICBjb25zb2xlLmxvZyhcImRpc2NvdmVyaW5nIEFXUyBDb25maWcgY29uZmlndXJhdGlvbnMgYWNyb3NzIGFsbCBBV1MgUmVnaW9ucy4uLlwiKTtcbiAgICByZXBvcnQuY2xvdWRUcmFpbERldGFpbHMgPSBhd2FpdCBjaGVja0Nsb3VkVHJhaWxFeGlzdHMoYWxsUmVnaW9ucyk7XG4gICAgcmVwb3J0LmNvbmZpZ0RldGFpbHMgPSBhd2FpdCBjaGVja0NvbmZpZ0V4aXN0cyhhbGxSZWdpb25zKTtcbiAgICBpZiAocmVwb3J0LmNvbmZpZ0RldGFpbHMgJiYgcmVwb3J0LmNvbmZpZ0RldGFpbHMuZmluZChwYXJhbSA9PiBwYXJhbS5jb25maWdSZWNvcmRlckZvdW5kID09PSB0cnVlKSkge1xuICAgICAgICBmb3IgKGNvbnN0IGNvbmZpZ0ZpbmQgb2YgcmVwb3J0LmNvbmZpZ0RldGFpbHMpIHtcbiAgICAgICAgICAgIGlmIChjb25maWdGaW5kLmNvbmZpZ1JlY29yZGVyRm91bmQpIHtcbiAgICAgICAgICAgICAgICBjZmF0Q29uZmlnTWFuYWdlbWVudEFjY291bnRQYXNzID0gdHJ1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChjb25maWdGaW5kLmNvbmZpZ0RlbGl2ZXJ5Q2hhbm5lbEZvdW5kKSB7XG4gICAgICAgICAgICAgICAgY2ZhdENvbmZpZ1JlY29yZGVyTWFuYWdlbWVudEFjY291bnRQYXNzID0gdHJ1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbiAgICAvLyBhbGwgdGhlIGZvbGxvd2luZyBjYWxscyByZXF1aXJlIGFuIEFXUyBPcmdhbml6YXRpb24gdG8gZXhpc3QgYW5kIHRoZSBhY2NvdW50IGJlIGEgbWFuYWdlbWVudCBhY2NvdW50XG4gICAgaWYgKGFjY291bnRUeXBlLmlzSW5Pcmdhbml6YXRpb24gJiYgYWNjb3VudFR5cGUuaXNNYW5hZ2VtZW50QWNjb3VudCkge1xuICAgICAgICBjb25zb2xlLmxvZyhcImNvbGxlY3RpbmcgZ2VuZXJhbCBBV1MgT3JnYW5pemF0aW9uIGRldGFpbHMuLi5cIik7XG4gICAgICAgIGNvbnN0IG9yZ0RldGFpbHMgPSBhd2FpdCBnZXRPcmdEZXRhaWxzKCd1cy1lYXN0LTEnKTtcbiAgICAgICAgY29uc29sZS5sb2coXCJjb2xsZWN0aW5nIENVUiBkZXRhaWxzLi4uXCIpO1xuICAgICAgICBjb25zdCBsZWdhY3lDdXJDaGVjayA9IGF3YWl0IGNoZWNrTGVnYWN5Q3VyKCd1cy1lYXN0LTEnKTtcbiAgICAgICAgY29uc29sZS5sb2coXCJjb2xsZWN0aW5nIEFXUyBPcmdhbml6YXRpb24gUG9saWN5IGRldGFpbHMuLi5cIik7XG4gICAgICAgIGNvbnN0IGVuYWJsZU9yZ1BvbGljaWVzQ2hlY2sgPSBhd2FpdCBnZXRFbmFibGVkT3JnUG9saWN5VHlwZXMoJ3VzLWVhc3QtMScpO1xuICAgICAgICBjb25zb2xlLmxvZyhcImNvbGxlY3RpbmcgQVdTIE9yZ2FuaXphdGlvbiBzZXJ2aWNlIHRydXN0ZWQgYWNjZXNzIGRldGFpbHMuLi5cIik7XG4gICAgICAgIHJlcG9ydC5vcmdTZXJ2aWNlcyA9IGF3YWl0IGdldEVuYWJsZWRPcmdTZXJ2aWNlcygndXMtZWFzdC0xJyk7XG4gICAgICAgIGNvbnNvbGUubG9nKFwiY29sbGVjdGluZyBBV1MgT3JnYW5pemF0aW9uIENsb3VkRm9ybWF0aW9uIHN0YXR1cyBkZXRhaWxzLi4uXCIpO1xuICAgICAgICBjb25zdCBjZm5PcmdTdGF0dXMgPSBhd2FpdCBnZXRPcmdDbG91ZEZvcm1hdGlvbihyZWdpb24pO1xuICAgICAgICBjb25zb2xlLmxvZyhcImNvbGxlY3RpbmcgQVdTIENvbnRyb2wgVG93ZXIgZGV0YWlscy4uLlwiKTtcbiAgICAgICAgY29uc3QgY29udHJvbFRvd2VyRGV0YWlscyA9IGF3YWl0IGdldENvbnRyb2xUb3dlcihyZWdpb24pO1xuICAgICAgICByZXBvcnQuaWRjSW5mbyA9IGF3YWl0IGdldElkY0luZm8oYWxsUmVnaW9ucyk7XG4gICAgICAgIGNvbnNvbGUubG9nKFwiY29sbGVjdGluZyBBV1MgT3JnYW5pemF0aW9uIHNlcnZpY2UgZGVsZWdhdGVkIGFkbWluIGRldGFpbHMuLi5cIik7XG4gICAgICAgIHJlcG9ydC5vcmdEZWxlZ2F0ZWRBZG1pbkFjY291bnRzID0gYXdhaXQgZ2V0T3JnRGFBY2NvdW50cygpO1xuICAgICAgICBjb25zb2xlLmxvZyhcImNvbGxlY3RpbmcgQVdTIE9yZ2FuaXphdGlvbiBtZW1iZXIgYWNjb3VudCBkZXRhaWxzLi4uXCIpO1xuICAgICAgICByZXBvcnQub3JnTWVtYmVyQWNjb3VudHMgPSBhd2FpdCBnZXRPcmdNZW1iZXJBY2NvdW50cygpO1xuICAgICAgICByZXBvcnQuaXNMZWdhY3lDdXJTZXR1cCA9IGxlZ2FjeUN1ckNoZWNrLmlzTGVnYWN5Q3VyU2V0dXA7XG4gICAgICAgIHJlcG9ydC5vcmdBcm4gPSBvcmdEZXRhaWxzLmFybjtcbiAgICAgICAgcmVwb3J0Lm9yZ0lkID0gb3JnRGV0YWlscy5pZDtcbiAgICAgICAgcmVwb3J0Lm9yZ1Jvb3RPdUlkID0gb3JnRGV0YWlscy5yb290T3VJZDtcbiAgICAgICAgcmVwb3J0LmJhY2t1cFBvbGljeUVuYWJsZWQgPSBlbmFibGVPcmdQb2xpY2llc0NoZWNrLmJhY2t1cFBvbGljeUVuYWJsZWQ7XG4gICAgICAgIHJlcG9ydC5zY3BFbmFibGVkID0gZW5hYmxlT3JnUG9saWNpZXNDaGVjay5zY3BFbmFibGVkO1xuICAgICAgICByZXBvcnQudGFnUG9saWN5RW5hYmxlZCA9IGVuYWJsZU9yZ1BvbGljaWVzQ2hlY2sudGFnUG9saWN5RW5hYmxlZDtcbiAgICAgICAgcmVwb3J0Lm9yZ0Nsb3VkRm9ybWF0aW9uU3RhdHVzID0gY2ZuT3JnU3RhdHVzLnN0YXR1cztcbiAgICAgICAgcmVwb3J0LmNvbnRyb2xUb3dlckRlcGxveWVkVmVyc2lvbiA9IGNvbnRyb2xUb3dlckRldGFpbHMuZGVwbG95ZWRWZXJzaW9uO1xuICAgICAgICByZXBvcnQuY29udHJvbFRvd2VyRHJpZnRTdGF0dXMgPSBjb250cm9sVG93ZXJEZXRhaWxzLmRyaWZ0U3RhdHVzO1xuICAgICAgICByZXBvcnQuY29udHJvbFRvd2VyTGF0ZXN0QXZhaWxhYmxlVmVyc2lvbiA9IGNvbnRyb2xUb3dlckRldGFpbHMubGF0ZXN0QXZhaWxhYmxlVmVyc2lvbjtcbiAgICAgICAgcmVwb3J0LmNvbnRyb2xUb3dlclJlZ2lvbiA9IGNvbnRyb2xUb3dlckRldGFpbHMuY29udHJvbFRvd2VyUmVnaW9uO1xuICAgICAgICByZXBvcnQuY29udHJvbFRvd2VyU3RhdHVzID0gY29udHJvbFRvd2VyRGV0YWlscy5zdGF0dXM7XG4gICAgICAgIGlmIChyZXBvcnQuaWRjSW5mby5hcm4pIHtcbiAgICAgICAgICAgIGNmYXRJYW1JZGNDb25maWd1cmVkUGFzcyA9IHRydWU7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHJlcG9ydC5jbG91ZFRyYWlsRGV0YWlscyAmJiByZXBvcnQuY2xvdWRUcmFpbERldGFpbHMubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgY2ZhdENsb3VkVHJhaWxQYXNzID0gdHJ1ZTtcbiAgICAgICAgICAgIGZvciAoY29uc3QgY3RGaW5kIG9mIHJlcG9ydC5jbG91ZFRyYWlsRGV0YWlscykge1xuICAgICAgICAgICAgICAgIGlmIChjdEZpbmQudHJhaWxGb3VuZCkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoY3RGaW5kLmlzT3JnVHJhaWwpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNmYXRDbG91ZFRyYWlsT3JnVHJhaWxQYXNzID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpZiAocmVwb3J0Lm9yZ1NlcnZpY2VzLmZpbmQocGFyYW0gPT4gcGFyYW0uc2VydmljZSA9PT0gJ2Nsb3VkdHJhaWwuYW1hem9uYXdzLmNvbScpKSB7XG4gICAgICAgICAgICBjZmF0Q2xvdWRUcmFpbE9yZ1NlcnZpY2VFbmFibGVkUGFzcyA9IHRydWU7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHJlcG9ydC5vcmdTZXJ2aWNlcy5maW5kKHBhcmFtID0+IHBhcmFtLnNlcnZpY2UgPT09ICdjb25maWcuYW1hem9uYXdzLmNvbScpKSB7XG4gICAgICAgICAgICBjZmF0T3JnU2VydmljZUF3c0NvbmZpZ0VuYWJsZWRQYXNzID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoZW5hYmxlT3JnUG9saWNpZXNDaGVjay5zY3BFbmFibGVkKSB7XG4gICAgICAgICAgICBjZmF0U2NwRW5hYmxlZFBhc3MgPSB0cnVlO1xuICAgICAgICB9XG4gICAgICAgIGlmIChlbmFibGVPcmdQb2xpY2llc0NoZWNrLnRhZ1BvbGljeUVuYWJsZWQpIHtcbiAgICAgICAgICAgIGNmYXRUYWdQb2xpY2llc0VuYWJsZWRQYXNzID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoZW5hYmxlT3JnUG9saWNpZXNDaGVjay5iYWNrdXBQb2xpY3lFbmFibGVkKSB7XG4gICAgICAgICAgICBjZmF0QmFja3VwUG9saWNpZXNFbmFibGVkUGFzcyA9IHRydWU7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG9yZ0RldGFpbHMucm9vdE91SWQpIHtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKFwiY29sbGVjdGluZyBPVSBhbmQgbWVtYmVyIGFjY291bnQgZGV0YWlscy4uLlwiKTtcbiAgICAgICAgICAgIHJlcG9ydC5vcmdPdUluZm8gPSBhd2FpdCBnZXRPcmdUb3BMZXZlbE91cygndXMtZWFzdC0xJywgb3JnRGV0YWlscy5yb290T3VJZCk7XG4gICAgICAgICAgICBpZiAocmVwb3J0Lm9yZ091SW5mbyAmJiByZXBvcnQub3JnT3VJbmZvLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgICAgICBmb3IgKGNvbnN0IG91IG9mIHJlcG9ydC5vcmdPdUluZm8pIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKG91Lm5hbWU/LnRvTG93ZXJDYXNlKCkgPT09ICdzdXNwZW5kZWQnKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBzdXNwZW5kZWRGb3VuZCA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgaWYgKG91Lm5hbWU/LnRvTG93ZXJDYXNlKCkgPT09ICd0cmFuc2l0aW9uYWwnKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0cmFuc2l0aW9uYWxGb3VuZCA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgaWYgKG91Lm5hbWU/LnRvTG93ZXJDYXNlKCkgPT09ICd3b3JrbG9hZHMnKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB3b3JrbG9hZHNGb3VuZCA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgaWYgKG91Lm5hbWU/LnRvTG93ZXJDYXNlKCkgPT09ICdzZWN1cml0eScpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHNlY3VyaXR5Rm91bmQgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGlmIChvdS5uYW1lPy50b0xvd2VyQ2FzZSgpID09PSAnaW5mcmFzdHJ1Y3R1cmUnKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpbmZyYXN0cnVjdHVyZUZvdW5kID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpZiAocmVwb3J0Lm9yZ01lbWJlckFjY291bnRzICYmIHJlcG9ydC5vcmdNZW1iZXJBY2NvdW50cy5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICBmb3IgKGNvbnN0IG1lbWJlckFjY291bnQgb2YgcmVwb3J0Lm9yZ01lbWJlckFjY291bnRzKSB7XG4gICAgICAgICAgICAgICAgaWYgKG1lbWJlckFjY291bnQuYWNjb3VudE5hbWUpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKG1lbWJlckFjY291bnQuYWNjb3VudE5hbWUudG9Mb3dlckNhc2UoKSA9PT0gJ2xvZyBhcmNoaXZlJykge1xuICAgICAgICAgICAgICAgICAgICAgICAgY2ZhdExvZ0FyY2hpdmVBY2NvdW50UGFzcyA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgaWYgKG1lbWJlckFjY291bnQuYWNjb3VudE5hbWUudG9Mb3dlckNhc2UoKSA9PT0gJ2F1ZGl0Jykge1xuICAgICAgICAgICAgICAgICAgICAgICAgY2ZhdEF1ZGl0QWNjb3VudFBhc3MgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGlmIChtZW1iZXJBY2NvdW50LmFjY291bnROYW1lLnRvTG93ZXJDYXNlKCkgPT09ICdzZWN1cml0eSB0b29saW5nJykge1xuICAgICAgICAgICAgICAgICAgICAgICAgY2ZhdEF1ZGl0QWNjb3VudFBhc3MgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGxldCBpZGVudGl0eURlbGVnYXRlZCA9IGZhbHNlO1xuICAgICAgICBsZXQgc2VjdXJpdHlIdWJEZWxlZ2F0ZWQgPSBmYWxzZTtcbiAgICAgICAgbGV0IGd1YXJkRHV0eURlbGVnYXRlZCA9IGZhbHNlO1xuICAgICAgICBsZXQgY29uZmlnRGVsZWdhdGVkID0gZmFsc2U7XG4gICAgICAgIGxldCBpYW1BY2Nlc3NBbmFseXplckRlbGVnYXRlZCA9IGZhbHNlO1xuICAgICAgICBsZXQgczNTdG9yYWdlTGVuc0RlbGVnYXRlZCA9IGZhbHNlO1xuICAgICAgICBsZXQgaXBhbURlbGVnYXRlZCA9IGZhbHNlO1xuICAgICAgICBsZXQgYWNjb3VudERlbGVnYXRlZCA9IGZhbHNlO1xuICAgICAgICBsZXQgYmFja3VwRGVsZWdhdGVkID0gZmFsc2U7XG4gICAgICAgIGlmIChyZXBvcnQub3JnRGVsZWdhdGVkQWRtaW5BY2NvdW50cyAmJiByZXBvcnQub3JnRGVsZWdhdGVkQWRtaW5BY2NvdW50cy5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICBmb3IgKGNvbnN0IGFjY291bnQgb2YgcmVwb3J0Lm9yZ0RlbGVnYXRlZEFkbWluQWNjb3VudHMpIHtcbiAgICAgICAgICAgICAgICBpZiAoYWNjb3VudC5zZXJ2aWNlcyAmJiBhY2NvdW50LnNlcnZpY2VzLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgICAgICAgICAgZm9yIChjb25zdCBzcnYgb2YgYWNjb3VudC5zZXJ2aWNlcykge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHNydi5TZXJ2aWNlUHJpbmNpcGFsID09PSAnc2VjdXJpdHlodWIuYW1hem9uYXdzLmNvbScpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZWN1cml0eUh1YkRlbGVnYXRlZCA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoc3J2LlNlcnZpY2VQcmluY2lwYWwgPT09ICdndWFyZGR1dHkuYW1hem9uYXdzLmNvbScpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBndWFyZER1dHlEZWxlZ2F0ZWQgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHNydi5TZXJ2aWNlUHJpbmNpcGFsID09PSAnc3NvLmFtYXpvbmF3cy5jb20nKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWRlbnRpdHlEZWxlZ2F0ZWQgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHNydi5TZXJ2aWNlUHJpbmNpcGFsID09PSAnY29uZmlnLmFtYXpvbmF3cy5jb20nKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uZmlnRGVsZWdhdGVkID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChzcnYuU2VydmljZVByaW5jaXBhbCA9PT0gJ2FjY2Vzcy1hbmFseXplci5hbWF6b25hd3MuY29tJykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlhbUFjY2Vzc0FuYWx5emVyRGVsZWdhdGVkID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChzcnYuU2VydmljZVByaW5jaXBhbCA9PT0gJ3N0b3JhZ2UtbGVucy5zMy5hbWF6b25hd3MuY29tJykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHMzU3RvcmFnZUxlbnNEZWxlZ2F0ZWQgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHNydi5TZXJ2aWNlUHJpbmNpcGFsID09PSAnaXBhbS5hbWF6b25hd3MuY29tJykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlwYW1EZWxlZ2F0ZWQgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHNydi5TZXJ2aWNlUHJpbmNpcGFsID09PSAnYWNjb3VudC5hbWF6b25hd3MuY29tJykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFjY291bnREZWxlZ2F0ZWQgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHNydi5TZXJ2aWNlUHJpbmNpcGFsID09PSAnYmFja3VwLmFtYXpvbmF3cy5jb20nKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYmFja3VwRGVsZWdhdGVkID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpZiAoY29udHJvbFRvd2VyRGV0YWlscy5jb250cm9sVG93ZXJSZWdpb24pIHtcbiAgICAgICAgICAgIGNmYXRDb250cm9sVG93ZXJEZXBsb3llZFBhc3MgPSB0cnVlO1xuICAgICAgICB9XG4gICAgICAgIGlmIChjb250cm9sVG93ZXJEZXRhaWxzLmRyaWZ0U3RhdHVzICE9PSAnRFJJRlRFRCcpIHtcbiAgICAgICAgICAgIGNmYXRDb250cm9sVG93ZXJOb3REcmlmdGVkUGFzcyA9IHRydWU7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGNvbnRyb2xUb3dlckRldGFpbHMuZGVwbG95ZWRWZXJzaW9uID09PSBjb250cm9sVG93ZXJEZXRhaWxzLmxhdGVzdEF2YWlsYWJsZVZlcnNpb24pIHtcbiAgICAgICAgICAgIGNmYXRDb250cm9sVG93ZXJMYXRlc3RWZXJzaW9uUGFzcyA9IHRydWU7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHJlcG9ydC5vcmdTZXJ2aWNlcy5maW5kKHBhcmFtID0+IHBhcmFtLnNlcnZpY2UgPT09ICdtZW1iZXIub3JnLnN0YWNrc2V0cy5jbG91ZGZvcm1hdGlvbi5hbWF6b25hd3MuY29tJykpIHtcbiAgICAgICAgICAgIGNmYXRPcmdDbG91ZEZvcm1hdGlvblN0YXR1c1Bhc3MgPSB0cnVlO1xuICAgICAgICB9XG4gICAgICAgIGlmIChyZXBvcnQub3JnU2VydmljZXMuZmluZChwYXJhbSA9PiBwYXJhbS5zZXJ2aWNlID09PSAnc3NvLmFtYXpvbmF3cy5jb20nKSkge1xuICAgICAgICAgICAgY2ZhdElhbUlkUE9yZ1NlcnZpY2VQYXNzID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgICBpZiAocmVwb3J0Lm9yZ1NlcnZpY2VzLmZpbmQocGFyYW0gPT4gcGFyYW0uc2VydmljZSA9PT0gJ2d1YXJkZHV0eS5hbWF6b25hd3MuY29tJykpIHtcbiAgICAgICAgICAgIGNmYXRPcmdTZXJ2aWNlR3VhcmREdXR5RW5hYmxlZFBhc3MgPSB0cnVlO1xuICAgICAgICB9XG4gICAgICAgIGlmIChyZXBvcnQub3JnU2VydmljZXMuZmluZChwYXJhbSA9PiBwYXJhbS5zZXJ2aWNlID09PSAnc2VjdXJpdHlodWIuYW1hem9uYXdzLmNvbScpKSB7XG4gICAgICAgICAgICBjZmF0T3JnU2VydmljZVNlY3VyaXR5SHViRW5hYmxlZFBhc3MgPSB0cnVlO1xuICAgICAgICB9XG4gICAgICAgIGlmIChyZXBvcnQub3JnU2VydmljZXMuZmluZChwYXJhbSA9PiBwYXJhbS5zZXJ2aWNlID09PSAnYWNjZXNzLWFuYWx5emVyLmFtYXpvbmF3cy5jb20nKSkge1xuICAgICAgICAgICAgY2ZhdE9yZ1NlcnZpY2VJYW1BY2Nlc3NBbmFseXplckVuYWJsZWRQYXNzID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgICBpZiAocmVwb3J0Lm9yZ1NlcnZpY2VzLmZpbmQocGFyYW0gPT4gcGFyYW0uc2VydmljZSA9PT0gJ3JhbS5hbWF6b25hd3MuY29tJykpIHtcbiAgICAgICAgICAgIGNmYXRPcmdTZXJ2aWNlUmFtRW5hYmxlZFBhc3MgPSB0cnVlO1xuICAgICAgICB9XG4gICAgICAgIGlmIChyZXBvcnQub3JnU2VydmljZXMuZmluZChwYXJhbSA9PiBwYXJhbS5zZXJ2aWNlID09PSAnYmFja3VwLmFtYXpvbmF3cy5jb20nKSkge1xuICAgICAgICAgICAgY2ZhdE9yZ1NlcnZpY2VCYWNrdXBFbmFibGVkUGFzcyA9IHRydWU7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHJlcG9ydC5vcmdDbG91ZEZvcm1hdGlvblN0YXR1cyA9PT0gJ0VOQUJMRUQnKSB7XG4gICAgICAgICAgICBjZmF0T3JnQ2xvdWRGb3JtYXRpb25FbmFibGVkUGFzcyA9IHRydWU7XG4gICAgICAgIH1cbiAgICB9XG4gICAgZWxzZSBpZiAoYWNjb3VudFR5cGUuaXNJbk9yZ2FuaXphdGlvbiAmJiAhYWNjb3VudFR5cGUuaXNNYW5hZ2VtZW50QWNjb3VudCkge1xuICAgICAgICBjb25zdCBtZXNzYWdlID0gJ1xcbldBUk5JTkc6IFlvdSBhcmUgcnVubmluZyBDRkFUIGZyb20gYW4gYWNjb3VudCB0aGF0IGlzIGEgbWVtYmVyIG9mIHlvdXIgQVdTIE9yZ2FuaXphdGlvbi4gUGxlYXNlIHJ1biB0aGUgc29sdXRpb24gZnJvbSB5b3VyIEFXUyBNYW5hZ2VtZW50IGFjY291bnQuJztcbiAgICAgICAgY29uc29sZS53YXJuKG1lc3NhZ2UpO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgY29uc3QgbWVzc2FnZSA9ICdcXG5XQVJOSU5HOiBZb3UgYXJlIHJ1bm5pbmcgQ0ZBVCBmcm9tIGFuIGFjY291bnQgdGhhdCBub3QgcGFydCBvZiBhbiBBV1MgT3JnYW5pemF0aW9uLiBUaGlzIGFjY291bnQgd2lsbCBiZSB0cmVhdGVkIGFzIGEgc3RhbmRhbG9uZSBhY2NvdW50Lic7XG4gICAgICAgIGNvbnNvbGUud2FybihtZXNzYWdlKTtcbiAgICB9XG4gICAgbGV0IE9yZ0NoZWNrID0ge1xuICAgICAgICBjaGVjazogXCJBV1MgT3JnYW5pemF0aW9uIGNyZWF0ZWRcIixcbiAgICAgICAgZGVzY3JpcHRpb246IFwiQVdTIE9yZ2FuaXphdGlvbiBpcyBlbmFibGVkLlwiLFxuICAgICAgICBzdGF0dXM6IGFjY291bnRUeXBlLmlzSW5Pcmdhbml6YXRpb24gPyBcImNvbXBsZXRlXCIgOiBcImluY29tcGxldGVcIixcbiAgICAgICAgcmVxdWlyZWQ6IHRydWUsXG4gICAgICAgIHdlaWdodDogNixcbiAgICAgICAgbG9lOiAxLFxuICAgICAgICByZW1lZGlhdGlvbkxpbms6IFwiaHR0cHM6Ly9hd3MuYW1hem9uLmNvbS9vcmdhbml6YXRpb25zL2dldHRpbmctc3RhcnRlZC9cIlxuICAgIH07XG4gICAgY2ZhdENoZWNrcy5wdXNoKE9yZ0NoZWNrKTtcbiAgICBsZXQgTUFDaGVjayA9IHtcbiAgICAgICAgY2hlY2s6IFwiTWFuYWdlbWVudCBBY2NvdW50IGNyZWF0ZWRcIixcbiAgICAgICAgZGVzY3JpcHRpb246IFwiQVdTIE1hbmFnZW1lbnQgYWNjb3VudCBleGlzdHMuXCIsXG4gICAgICAgIHN0YXR1czogY2ZhdE1hbmFnZW1lbnRBY2NvdW50UGFzcyA/IFwiY29tcGxldGVcIiA6IFwiaW5jb21wbGV0ZVwiLFxuICAgICAgICByZXF1aXJlZDogdHJ1ZSxcbiAgICAgICAgd2VpZ2h0OiA2LFxuICAgICAgICBsb2U6IDEsXG4gICAgICAgIHJlbWVkaWF0aW9uTGluazogXCJodHRwczovL2RvY3MuYXdzLmFtYXpvbi5jb20vYWNjb3VudHMvbGF0ZXN0L3JlZmVyZW5jZS9tYW5hZ2UtYWNjdC1jcmVhdGluZy5odG1sXCJcbiAgICB9O1xuICAgIGNmYXRDaGVja3MucHVzaChNQUNoZWNrKTtcbiAgICBjb25zdCBjZmF0SWFtVXNlckNoZWNrID0ge1xuICAgICAgICBjaGVjazogXCJNYW5hZ2VtZW50IEFjY291bnQgSUFNIHVzZXJzIHJlbW92ZWRcIixcbiAgICAgICAgZGVzY3JpcHRpb246IFwiSUFNIFVzZXJzIHNob3VsZCBub3QgZXhpc3QgaW4gTWFuYWdlbWVudCBBY2NvdW50LlwiLFxuICAgICAgICBzdGF0dXM6IGNmYXRJYW1Vc2VyUGFzcyA/IFwiY29tcGxldGVcIiA6IFwiaW5jb21wbGV0ZVwiLFxuICAgICAgICByZXF1aXJlZDogZmFsc2UsXG4gICAgICAgIHdlaWdodDogNCxcbiAgICAgICAgbG9lOiAxLFxuICAgICAgICByZW1lZGlhdGlvbkxpbms6IFwiaHR0cHM6Ly9kb2NzLmF3cy5hbWF6b24uY29tL0lBTS9sYXRlc3QvVXNlckd1aWRlL2lkX3VzZXJzX21hbmFnZS5odG1sI2lkX3VzZXJzX2RlbGV0aW5nXCJcbiAgICB9O1xuICAgIGNmYXRDaGVja3MucHVzaChjZmF0SWFtVXNlckNoZWNrKTtcbiAgICBjb25zdCBjZmF0RWMyQ2hlY2sgPSB7XG4gICAgICAgIGNoZWNrOiBcIk1hbmFnZW1lbnQgQWNjb3VudCBFQzIgaW5zdGFuY2VzIHJlbW92ZWRcIixcbiAgICAgICAgZGVzY3JpcHRpb246IFwiRUMyIEluc3RhbmNlcyBzaG91bGQgbm90IGV4aXN0IGluIE1hbmFnZW1lbnQgQWNjb3VudC5cIixcbiAgICAgICAgc3RhdHVzOiBjZmF0RWMyUGFzcyA/IFwiY29tcGxldGVcIiA6IFwiaW5jb21wbGV0ZVwiLFxuICAgICAgICByZXF1aXJlZDogZmFsc2UsXG4gICAgICAgIHdlaWdodDogNCxcbiAgICAgICAgbG9lOiAxLFxuICAgICAgICByZW1lZGlhdGlvbkxpbms6IFwiaHR0cHM6Ly9kb2NzLmF3cy5hbWF6b24uY29tL0FXU0VDMi9sYXRlc3QvVXNlckd1aWRlL3Rlcm1pbmF0aW5nLWluc3RhbmNlcy5odG1sXCJcbiAgICB9O1xuICAgIGNmYXRDaGVja3MucHVzaChjZmF0RWMyQ2hlY2spO1xuICAgIGNvbnN0IGNmYXRWcGNDaGVjayA9IHtcbiAgICAgICAgY2hlY2s6IFwiTWFuYWdlbWVudCBBY2NvdW50IFZQQ3MgcmVtb3ZlZFwiLFxuICAgICAgICBkZXNjcmlwdGlvbjogXCJNYW5hZ2VtZW50IEFjY291bnQgc2hvdWxkIG5vdCBoYXZlIGFueSBWUENzLlwiLFxuICAgICAgICBzdGF0dXM6IGNmYXRWcGNQYXNzID8gXCJjb21wbGV0ZVwiIDogXCJpbmNvbXBsZXRlXCIsXG4gICAgICAgIHJlcXVpcmVkOiBmYWxzZSxcbiAgICAgICAgd2VpZ2h0OiA0LFxuICAgICAgICBsb2U6IDEsXG4gICAgICAgIHJlbWVkaWF0aW9uTGluazogXCJodHRwczovL2dpdGh1Yi5jb20vY2xvdWQtZm91bmRhdGlvbnMtb24tYXdzL2Nsb3VkLWZvdW5kYXRpb25zLXRlbXBsYXRlcy9ibG9iL21haW4vbmV0d29yay9uZXR3b3JrLWRlZmF1bHQtdnBjLWRlbGV0aW9uL1JFQURNRS5tZFwiXG4gICAgfTtcbiAgICBjZmF0Q2hlY2tzLnB1c2goY2ZhdFZwY0NoZWNrKTtcbiAgICBjb25zdCBjZmF0TGVnYWN5Q3VyQ2hlY2sgPSB7XG4gICAgICAgIGNoZWNrOiBcIkxlZ2FjeSBDVVIgc2V0dXBcIixcbiAgICAgICAgZGVzY3JpcHRpb246IFwiTGVnYWN5IENvc3QgYW5kIFVzYWdlIFJlcG9ydCAoQ1VSKSBzaG91bGQgYmUgc2V0dXAgb3IgZGF0YSBleHBvcnRzLlwiLFxuICAgICAgICBzdGF0dXM6IHJlcG9ydC5pc0xlZ2FjeUN1clNldHVwID8gXCJjb21wbGV0ZVwiIDogXCJpbmNvbXBsZXRlXCIsXG4gICAgICAgIHJlcXVpcmVkOiBmYWxzZSxcbiAgICAgICAgd2VpZ2h0OiA0LFxuICAgICAgICBsb2U6IDEsXG4gICAgICAgIHJlbWVkaWF0aW9uTGluazogXCJodHRwczovL2RvY3MuYXdzLmFtYXpvbi5jb20vY3VyL2xhdGVzdC91c2VyZ3VpZGUvZGF0YWV4cG9ydHMtY3JlYXRlLWxlZ2FjeS5odG1sXCJcbiAgICB9O1xuICAgIGNvbnN0IGNmYXRDbG91ZFRyYWlsQ2hlY2sgPSB7XG4gICAgICAgIGNoZWNrOiBcIkNsb3VkVHJhaWwgVHJhaWwgY3JlYXRlZFwiLFxuICAgICAgICBkZXNjcmlwdGlvbjogXCJDbG91ZFRyYWlsIHNob3VsZCBiZSBlbmFibGVkIHdpdGhpbiB0aGUgYWNjb3VudC5cIixcbiAgICAgICAgc3RhdHVzOiBjZmF0Q2xvdWRUcmFpbFBhc3MgPyBcImNvbXBsZXRlXCIgOiBcImluY29tcGxldGVcIixcbiAgICAgICAgcmVxdWlyZWQ6IHRydWUsXG4gICAgICAgIHdlaWdodDogNixcbiAgICAgICAgbG9lOiAzLFxuICAgICAgICByZW1lZGlhdGlvbkxpbms6IFwiaHR0cHM6Ly9kb2NzLmF3cy5hbWF6b24uY29tL2F3c2Nsb3VkdHJhaWwvbGF0ZXN0L3VzZXJndWlkZS9jcmVhdGluZy10cmFpbC1vcmdhbml6YXRpb24uaHRtbFwiXG4gICAgfTtcbiAgICBjZmF0Q2hlY2tzLnB1c2goY2ZhdENsb3VkVHJhaWxDaGVjayk7XG4gICAgY29uc3QgY2ZhdENsb3VkVHJhaWxPcmdTZXJ2aWNlRW5hYmxlZENoZWNrID0ge1xuICAgICAgICBjaGVjazogXCJDbG91ZFRyYWlsIE9yZ2FuaXphdGlvbiBTZXJ2aWNlIGVuYWJsZWRcIixcbiAgICAgICAgZGVzY3JpcHRpb246IFwiQ2xvdWRUcmFpbCBzaG91bGQgYmUgZW5hYmxlZCBvbiB0aGUgT3JnYW5pemF0aW9uLlwiLFxuICAgICAgICBzdGF0dXM6IGNmYXRDbG91ZFRyYWlsT3JnU2VydmljZUVuYWJsZWRQYXNzID8gXCJjb21wbGV0ZVwiIDogXCJpbmNvbXBsZXRlXCIsXG4gICAgICAgIHJlcXVpcmVkOiB0cnVlLFxuICAgICAgICB3ZWlnaHQ6IDYsXG4gICAgICAgIGxvZTogMSxcbiAgICAgICAgcmVtZWRpYXRpb25MaW5rOiBcImh0dHBzOi8vZG9jcy5hd3MuYW1hem9uLmNvbS9vcmdhbml6YXRpb25zL2xhdGVzdC91c2VyZ3VpZGUvc2VydmljZXMtdGhhdC1jYW4taW50ZWdyYXRlLWNsb3VkdHJhaWwuaHRtbFwiXG4gICAgfTtcbiAgICBjZmF0Q2hlY2tzLnB1c2goY2ZhdENsb3VkVHJhaWxPcmdTZXJ2aWNlRW5hYmxlZENoZWNrKTtcbiAgICBjb25zdCBjZmF0Q2xvdWRUcmFpbE9yZ1RyYWlsQ2hlY2sgPSB7XG4gICAgICAgIGNoZWNrOiBcIkNsb3VkVHJhaWwgT3JnIFRyYWlsIGRlcGxveWVkXCIsXG4gICAgICAgIGRlc2NyaXB0aW9uOiBcIkF0IGxlYXN0IG9uZSBDbG91ZFRyYWlsIE9yZ2FuaXphdGlvbiBUcmFpbCBzaG91bGQgYmUgZW5hYmxlZC5cIixcbiAgICAgICAgc3RhdHVzOiBjZmF0Q2xvdWRUcmFpbE9yZ1RyYWlsUGFzcyA/IFwiY29tcGxldGVcIiA6IFwiaW5jb21wbGV0ZVwiLFxuICAgICAgICByZXF1aXJlZDogdHJ1ZSxcbiAgICAgICAgd2VpZ2h0OiA2LFxuICAgICAgICBsb2U6IDEsXG4gICAgICAgIHJlbWVkaWF0aW9uTGluazogXCJodHRwczovL2RvY3MuYXdzLmFtYXpvbi5jb20vYXdzY2xvdWR0cmFpbC9sYXRlc3QvdXNlcmd1aWRlL2NyZWF0aW5nLXRyYWlsLW9yZ2FuaXphdGlvbi5odG1sXCJcbiAgICB9O1xuICAgIGNmYXRDaGVja3MucHVzaChjZmF0Q2xvdWRUcmFpbE9yZ1RyYWlsQ2hlY2spO1xuICAgIGNvbnN0IGNmYXRDb25maWdNYW5hZ2VtZW50QWNjb3VudENoZWNrID0ge1xuICAgICAgICBjaGVjazogXCJDb25maWcgUmVjb3JkZXIgaW4gTWFuYWdlbWVudCBBY2NvdW50IGNvbmZpZ3VyZWRcIixcbiAgICAgICAgZGVzY3JpcHRpb246IFwiQ29uZmlnIFJlY29yZGVyIGluIHRoZSBNYW5hZ2VtZW50IEFjY291bnQgc2hvdWxkIGJlIGVuYWJsZWQuXCIsXG4gICAgICAgIHN0YXR1czogY2ZhdENvbmZpZ01hbmFnZW1lbnRBY2NvdW50UGFzcyA/IFwiY29tcGxldGVcIiA6IFwiaW5jb21wbGV0ZVwiLFxuICAgICAgICByZXF1aXJlZDogdHJ1ZSxcbiAgICAgICAgd2VpZ2h0OiA2LFxuICAgICAgICBsb2U6IDIsXG4gICAgICAgIHJlbWVkaWF0aW9uTGluazogXCJodHRwczovL2F3cy5hbWF6b24uY29tL2Jsb2dzL210L21hbmFnaW5nLWF3cy1vcmdhbml6YXRpb25zLWFjY291bnRzLXVzaW5nLWF3cy1jb25maWctYW5kLWF3cy1jbG91ZGZvcm1hdGlvbi1zdGFja3NldHMvXCJcbiAgICB9O1xuICAgIGNmYXRDaGVja3MucHVzaChjZmF0Q29uZmlnTWFuYWdlbWVudEFjY291bnRDaGVjayk7XG4gICAgY29uc3QgY2ZhdENvbmZpZ1JlY29yZGVyTWFuYWdlbWVudEFjY291bnRDaGVjayA9IHtcbiAgICAgICAgY2hlY2s6IFwiQ29uZmlnIERlbGl2ZXJ5IENoYW5uZWwgaW4gTWFuYWdlbWVudCBBY2NvdW50IGNvbmZpZ3VyZWRcIixcbiAgICAgICAgZGVzY3JpcHRpb246IFwiQ29uZmlnIERlbGl2ZXJ5IENoYW5uZWwgaW4gTWFuYWdlbWVudCBBY2NvdW50IHNob3VsZCBiZSBlbmFibGVkLlwiLFxuICAgICAgICBzdGF0dXM6IGNmYXRDb25maWdSZWNvcmRlck1hbmFnZW1lbnRBY2NvdW50UGFzcyA/IFwiY29tcGxldGVcIiA6IFwiaW5jb21wbGV0ZVwiLFxuICAgICAgICByZXF1aXJlZDogdHJ1ZSxcbiAgICAgICAgd2VpZ2h0OiA2LFxuICAgICAgICBsb2U6IDIsXG4gICAgICAgIHJlbWVkaWF0aW9uTGluazogXCJodHRwczovL2F3cy5hbWF6b24uY29tL2Jsb2dzL210L21hbmFnaW5nLWF3cy1vcmdhbml6YXRpb25zLWFjY291bnRzLXVzaW5nLWF3cy1jb25maWctYW5kLWF3cy1jbG91ZGZvcm1hdGlvbi1zdGFja3NldHMvXCJcbiAgICB9O1xuICAgIGNmYXRDaGVja3MucHVzaChjZmF0Q29uZmlnUmVjb3JkZXJNYW5hZ2VtZW50QWNjb3VudENoZWNrKTtcbiAgICBjb25zdCBjZmF0Q2xvdWRGb3JtYXRpb25FbmFibGVDaGVjayA9IHtcbiAgICAgICAgY2hlY2s6IFwiQ2xvdWRGb3JtYXRpb24gU3RhY2tTZXRzIGFjdGl2YXRlZFwiLFxuICAgICAgICBkZXNjcmlwdGlvbjogXCJDbG91ZEZvcm1hdGlvbiBTdGFja1NldHMgc2hvdWxkIGJlIGFjdGl2YXRlZCBpbiB0aGUgQ2xvdWRGb3JtYXRpb24gY29uc29sZS5cIixcbiAgICAgICAgc3RhdHVzOiBjZmF0T3JnQ2xvdWRGb3JtYXRpb25FbmFibGVkUGFzcyA/IFwiY29tcGxldGVcIiA6IFwiaW5jb21wbGV0ZVwiLFxuICAgICAgICByZXF1aXJlZDogZmFsc2UsXG4gICAgICAgIHdlaWdodDogNSxcbiAgICAgICAgbG9lOiAxLFxuICAgICAgICByZW1lZGlhdGlvbkxpbms6IFwiaHR0cHM6Ly9kb2NzLmF3cy5hbWF6b24uY29tL29yZ2FuaXphdGlvbnMvbGF0ZXN0L3VzZXJndWlkZS9zZXJ2aWNlcy10aGF0LWNhbi1pbnRlZ3JhdGUtY2xvdWRmb3JtYXRpb24uaHRtbCNpbnRlZ3JhdGUtZW5hYmxlLXRhLWNsb3VkZm9ybWF0aW9uXCJcbiAgICB9O1xuICAgIGNmYXRDaGVja3MucHVzaChjZmF0Q2xvdWRGb3JtYXRpb25FbmFibGVDaGVjayk7XG4gICAgY29uc3QgY2ZhdE9yZ1NlcnZpY2VHdWFyZER1dHlDaGVjayA9IHtcbiAgICAgICAgY2hlY2s6IFwiR3VhcmREdXR5IE9yZ2FuaXphdGlvbiBzZXJ2aWNlIGVuYWJsZWRcIixcbiAgICAgICAgZGVzY3JpcHRpb246IFwiR3VhcmREdXR5IE9yZ2FuaXphdGlvbiBzZXJ2aWNlcyBzaG91bGQgYmUgZW5hYmxlZC5cIixcbiAgICAgICAgc3RhdHVzOiBjZmF0T3JnU2VydmljZUd1YXJkRHV0eUVuYWJsZWRQYXNzID8gXCJjb21wbGV0ZVwiIDogXCJpbmNvbXBsZXRlXCIsXG4gICAgICAgIHJlcXVpcmVkOiBmYWxzZSxcbiAgICAgICAgd2VpZ2h0OiA0LFxuICAgICAgICBsb2U6IDEsXG4gICAgICAgIHJlbWVkaWF0aW9uTGluazogXCJodHRwczovL2RvY3MuYXdzLmFtYXpvbi5jb20vb3JnYW5pemF0aW9ucy9sYXRlc3QvdXNlcmd1aWRlL3NlcnZpY2VzLXRoYXQtY2FuLWludGVncmF0ZS1ndWFyZGR1dHkuaHRtbCNpbnRlZ3JhdGUtZW5hYmxlLXRhLWd1YXJkZHV0eVwiXG4gICAgfTtcbiAgICBjZmF0Q2hlY2tzLnB1c2goY2ZhdE9yZ1NlcnZpY2VHdWFyZER1dHlDaGVjayk7XG4gICAgY29uc3QgY2ZhdE9yZ1NlcnZpY2VSYW1DaGVjayA9IHtcbiAgICAgICAgY2hlY2s6IFwiUkFNIE9yZ2FuaXphdGlvbiBzZXJ2aWNlIGVuYWJsZWRcIixcbiAgICAgICAgZGVzY3JpcHRpb246IFwiUmVzb3VyY2UgQWNjZXNzIE1hbmFnZXIgKFJBTSkgdHJ1c3RlZCBhY2Nlc3Mgc2hvdWxkIGJlIGVuYWJsZWQgaW4gdGhlIEFXUyBPcmdhbml6YXRpb24uXCIsXG4gICAgICAgIHN0YXR1czogY2ZhdE9yZ1NlcnZpY2VSYW1FbmFibGVkUGFzcyA/IFwiY29tcGxldGVcIiA6IFwiaW5jb21wbGV0ZVwiLFxuICAgICAgICByZXF1aXJlZDogZmFsc2UsXG4gICAgICAgIHdlaWdodDogNCxcbiAgICAgICAgbG9lOiAxLFxuICAgICAgICByZW1lZGlhdGlvbkxpbms6IFwiaHR0cHM6Ly9kb2NzLmF3cy5hbWF6b24uY29tL29yZ2FuaXphdGlvbnMvbGF0ZXN0L3VzZXJndWlkZS9zZXJ2aWNlcy10aGF0LWNhbi1pbnRlZ3JhdGUtcmFtLmh0bWwjaW50ZWdyYXRlLWVuYWJsZS10YS1yYW1cIlxuICAgIH07XG4gICAgY2ZhdENoZWNrcy5wdXNoKGNmYXRPcmdTZXJ2aWNlUmFtQ2hlY2spO1xuICAgIGNvbnN0IGNmYXRPcmdTZXJ2aWNlU2VjdXJpdHlIdWJDaGVjayA9IHtcbiAgICAgICAgY2hlY2s6IFwiU2VjdXJpdHkgSHViIE9yZ2FuaXphdGlvbiBzZXJ2aWNlIGVuYWJsZWRcIixcbiAgICAgICAgZGVzY3JpcHRpb246IFwiU2VjdXJpdHkgSHViIHRydXN0ZWQgYWNjZXNzIHNob3VsZCBiZSBlbmFibGVkIGluIHRoZSBBV1MgT3JnYW5pemF0aW9uLlwiLFxuICAgICAgICBzdGF0dXM6IGNmYXRPcmdTZXJ2aWNlU2VjdXJpdHlIdWJFbmFibGVkUGFzcyA/IFwiY29tcGxldGVcIiA6IFwiaW5jb21wbGV0ZVwiLFxuICAgICAgICByZXF1aXJlZDogZmFsc2UsXG4gICAgICAgIHdlaWdodDogNCxcbiAgICAgICAgbG9lOiAxLFxuICAgICAgICByZW1lZGlhdGlvbkxpbms6IFwiaHR0cHM6Ly9kb2NzLmF3cy5hbWF6b24uY29tL29yZ2FuaXphdGlvbnMvbGF0ZXN0L3VzZXJndWlkZS9zZXJ2aWNlcy10aGF0LWNhbi1pbnRlZ3JhdGUtc2VjdXJpdHlodWIuaHRtbCNpbnRlZ3JhdGUtZW5hYmxlLXRhLXNlY3VyaXR5aHViXCJcbiAgICB9O1xuICAgIGNmYXRDaGVja3MucHVzaChjZmF0T3JnU2VydmljZVNlY3VyaXR5SHViQ2hlY2spO1xuICAgIGNvbnN0IGNmYXRPcmdTZXJ2aWNlSWFtQWNjZXNzQW5hbHl6ZXJDaGVjayA9IHtcbiAgICAgICAgY2hlY2s6IFwiSUFNIEFjY2VzcyBBbmFseXplciBPcmdhbml6YXRpb24gc2VydmljZSBlbmFibGVkXCIsXG4gICAgICAgIGRlc2NyaXB0aW9uOiBcIklBTSBBY2Nlc3MgQW5hbHl6ZXIgdHJ1c3RlZCBhY2Nlc3Mgc2hvdWxkIGJlIGVuYWJsZWQgaW4gdGhlIEFXUyBPcmdhbml6YXRpb24uXCIsXG4gICAgICAgIHN0YXR1czogY2ZhdE9yZ1NlcnZpY2VJYW1BY2Nlc3NBbmFseXplckVuYWJsZWRQYXNzID8gXCJjb21wbGV0ZVwiIDogXCJpbmNvbXBsZXRlXCIsXG4gICAgICAgIHJlcXVpcmVkOiBmYWxzZSxcbiAgICAgICAgd2VpZ2h0OiA0LFxuICAgICAgICBsb2U6IDEsXG4gICAgICAgIHJlbWVkaWF0aW9uTGluazogXCJodHRwczovL2RvY3MuYXdzLmFtYXpvbi5jb20vSUFNL2xhdGVzdC9Vc2VyR3VpZGUvYWNjZXNzLWFuYWx5emVyLWdldHRpbmctc3RhcnRlZC5odG1sI2FjY2Vzcy1hbmFseXplci1lbmFibGluZ1wiXG4gICAgfTtcbiAgICBjZmF0Q2hlY2tzLnB1c2goY2ZhdE9yZ1NlcnZpY2VJYW1BY2Nlc3NBbmFseXplckNoZWNrKTtcbiAgICBjb25zdCBjZmF0T3JnU2VydmljZUNvbmZpZ0NoZWNrID0ge1xuICAgICAgICBjaGVjazogXCJDb25maWcgT3JnYW5pemF0aW9uIHNlcnZpY2UgZW5hYmxlZFwiLFxuICAgICAgICBkZXNjcmlwdGlvbjogXCJBV1MgQ29uZmlnIHRydXN0ZWQgYWNjZXNzIHNob3VsZCBiZSBlbmFibGVkIGluIHRoZSBBV1MgT3JnYW5pemF0aW9uLlwiLFxuICAgICAgICBzdGF0dXM6IGNmYXRPcmdTZXJ2aWNlQXdzQ29uZmlnRW5hYmxlZFBhc3MgPyBcImNvbXBsZXRlXCIgOiBcImluY29tcGxldGVcIixcbiAgICAgICAgcmVxdWlyZWQ6IGZhbHNlLFxuICAgICAgICB3ZWlnaHQ6IDQsXG4gICAgICAgIGxvZTogMSxcbiAgICAgICAgcmVtZWRpYXRpb25MaW5rOiBcImh0dHBzOi8vZG9jcy5hd3MuYW1hem9uLmNvbS9vcmdhbml6YXRpb25zL2xhdGVzdC91c2VyZ3VpZGUvc2VydmljZXMtdGhhdC1jYW4taW50ZWdyYXRlLWNvbmZpZy5odG1sI2ludGVncmF0ZS1lbmFibGUtdGEtY29uZmlnXCJcbiAgICB9O1xuICAgIGNmYXRDaGVja3MucHVzaChjZmF0T3JnU2VydmljZUNvbmZpZ0NoZWNrKTtcbiAgICBjb25zdCBjZmF0T3JnU2VydmljZUNsb3VkRm9ybWF0aW9uQ2hlY2sgPSB7XG4gICAgICAgIGNoZWNrOiBcIkNsb3VkRm9ybWF0aW9uIE9yZ2FuaXphdGlvbiBzZXJ2aWNlIGVuYWJsZWRcIixcbiAgICAgICAgZGVzY3JpcHRpb246IFwiQ2xvdWRGb3JtYXRpb24gdHJ1c3RlZCBhY2Nlc3Mgc2hvdWxkIGJlIGVuYWJsZWQgaW4gdGhlIEFXUyBPcmdhbml6YXRpb24uXCIsXG4gICAgICAgIHN0YXR1czogY2ZhdE9yZ0Nsb3VkRm9ybWF0aW9uU3RhdHVzUGFzcyA/IFwiY29tcGxldGVcIiA6IFwiaW5jb21wbGV0ZVwiLFxuICAgICAgICByZXF1aXJlZDogZmFsc2UsXG4gICAgICAgIHdlaWdodDogNSxcbiAgICAgICAgbG9lOiAxLFxuICAgICAgICByZW1lZGlhdGlvbkxpbms6IFwiaHR0cHM6Ly9kb2NzLmF3cy5hbWF6b24uY29tL0FXU0Nsb3VkRm9ybWF0aW9uL2xhdGVzdC9Vc2VyR3VpZGUvc3RhY2tzZXRzLW9yZ3MtYWN0aXZhdGUtdHJ1c3RlZC1hY2Nlc3MuaHRtbFwiXG4gICAgfTtcbiAgICBjZmF0Q2hlY2tzLnB1c2goY2ZhdE9yZ1NlcnZpY2VDbG91ZEZvcm1hdGlvbkNoZWNrKTtcbiAgICBjb25zdCBjZmF0T3JnU2VydmljZUJhY2t1cENoZWNrID0ge1xuICAgICAgICBjaGVjazogXCJCYWNrdXAgT3JnYW5pemF0aW9uIHNlcnZpY2UgZW5hYmxlZFwiLFxuICAgICAgICBkZXNjcmlwdGlvbjogXCJCYWNrdXAgdHJ1c3RlZCBhY2Nlc3Mgc2hvdWxkIGJlIGVuYWJsZWQgaW4gdGhlIEFXUyBPcmdhbml6YXRpb24uXCIsXG4gICAgICAgIHN0YXR1czogY2ZhdE9yZ1NlcnZpY2VCYWNrdXBFbmFibGVkUGFzcyA/IFwiY29tcGxldGVcIiA6IFwiaW5jb21wbGV0ZVwiLFxuICAgICAgICByZXF1aXJlZDogZmFsc2UsXG4gICAgICAgIHdlaWdodDogNCxcbiAgICAgICAgbG9lOiAxLFxuICAgICAgICByZW1lZGlhdGlvbkxpbms6IFwiaHR0cHM6Ly9kb2NzLmF3cy5hbWF6b24uY29tL29yZ2FuaXphdGlvbnMvbGF0ZXN0L3VzZXJndWlkZS9zZXJ2aWNlcy10aGF0LWNhbi1pbnRlZ3JhdGUtYmFja3VwLmh0bWwjaW50ZWdyYXRlLWVuYWJsZS10YS1iYWNrdXBcIlxuICAgIH07XG4gICAgY29uc3QgY2ZhdEluZnJhT3VDaGVjayA9IHtcbiAgICAgICAgY2hlY2s6IFwiVG9wLWxldmVsIEluZnJhc3RydWN0dXJlIE9VIGRlcGxveWVkXCIsXG4gICAgICAgIGRlc2NyaXB0aW9uOiBcIlRvcC1sZXZlbCBJbmZyYXN0cnVjdHVyZSBPVSBzaG91bGQgZXhpc3QuXCIsXG4gICAgICAgIHN0YXR1czogaW5mcmFzdHJ1Y3R1cmVGb3VuZCA/IFwiY29tcGxldGVcIiA6IFwiaW5jb21wbGV0ZVwiLFxuICAgICAgICByZXF1aXJlZDogZmFsc2UsXG4gICAgICAgIHdlaWdodDogNSxcbiAgICAgICAgbG9lOiAyLFxuICAgICAgICByZW1lZGlhdGlvbkxpbms6IFwiaHR0cHM6Ly9jYXRhbG9nLndvcmtzaG9wcy5hd3MvY29udHJvbC10b3dlci9lbi1VUy9pbnRyb2R1Y3Rpb24vbWFuYWdlLW91XCJcbiAgICB9O1xuICAgIGNmYXRDaGVja3MucHVzaChjZmF0SW5mcmFPdUNoZWNrKTtcbiAgICBjb25zdCBjZmF0U2VjdXJpdHlPdUNoZWNrID0ge1xuICAgICAgICBjaGVjazogXCJUb3AtbGV2ZWwgU2VjdXJpdHkgT1UgZGVwbG95ZWRcIixcbiAgICAgICAgZGVzY3JpcHRpb246IFwiVG9wLWxldmVsIFNlY3VyaXR5IE9VIHNob3VsZCBleGlzdC5cIixcbiAgICAgICAgc3RhdHVzOiBzZWN1cml0eUZvdW5kID8gXCJjb21wbGV0ZVwiIDogXCJpbmNvbXBsZXRlXCIsXG4gICAgICAgIHJlcXVpcmVkOiB0cnVlLFxuICAgICAgICB3ZWlnaHQ6IDYsXG4gICAgICAgIGxvZTogMixcbiAgICAgICAgcmVtZWRpYXRpb25MaW5rOiBcImh0dHBzOi8vY2F0YWxvZy53b3Jrc2hvcHMuYXdzL2NvbnRyb2wtdG93ZXIvZW4tVVMvaW50cm9kdWN0aW9uL21hbmFnZS1vdVwiXG4gICAgfTtcbiAgICBjZmF0Q2hlY2tzLnB1c2goY2ZhdFNlY3VyaXR5T3VDaGVjayk7XG4gICAgY29uc3QgY2ZhdFdvcmtsb2FkT3VDaGVjayA9IHtcbiAgICAgICAgY2hlY2s6IFwiVG9wLWxldmVsIFdvcmtsb2FkcyBPVSBkZXBsb3llZFwiLFxuICAgICAgICBkZXNjcmlwdGlvbjogXCJUb3AtbGV2ZWwgV29ya2xvYWRzIE9VIHNob3VsZCBleGlzdC5cIixcbiAgICAgICAgc3RhdHVzOiB3b3JrbG9hZHNGb3VuZCA/IFwiY29tcGxldGVcIiA6IFwiaW5jb21wbGV0ZVwiLFxuICAgICAgICByZXF1aXJlZDogZmFsc2UsXG4gICAgICAgIHdlaWdodDogNSxcbiAgICAgICAgbG9lOiAyLFxuICAgICAgICByZW1lZGlhdGlvbkxpbms6IFwiaHR0cHM6Ly9jYXRhbG9nLndvcmtzaG9wcy5hd3MvY29udHJvbC10b3dlci9lbi1VUy9pbnRyb2R1Y3Rpb24vbWFuYWdlLW91XCJcbiAgICB9O1xuICAgIGNmYXRDaGVja3MucHVzaChjZmF0V29ya2xvYWRPdUNoZWNrKTtcbiAgICBjb25zdCBjZmF0SWFtSWRDT3JnU2VydmljZUNoZWNrID0ge1xuICAgICAgICBjaGVjazogXCJJQU0gSWRDIE9yZ2FuaXphdGlvbiBzZXJ2aWNlIGVuYWJsZWRcIixcbiAgICAgICAgZGVzY3JpcHRpb246IFwiSUFNIElkZW50aXR5IENlbnRlciB0cnVzdGVkIGFjY2VzcyBzaG91bGQgYmUgZW5hYmxlZCBpbiB0aGUgQVdTIE9yZ2FuaXphdGlvblwiLFxuICAgICAgICBzdGF0dXM6IGNmYXRJYW1JZFBPcmdTZXJ2aWNlUGFzcyA/IFwiY29tcGxldGVcIiA6IFwiaW5jb21wbGV0ZVwiLFxuICAgICAgICByZXF1aXJlZDogdHJ1ZSxcbiAgICAgICAgd2VpZ2h0OiA2LFxuICAgICAgICBsb2U6IDEsXG4gICAgICAgIHJlbWVkaWF0aW9uTGluazogXCJodHRwczovL2RvY3MuYXdzLmFtYXpvbi5jb20vc2luZ2xlc2lnbm9uL2xhdGVzdC91c2VyZ3VpZGUvZ2V0LXNldC11cC1mb3ItaWRjLmh0bWxcIlxuICAgIH07XG4gICAgY2ZhdENoZWNrcy5wdXNoKGNmYXRJYW1JZENPcmdTZXJ2aWNlQ2hlY2spO1xuICAgIGNvbnN0IGNmYXRJYW1JZGNDb25maWd1cmVkQ2hlY2sgPSB7XG4gICAgICAgIGNoZWNrOiBcIklBTSBJZEMgY29uZmlndXJlZFwiLFxuICAgICAgICBkZXNjcmlwdGlvbjogXCJJQU0gSWRlbnRpdHkgQ2VudGVyIHNob3VsZCBiZSBjb25maWd1cmVkLlwiLFxuICAgICAgICBzdGF0dXM6IGNmYXRJYW1JZGNDb25maWd1cmVkUGFzcyA/IFwiY29tcGxldGVcIiA6IFwiaW5jb21wbGV0ZVwiLFxuICAgICAgICByZXF1aXJlZDogdHJ1ZSxcbiAgICAgICAgd2VpZ2h0OiA2LFxuICAgICAgICBsb2U6IDMsXG4gICAgICAgIHJlbWVkaWF0aW9uTGluazogXCJodHRwczovL2RvY3MuYXdzLmFtYXpvbi5jb20vc2luZ2xlc2lnbm9uL2xhdGVzdC91c2VyZ3VpZGUvdHV0b3JpYWxzLmh0bWxcIlxuICAgIH07XG4gICAgY2ZhdENoZWNrcy5wdXNoKGNmYXRJYW1JZGNDb25maWd1cmVkQ2hlY2spO1xuICAgIGNvbnN0IGNmYXRPcmdQb2xpY3lTY3BFbmFibGVkID0ge1xuICAgICAgICBjaGVjazogXCJTZXJ2aWNlIENvbnRyb2wgUG9saWNpZXMgZW5hYmxlZFwiLFxuICAgICAgICBkZXNjcmlwdGlvbjogXCJTZXJ2aWNlIENvbnRyb2wgUG9saWN5IHNob3VsZCBiZSBlbmFibGVkIHdpdGhpbiB0aGUgQVdTIE9yZ2FuaXphdGlvbi5cIixcbiAgICAgICAgc3RhdHVzOiBjZmF0U2NwRW5hYmxlZFBhc3MgPyBcImNvbXBsZXRlXCIgOiBcImluY29tcGxldGVcIixcbiAgICAgICAgcmVxdWlyZWQ6IHRydWUsXG4gICAgICAgIHdlaWdodDogNixcbiAgICAgICAgbG9lOiAxLFxuICAgICAgICByZW1lZGlhdGlvbkxpbms6IFwiaHR0cHM6Ly9kb2NzLmF3cy5hbWF6b24uY29tL29yZ2FuaXphdGlvbnMvbGF0ZXN0L3VzZXJndWlkZS9vcmdzX21hbmFnZV9wb2xpY2llc19lbmFibGUtZGlzYWJsZS5odG1sXCJcbiAgICB9O1xuICAgIGNmYXRDaGVja3MucHVzaChjZmF0T3JnUG9saWN5U2NwRW5hYmxlZCk7XG4gICAgY29uc3QgY2ZhdE9yZ1BvbGljeVRhZ1BvbGljeUNoZWNrID0ge1xuICAgICAgICBjaGVjazogXCJPcmdhbml6YXRpb24gVGFnIFBvbGljeSBlbmFibGVkXCIsXG4gICAgICAgIGRlc2NyaXB0aW9uOiBcIlRhZyBQb2xpY3kgc2hvdWxkIGJlIGVuYWJsZWQgd2l0aGluIHRoZSBBV1MgT3JnYW5pemF0aW9uLlwiLFxuICAgICAgICBzdGF0dXM6IGNmYXRUYWdQb2xpY2llc0VuYWJsZWRQYXNzID8gXCJjb21wbGV0ZVwiIDogXCJpbmNvbXBsZXRlXCIsXG4gICAgICAgIHJlcXVpcmVkOiB0cnVlLFxuICAgICAgICB3ZWlnaHQ6IDYsXG4gICAgICAgIGxvZTogMSxcbiAgICAgICAgcmVtZWRpYXRpb25MaW5rOiBcImh0dHBzOi8vZG9jcy5hd3MuYW1hem9uLmNvbS9vcmdhbml6YXRpb25zL2xhdGVzdC91c2VyZ3VpZGUvb3Jnc19tYW5hZ2VfcG9saWNpZXNfZW5hYmxlLWRpc2FibGUuaHRtbFwiXG4gICAgfTtcbiAgICBjZmF0Q2hlY2tzLnB1c2goY2ZhdE9yZ1BvbGljeVRhZ1BvbGljeUNoZWNrKTtcbiAgICBjb25zdCBjZmF0QmFja3VwUG9saWNpZXNFbmFibGVkQ2hlY2sgPSB7XG4gICAgICAgIGNoZWNrOiBcIk9yZ2FuaXphdGlvbiBCYWNrdXAgUG9saWN5IGVuYWJsZWRcIixcbiAgICAgICAgZGVzY3JpcHRpb246IFwiQmFja3VwIFBvbGljeSBzaG91bGQgYmUgZW5hYmxlZCB3aXRoaW4gdGhlIEFXUyBPcmdhbml6YXRpb24uXCIsXG4gICAgICAgIHN0YXR1czogY2ZhdEJhY2t1cFBvbGljaWVzRW5hYmxlZFBhc3MgPyBcImNvbXBsZXRlXCIgOiBcImluY29tcGxldGVcIixcbiAgICAgICAgcmVxdWlyZWQ6IGZhbHNlLFxuICAgICAgICB3ZWlnaHQ6IDUsXG4gICAgICAgIGxvZTogMSxcbiAgICAgICAgcmVtZWRpYXRpb25MaW5rOiBcImh0dHBzOi8vZG9jcy5hd3MuYW1hem9uLmNvbS9vcmdhbml6YXRpb25zL2xhdGVzdC91c2VyZ3VpZGUvb3Jnc19tYW5hZ2VfcG9saWNpZXNfZW5hYmxlLWRpc2FibGUuaHRtbFwiXG4gICAgfTtcbiAgICBjZmF0Q2hlY2tzLnB1c2goY2ZhdEJhY2t1cFBvbGljaWVzRW5hYmxlZENoZWNrKTtcbiAgICBjb25zdCBjZmF0Q29udHJvbFRvd2VyRGVwbG95ZWRDaGVjayA9IHtcbiAgICAgICAgY2hlY2s6IFwiQ29udHJvbCBUb3dlciBkZXBsb3llZFwiLFxuICAgICAgICBkZXNjcmlwdGlvbjogXCJDb250cm9sIFRvd2VyIHNob3VsZCBiZSBkZXBsb3llZC5cIixcbiAgICAgICAgc3RhdHVzOiBjZmF0Q29udHJvbFRvd2VyRGVwbG95ZWRQYXNzID8gXCJjb21wbGV0ZVwiIDogXCJpbmNvbXBsZXRlXCIsXG4gICAgICAgIHJlcXVpcmVkOiB0cnVlLFxuICAgICAgICB3ZWlnaHQ6IDYsXG4gICAgICAgIGxvZTogNixcbiAgICAgICAgcmVtZWRpYXRpb25MaW5rOiBcImh0dHBzOi8vY2F0YWxvZy53b3Jrc2hvcHMuYXdzL2NvbnRyb2wtdG93ZXIvZW4tVVMvcHJlcmVxdWlzaXRlcy9kZXBsb3lpbmdcIlxuICAgIH07XG4gICAgY2ZhdENoZWNrcy5wdXNoKGNmYXRDb250cm9sVG93ZXJEZXBsb3llZENoZWNrKTtcbiAgICBjb25zdCBjZmF0Q29udHJvbFRvd2VyTGF0ZXN0VmVyc2lvbkNoZWNrID0ge1xuICAgICAgICBjaGVjazogXCJDb250cm9sIFRvd2VyIGxhdGVzdCB2ZXJzaW9uXCIsXG4gICAgICAgIGRlc2NyaXB0aW9uOiBcIkNvbnRyb2wgVG93ZXIgc2hvdWxkIGJlIHRoZSBsYXRlc3QgdmVyc2lvbi5cIixcbiAgICAgICAgc3RhdHVzOiBjZmF0Q29udHJvbFRvd2VyTGF0ZXN0VmVyc2lvblBhc3MgPyBcImNvbXBsZXRlXCIgOiBcImluY29tcGxldGVcIixcbiAgICAgICAgcmVxdWlyZWQ6IGZhbHNlLFxuICAgICAgICB3ZWlnaHQ6IDUsXG4gICAgICAgIGxvZTogMixcbiAgICAgICAgcmVtZWRpYXRpb25MaW5rOiBcImh0dHBzOi8vZG9jcy5hd3MuYW1hem9uLmNvbS9jb250cm9sdG93ZXIvbGF0ZXN0L3VzZXJndWlkZS91cGRhdGUtY29udHJvbHRvd2VyLmh0bWxcIlxuICAgIH07XG4gICAgY2ZhdENoZWNrcy5wdXNoKGNmYXRDb250cm9sVG93ZXJMYXRlc3RWZXJzaW9uQ2hlY2spO1xuICAgIGNvbnN0IGNmYXRDb250cm9sVG93ZXJOb3REcmlmdGVkQ2hlY2sgPSB7XG4gICAgICAgIGNoZWNrOiBcIkNvbnRyb2wgVG93ZXIgbm90IGRyaWZ0ZWRcIixcbiAgICAgICAgZGVzY3JpcHRpb246IFwiQ29udHJvbCBUb3dlciBzaG91bGQgbm90IGJlIGRyaWZ0ZWQuXCIsXG4gICAgICAgIHN0YXR1czogY2ZhdENvbnRyb2xUb3dlck5vdERyaWZ0ZWRQYXNzID8gXCJjb21wbGV0ZVwiIDogXCJpbmNvbXBsZXRlXCIsXG4gICAgICAgIHJlcXVpcmVkOiB0cnVlLFxuICAgICAgICB3ZWlnaHQ6IDYsXG4gICAgICAgIGxvZTogMixcbiAgICAgICAgcmVtZWRpYXRpb25MaW5rOiBcImh0dHBzOi8vZG9jcy5hd3MuYW1hem9uLmNvbS9jb250cm9sdG93ZXIvbGF0ZXN0L3VzZXJndWlkZS9yZXNvbHZlLWRyaWZ0Lmh0bWxcIlxuICAgIH07XG4gICAgY2ZhdENoZWNrcy5wdXNoKGNmYXRDb250cm9sVG93ZXJOb3REcmlmdGVkQ2hlY2spO1xuICAgIGNvbnN0IGNmYXRMb2dBcmNoaXZlQWNjb3VudENoZWNrID0ge1xuICAgICAgICBjaGVjazogXCJMb2cgQXJjaGl2ZSBhY2NvdW50IGRlcGxveWVkXCIsXG4gICAgICAgIGRlc2NyaXB0aW9uOiBcIkxvZyBBcmNoaXZlIGFjY291bnQgc2hvdWxkIGV4aXN0LlwiLFxuICAgICAgICBzdGF0dXM6IGNmYXRMb2dBcmNoaXZlQWNjb3VudFBhc3MgPyBcImNvbXBsZXRlXCIgOiBcImluY29tcGxldGVcIixcbiAgICAgICAgcmVxdWlyZWQ6IHRydWUsXG4gICAgICAgIHdlaWdodDogNixcbiAgICAgICAgbG9lOiAyLFxuICAgICAgICByZW1lZGlhdGlvbkxpbms6IFwiaHR0cHM6Ly9kb2NzLmF3cy5hbWF6b24uY29tL2NvbnRyb2x0b3dlci9sYXRlc3QvdXNlcmd1aWRlL2dldHRpbmctc3RhcnRlZC1mcm9tLWNvbnNvbGUuaHRtbFwiXG4gICAgfTtcbiAgICBjZmF0Q2hlY2tzLnB1c2goY2ZhdExvZ0FyY2hpdmVBY2NvdW50Q2hlY2spO1xuICAgIGNvbnN0IGNmYXRBdWRpdEFjY291bnRDaGVjayA9IHtcbiAgICAgICAgY2hlY2s6IFwiQXVkaXQgYWNjb3VudCBkZXBsb3llZFwiLFxuICAgICAgICBkZXNjcmlwdGlvbjogXCJBdWRpdC9TZWN1cml0eSBUb29saW5nIGFjY291bnQgc2hvdWxkIGV4aXN0LlwiLFxuICAgICAgICBzdGF0dXM6IGNmYXRBdWRpdEFjY291bnRQYXNzID8gXCJjb21wbGV0ZVwiIDogXCJpbmNvbXBsZXRlXCIsXG4gICAgICAgIHJlcXVpcmVkOiB0cnVlLFxuICAgICAgICB3ZWlnaHQ6IDYsXG4gICAgICAgIGxvZTogMixcbiAgICAgICAgcmVtZWRpYXRpb25MaW5rOiBcImh0dHBzOi8vZG9jcy5hd3MuYW1hem9uLmNvbS9jb250cm9sdG93ZXIvbGF0ZXN0L3VzZXJndWlkZS9nZXR0aW5nLXN0YXJ0ZWQtZnJvbS1jb25zb2xlLmh0bWxcIlxuICAgIH07XG4gICAgY2ZhdENoZWNrcy5wdXNoKGNmYXRBdWRpdEFjY291bnRDaGVjayk7XG4gICAgcmVwb3J0LmNmYXRDaGVja3MgPSBjZmF0Q2hlY2tzO1xuICAgIGNvbnNvbGUudGFibGUoY2ZhdENoZWNrcywgW1wiY2hlY2tcIiwgXCJzdGF0dXNcIiwgXCJyZXF1aXJlZFwiLCBcImxvZVwiXSk7XG4gICAgLy8gd3JpdGUgQ0ZBVCBjaGVja3MgdG8gQ1NWIGZpbGUgZm9yIHVzZSBpbiB0aGUgQ0ZBVCByZXBvcnRcbiAgICBjb25zdCBjZmF0Q2hlY2tzQ3N2RmlsZSA9IFwiLi9jZmF0LWNoZWNrcy5jc3ZcIjtcbiAgICBjb25zb2xlLmxvZyhgd3JpdGluZyBhc3Nlc3NtZW50IHN1bW1hcnkgY2hlY2tzIHRvIC4vY2ZhdC9jZmF0LWNoZWNrcy5jc3YuLi5gKTtcbiAgICBjb25zdCBvYmplY3RBcnJheUNTViA9IG9iamVjdFRvQ1NWKGNmYXRDaGVja3MpO1xuICAgIGZzLndyaXRlRmlsZVN5bmMoY2ZhdENoZWNrc0NzdkZpbGUsIG9iamVjdEFycmF5Q1NWKTtcbiAgICBjb25zdCByZXBvcnRGaWxlID0gXCIuL2NmYXQudHh0XCI7XG4gICAgY29uc3QgdGFza3MgPSBhd2FpdCBjcmVhdGVSZXBvcnQocmVwb3J0KTtcbiAgICBjb25zdCBiYWNrbG9nID0gYXdhaXQgY3JlYXRlQmFja2xvZyhyZXBvcnQpO1xuICAgIGNvbnNvbGUubG9nKGBjbG91ZCBmb3VuZGF0aW9uIGFzc2Vzc21lbnQgY29tcGxldGUuIEFjY2VzcyB5b3VyIHJlcG9ydCBhdCAuL2NmYXQvY2ZhdC50eHRgKTtcbiAgICBjb25zb2xlLmxvZyhgYXNzZXNzbWVudCBzdW1tYXJ5IGNoZWNrcyB3cml0dGVuIHRvIC4vY2ZhdC9jZmF0LWNoZWNrcy5jc3ZgKTtcbiAgICBjcmVhdGVKaXJhSW1wb3J0KGJhY2tsb2cpO1xuICAgIGF3YWl0IGNyZWF0ZUFzYW5hSW1wb3J0KGJhY2tsb2cpO1xuICAgIGF3YWl0IHppcEFzc2Vzc21lbnRGaWxlcygpO1xuICAgIGNvbnNvbGUubG9nKGBhc3Nlc3NtZW50IGZpbGVzIHppcHBlZCB0byAuL2NmYXQvYXNzZXNzbWVudC56aXBgKTtcbn07XG5tYWluKCk7XG4iLCJpbXBvcnQgeyBFQzJDbGllbnQsIERlc2NyaWJlUmVnaW9uc0NvbW1hbmQgfSBmcm9tIFwiQGF3cy1zZGsvY2xpZW50LWVjMlwiO1xuYXN5bmMgZnVuY3Rpb24gZ2V0QWxsUmVnaW9ucygpIHtcbiAgICAvLyBncmFiYmluZyBhbGwgcmVnaW9ucyBmcm9tIHVzLWVhc3QtMVxuICAgIGNvbnN0IGVjMkNsaWVudCA9IG5ldyBFQzJDbGllbnQoeyByZWdpb246IFwidXMtZWFzdC0xXCIgfSk7XG4gICAgdHJ5IHtcbiAgICAgICAgY29uc3QgZGVzY3JpYmVSZWdpb25zQ29tbWFuZCA9IG5ldyBEZXNjcmliZVJlZ2lvbnNDb21tYW5kKHt9KTtcbiAgICAgICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBlYzJDbGllbnQuc2VuZChkZXNjcmliZVJlZ2lvbnNDb21tYW5kKTtcbiAgICAgICAgY29uc3QgcmVnaW9ucyA9IFtdO1xuICAgICAgICBmb3IgKGNvbnN0IHJlZ2lvbiBvZiByZXNwb25zZS5SZWdpb25zIHx8IFtdKSB7XG4gICAgICAgICAgICByZWdpb25zLnB1c2gocmVnaW9uLlJlZ2lvbk5hbWUgfHwgXCJcIik7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHJlZ2lvbnM7XG4gICAgfVxuICAgIGNhdGNoIChlcnJvcikge1xuICAgICAgICBjb25zb2xlLmVycm9yKFwiRXJyb3IgcmV0cmlldmluZyByZWdpb25zOlwiLCBlcnJvcik7XG4gICAgICAgIHJldHVybiBbXTtcbiAgICB9XG4gICAgZmluYWxseSB7XG4gICAgICAgIGVjMkNsaWVudC5kZXN0cm95KCk7XG4gICAgfVxufVxuZXhwb3J0IGRlZmF1bHQgZ2V0QWxsUmVnaW9ucztcbiIsImltcG9ydCB7IFNUU0NsaWVudCwgR2V0Q2FsbGVySWRlbnRpdHlDb21tYW5kIH0gZnJvbSBcIkBhd3Mtc2RrL2NsaWVudC1zdHNcIjtcbmltcG9ydCB7IE9yZ2FuaXphdGlvbnNDbGllbnQsIERlc2NyaWJlT3JnYW5pemF0aW9uQ29tbWFuZCwgfSBmcm9tIFwiQGF3cy1zZGsvY2xpZW50LW9yZ2FuaXphdGlvbnNcIjtcbmFzeW5jIGZ1bmN0aW9uIGdldEFjY291bnRJZChyZWdpb24pIHtcbiAgICBjb25zdCBzdHNDbGllbnQgPSBuZXcgU1RTQ2xpZW50KHsgcmVnaW9uIH0pO1xuICAgIHRyeSB7XG4gICAgICAgIGNvbnN0IGdldENhbGxlcklkZW50aXR5Q29tbWFuZCA9IG5ldyBHZXRDYWxsZXJJZGVudGl0eUNvbW1hbmQoe30pO1xuICAgICAgICBjb25zdCBBY2NvdW50ID0gYXdhaXQgc3RzQ2xpZW50LnNlbmQoZ2V0Q2FsbGVySWRlbnRpdHlDb21tYW5kKTtcbiAgICAgICAgcmV0dXJuIEFjY291bnQuQWNjb3VudDtcbiAgICB9XG4gICAgY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoXCJFcnJvciBnZXR0aW5nIGFjY291bnQgSUQ6XCIsIGVycm9yKTtcbiAgICAgICAgdGhyb3cgZXJyb3I7XG4gICAgfVxufVxuO1xuLy8gZnVuY3Rpb24gY2hlY2tpbmcgaWYgbWFuYWdlbWVudCBhY2NvdW50LCBtZW1iZXIgYWNjb3VudCwgb3Igc3RhbmRhbG9uZSBhY2NvdW50XG5leHBvcnQgY29uc3QgZGVmaW5lQWNjb3VudFR5cGUgPSBhc3luYyAocmVnaW9uKSA9PiB7XG4gICAgY29uc3Qgb3JnYW5pemF0aW9uc0NsaWVudCA9IG5ldyBPcmdhbml6YXRpb25zQ2xpZW50KHsgcmVnaW9uIH0pO1xuICAgIGxldCBpc0luT3JnYW5pemF0aW9uID0gZmFsc2U7XG4gICAgbGV0IGlzTWFuYWdlbWVudEFjY291bnQgPSBmYWxzZTtcbiAgICB0cnkge1xuICAgICAgICBjb25zdCBjdXJyZW50QWNjb3VudElkID0gYXdhaXQgZ2V0QWNjb3VudElkKHJlZ2lvbik7XG4gICAgICAgIGlmIChjdXJyZW50QWNjb3VudElkKSB7XG4gICAgICAgICAgICBjb25zdCBkZXNjcmliZU9yZ2FuaXphdGlvbkNvbW1hbmQgPSBuZXcgRGVzY3JpYmVPcmdhbml6YXRpb25Db21tYW5kKHt9KTtcbiAgICAgICAgICAgIGNvbnN0IGRlc2NyaWJlT3JnYW5pemF0aW9uUmVzcG9uc2UgPSBhd2FpdCBvcmdhbml6YXRpb25zQ2xpZW50LnNlbmQoZGVzY3JpYmVPcmdhbml6YXRpb25Db21tYW5kKTtcbiAgICAgICAgICAgIC8vIHRoZSBhY2NvdW50IGlzIG5vdCBzdGFuZGFsb25lIGFuZCBwYXJ0IG9mIEFXUyBPcmdhbml6YXRpb25cbiAgICAgICAgICAgIGlmIChkZXNjcmliZU9yZ2FuaXphdGlvblJlc3BvbnNlLk9yZ2FuaXphdGlvbj8uTWFzdGVyQWNjb3VudElkKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgbWFuYWdlbWVudEFjY291bnRJZCA9IGRlc2NyaWJlT3JnYW5pemF0aW9uUmVzcG9uc2UuT3JnYW5pemF0aW9uPy5NYXN0ZXJBY2NvdW50SWQ7XG4gICAgICAgICAgICAgICAgaWYgKG1hbmFnZW1lbnRBY2NvdW50SWQgPT0gY3VycmVudEFjY291bnRJZCkge1xuICAgICAgICAgICAgICAgICAgICAvLyB0aGlzIGlzIGFuIG9yZ2FuaXphdGlvbiBhbmQgdGhpcyBpcyB0aGUgbWFuYWdlbWVudCBhY2NvdW50XG4gICAgICAgICAgICAgICAgICAgIGlzTWFuYWdlbWVudEFjY291bnQgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICBpc0luT3JnYW5pemF0aW9uID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIHRoZXJlIGlzIGFuIG9yZ2FuaXphdGlvbiwgYnV0IHRoaXMgaXNuJ3QgdGhlIG1hbmFnZW1lbnQgYWNjb3VudFxuICAgICAgICAgICAgICAgICAgICBpc0luT3JnYW5pemF0aW9uID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAvLyB0aGVyZSBpc24ndCBhbiBvcmdhbml6YXRpb24gYW5kIHRoaXMgYWNjb3VudCBpcyBzdGFuZGFsb25lXG4gICAgICAgICAgICAgICAgaXNJbk9yZ2FuaXphdGlvbiA9IGZhbHNlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICAgIGNhdGNoIChlcnJvcikge1xuICAgICAgICBjb25zb2xlLmVycm9yKFwiRXJyb3I6XCIsIGVycm9yKTtcbiAgICB9XG4gICAgZmluYWxseSB7XG4gICAgICAgIG9yZ2FuaXphdGlvbnNDbGllbnQuZGVzdHJveSgpO1xuICAgIH1cbiAgICByZXR1cm4geyBpc0luT3JnYW5pemF0aW9uLCBpc01hbmFnZW1lbnRBY2NvdW50IH07XG59O1xuIiwiaW1wb3J0IHsgSUFNQ2xpZW50LCBMaXN0VXNlcnNDb21tYW5kLCBMaXN0QWNjZXNzS2V5c0NvbW1hbmQsIEdldEFjY2Vzc0tleUxhc3RVc2VkQ29tbWFuZCB9IGZyb20gXCJAYXdzLXNkay9jbGllbnQtaWFtXCI7XG4vLyBmdW5jdGlvbiBsaXN0IGFsbCBJQU0gdXNlcnMgYW5kIGlmIHRoZXkgaGF2ZSBrZXlzIGluIHRoZSBtYW5hZ2VtZW50IGFjY291bnRcbmNvbnN0IGNoZWNrSWFtVXNlcnMgPSBhc3luYyAoKSA9PiB7XG4gICAgLy8gU2V0IHRvIHVzLWVhc3QtMSBhcyBJQU0gaXMgZ2xvYmFsIGFuZCByZWdpb24gaXNuJ3QgYSBjb25jZXJuXG4gICAgY29uc3QgaWFtQ2xpZW50ID0gbmV3IElBTUNsaWVudCh7IHJlZ2lvbjogJ3VzLWVhc3QtMScgfSk7XG4gICAgY29uc3QgaWFtVXNlckluZm8gPSBbXTtcbiAgICB0cnkge1xuICAgICAgICBjb25zdCBsaXN0VXNlcnNDb21tYW5kID0gbmV3IExpc3RVc2Vyc0NvbW1hbmQoe30pO1xuICAgICAgICBjb25zdCBsaXN0VXNlcnNSZXNwb25zZSA9IGF3YWl0IGlhbUNsaWVudC5zZW5kKGxpc3RVc2Vyc0NvbW1hbmQpO1xuICAgICAgICBmb3IgKGNvbnN0IHVzZXIgb2YgbGlzdFVzZXJzUmVzcG9uc2UuVXNlcnMgfHwgW10pIHtcbiAgICAgICAgICAgIGNvbnN0IHVzZXJOYW1lID0gdXNlci5Vc2VyTmFtZSB8fCBcIlwiO1xuICAgICAgICAgICAgY29uc3QgbGlzdEFjY2Vzc0tleXNDb21tYW5kID0gbmV3IExpc3RBY2Nlc3NLZXlzQ29tbWFuZCh7XG4gICAgICAgICAgICAgICAgVXNlck5hbWU6IHVzZXJOYW1lLFxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBjb25zdCBsaXN0QWNjZXNzS2V5c1Jlc3BvbnNlID0gYXdhaXQgaWFtQ2xpZW50LnNlbmQobGlzdEFjY2Vzc0tleXNDb21tYW5kKTtcbiAgICAgICAgICAgIGNvbnN0IGFjY2Vzc0tleXMgPSBsaXN0QWNjZXNzS2V5c1Jlc3BvbnNlLkFjY2Vzc0tleU1ldGFkYXRhIHx8IFtdO1xuICAgICAgICAgICAgaWYgKGFjY2Vzc0tleXMubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgICAgIGZvciAoY29uc3QgYWNjZXNzS2V5IG9mIGFjY2Vzc0tleXMpIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgYWNjZXNzS2V5SWQgPSBhY2Nlc3NLZXkuQWNjZXNzS2V5SWQgfHwgXCJcIjtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgZ2V0TGFzdFVzZWRDb21tYW5kID0gbmV3IEdldEFjY2Vzc0tleUxhc3RVc2VkQ29tbWFuZCh7XG4gICAgICAgICAgICAgICAgICAgICAgICBBY2Nlc3NLZXlJZDogYWNjZXNzS2V5SWQsXG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBsYXN0VXNlZFJlc3BvbnNlID0gYXdhaXQgaWFtQ2xpZW50LnNlbmQoZ2V0TGFzdFVzZWRDb21tYW5kKTtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgZm91bmRVc2VySW5mbyA9IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHVzZXJOYW1lLFxuICAgICAgICAgICAgICAgICAgICAgICAgYWNjZXNzS2V5SWQsXG4gICAgICAgICAgICAgICAgICAgICAgICBsYXN0VXNlZDogbGFzdFVzZWRSZXNwb25zZSAmJiBsYXN0VXNlZFJlc3BvbnNlLkFjY2Vzc0tleUxhc3RVc2VkXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPyBgJHtsYXN0VXNlZFJlc3BvbnNlLkFjY2Vzc0tleUxhc3RVc2VkLkxhc3RVc2VkRGF0ZX1gIHx8IFwiTm90IGF2YWlsYWJsZVwiXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgOiBcIk5vdCBhdmFpbGFibGVcIixcbiAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICAgICAgaWFtVXNlckluZm8ucHVzaChmb3VuZFVzZXJJbmZvKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBjb25zdCBmb3VuZFVzZXJJbmZvID0ge1xuICAgICAgICAgICAgICAgICAgICB1c2VyTmFtZVxuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgaWFtVXNlckluZm8ucHVzaChmb3VuZFVzZXJJbmZvKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbiAgICBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgY29uc29sZS5lcnJvcihcIkVycm9yOlwiLCBlcnJvcik7XG4gICAgfVxuICAgIGZpbmFsbHkge1xuICAgICAgICBpYW1DbGllbnQuZGVzdHJveSgpO1xuICAgIH1cbiAgICByZXR1cm4gaWFtVXNlckluZm87XG59O1xuZXhwb3J0IGRlZmF1bHQgY2hlY2tJYW1Vc2VycztcbiIsImltcG9ydCB7IEVDMkNsaWVudCwgRGVzY3JpYmVJbnN0YW5jZXNDb21tYW5kIH0gZnJvbSBcIkBhd3Mtc2RrL2NsaWVudC1lYzJcIjtcbmFzeW5jIGZ1bmN0aW9uIGNoZWNrRWMyRXhpc3RzKHJlZ2lvbnMpIHtcbiAgICBsZXQgZWMyVmFsaWRhdGlvbiA9IFtdO1xuICAgIGZvciAoY29uc3QgcmVnaW9uIG9mIHJlZ2lvbnMpIHtcbiAgICAgICAgY29uc3QgZWMyQ2xpZW50ID0gbmV3IEVDMkNsaWVudCh7IHJlZ2lvbiB9KTtcbiAgICAgICAgY29uc3QgY29tbWFuZCA9IG5ldyBEZXNjcmliZUluc3RhbmNlc0NvbW1hbmQoe30pO1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBlYzJDbGllbnQuc2VuZChjb21tYW5kKTtcbiAgICAgICAgICAgIGlmIChyZXNwb25zZS5SZXNlcnZhdGlvbnMpIHtcbiAgICAgICAgICAgICAgICBpZiAocmVzcG9uc2UuUmVzZXJ2YXRpb25zLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgICAgICAgICAgLy9jb25zb2xlLmxvZyhgV0FSTklORzogSW5zdGFuY2UocykgZXhpc3RzIGluIHJlZ2lvbjogJHtyZWdpb259YCk7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGVjMkZvdW5kID0ge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmVnaW9uOiByZWdpb24sXG4gICAgICAgICAgICAgICAgICAgICAgICBlYzJGb3VuZDogdHJ1ZVxuICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgICAgICBlYzJWYWxpZGF0aW9uLnB1c2goZWMyRm91bmQpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgZWMyRm91bmQgPSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZWdpb246IHJlZ2lvbixcbiAgICAgICAgICAgICAgICAgICAgICAgIGVjMkZvdW5kOiBmYWxzZVxuICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgICAgICBlYzJWYWxpZGF0aW9uLnB1c2goZWMyRm91bmQpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIGNvbnN0IGVjMkZvdW5kID0ge1xuICAgICAgICAgICAgICAgICAgICByZWdpb246IHJlZ2lvbixcbiAgICAgICAgICAgICAgICAgICAgZWMyRm91bmQ6IGZhbHNlXG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICBlYzJWYWxpZGF0aW9uLnB1c2goZWMyRm91bmQpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGNhdGNoIChlcnJvcikge1xuICAgICAgICAgICAgY29uc29sZS5sb2coYEVycm9yIGNoZWNraW5nIGluc3RhbmNlOiAke2Vycm9yfWApO1xuICAgICAgICB9XG4gICAgICAgIGZpbmFsbHkge1xuICAgICAgICAgICAgZWMyQ2xpZW50LmRlc3Ryb3koKTtcbiAgICAgICAgfVxuICAgIH0gLy8gZW5kIGZvclxuICAgIHJldHVybiBlYzJWYWxpZGF0aW9uO1xufVxuO1xuZXhwb3J0IGRlZmF1bHQgY2hlY2tFYzJFeGlzdHM7XG4iLCJpbXBvcnQgeyBFQzJDbGllbnQsIERlc2NyaWJlVnBjc0NvbW1hbmQgfSBmcm9tIFwiQGF3cy1zZGsvY2xpZW50LWVjMlwiO1xuYXN5bmMgZnVuY3Rpb24gY2hlY2tWcGNFeGlzdHMocmVnaW9ucykge1xuICAgIGxldCB2cGNWYWxpZGF0aW9uID0gW107XG4gICAgZm9yIChjb25zdCByZWdpb24gb2YgcmVnaW9ucykge1xuICAgICAgICBjb25zdCBlYzJDbGllbnQgPSBuZXcgRUMyQ2xpZW50KHsgcmVnaW9uIH0pO1xuICAgICAgICBjb25zdCBjb21tYW5kID0gbmV3IERlc2NyaWJlVnBjc0NvbW1hbmQoe30pO1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBlYzJDbGllbnQuc2VuZChjb21tYW5kKTtcbiAgICAgICAgICAgIGlmIChyZXNwb25zZS5WcGNzKSB7XG4gICAgICAgICAgICAgICAgaWYgKHJlc3BvbnNlLlZwY3MubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCB2cGNGb3VuZCA9IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlZ2lvbjogcmVnaW9uLFxuICAgICAgICAgICAgICAgICAgICAgICAgdnBjRm91bmQ6IHRydWVcbiAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICAgICAgdnBjVmFsaWRhdGlvbi5wdXNoKHZwY0ZvdW5kKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHZwY0ZvdW5kID0ge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmVnaW9uOiByZWdpb24sXG4gICAgICAgICAgICAgICAgICAgICAgICB2cGNGb3VuZDogZmFsc2VcbiAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICAgICAgdnBjVmFsaWRhdGlvbi5wdXNoKHZwY0ZvdW5kKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBjb25zdCB2cGNGb3VuZCA9IHtcbiAgICAgICAgICAgICAgICAgICAgcmVnaW9uOiByZWdpb24sXG4gICAgICAgICAgICAgICAgICAgIHZwY0ZvdW5kOiBmYWxzZVxuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgdnBjVmFsaWRhdGlvbi5wdXNoKHZwY0ZvdW5kKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKGBFcnJvcjogJHtlcnJvcn1gKTtcbiAgICAgICAgfVxuICAgICAgICBmaW5hbGx5IHtcbiAgICAgICAgICAgIGVjMkNsaWVudC5kZXN0cm95KCk7XG4gICAgICAgIH1cbiAgICB9IC8vIGVuZCBmb3JcbiAgICByZXR1cm4gdnBjVmFsaWRhdGlvbjtcbn1cbjtcbmV4cG9ydCBkZWZhdWx0IGNoZWNrVnBjRXhpc3RzO1xuIiwiaW1wb3J0IHsgQ2xvdWRUcmFpbENsaWVudCwgRGVzY3JpYmVUcmFpbHNDb21tYW5kIH0gZnJvbSAnQGF3cy1zZGsvY2xpZW50LWNsb3VkdHJhaWwnO1xuYXN5bmMgZnVuY3Rpb24gY2hlY2tDbG91ZFRyYWlsRXhpc3RzKHJlZ2lvbnMpIHtcbiAgICBsZXQgY2xvdWRUcmFpbFZhbGlkYXRpb24gPSBbXTtcbiAgICBmb3IgKGNvbnN0IHJlZ2lvbiBvZiByZWdpb25zKSB7XG4gICAgICAgIGNvbnN0IGNsb3VkVHJhaWxDbGllbnQgPSBuZXcgQ2xvdWRUcmFpbENsaWVudCh7IHJlZ2lvbiB9KTtcbiAgICAgICAgY29uc3QgY2xvdWRUcmFpbERlc2NyaWJlQ29tbWFuZCA9IG5ldyBEZXNjcmliZVRyYWlsc0NvbW1hbmQoe30pO1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgY29uc3QgY2xvdWRUcmFpbFJlc3BvbnNlID0gYXdhaXQgY2xvdWRUcmFpbENsaWVudC5zZW5kKGNsb3VkVHJhaWxEZXNjcmliZUNvbW1hbmQpO1xuICAgICAgICAgICAgaWYgKGNsb3VkVHJhaWxSZXNwb25zZS50cmFpbExpc3QpIHtcbiAgICAgICAgICAgICAgICBmb3IgKGNvbnN0IHRyYWlsIG9mIGNsb3VkVHJhaWxSZXNwb25zZS50cmFpbExpc3QpIHtcbiAgICAgICAgICAgICAgICAgICAgbGV0IHRyYWlsSW5mbyA9IHt9O1xuICAgICAgICAgICAgICAgICAgICBpZiAodHJhaWwuSG9tZVJlZ2lvbiA9PSByZWdpb24pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vY29uc29sZS5sb2coYHRyYWlsIGZvdW5kIGluICR7cmVnaW9ufWApXG4gICAgICAgICAgICAgICAgICAgICAgICB0cmFpbEluZm8gPSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVnaW9uOiByZWdpb24sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdHJhaWxGb3VuZDogdHJ1ZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpc09yZ1RyYWlsOiB0cmFpbC5Jc011bHRpUmVnaW9uVHJhaWwsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaXNNdWx0aVJlZ2lvbjogdHJhaWwuSXNNdWx0aVJlZ2lvblRyYWlsXG4gICAgICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgdHJhaWxJbmZvID0ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlZ2lvbjogcmVnaW9uLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRyYWlsRm91bmQ6IGZhbHNlXG4gICAgICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGNsb3VkVHJhaWxWYWxpZGF0aW9uLnB1c2godHJhaWxJbmZvKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgICBjb25zb2xlLmxvZyhgRXJyb3IgY2hlY2tpbmcgaW5zdGFuY2U6ICR7ZXJyb3J9YCk7XG4gICAgICAgIH1cbiAgICAgICAgZmluYWxseSB7XG4gICAgICAgICAgICBjbG91ZFRyYWlsQ2xpZW50LmRlc3Ryb3koKTtcbiAgICAgICAgfVxuICAgIH0gLy8gZW5kIGZvciByZWdpb25zXG4gICAgcmV0dXJuIGNsb3VkVHJhaWxWYWxpZGF0aW9uO1xufVxuO1xuZXhwb3J0IGRlZmF1bHQgY2hlY2tDbG91ZFRyYWlsRXhpc3RzO1xuIiwiaW1wb3J0IHsgQ29uZmlnU2VydmljZUNsaWVudCwgRGVzY3JpYmVDb25maWd1cmF0aW9uUmVjb3JkZXJTdGF0dXNDb21tYW5kLCBEZXNjcmliZURlbGl2ZXJ5Q2hhbm5lbHNDb21tYW5kIH0gZnJvbSAnQGF3cy1zZGsvY2xpZW50LWNvbmZpZy1zZXJ2aWNlJztcbmFzeW5jIGZ1bmN0aW9uIGNoZWNrQ29uZmlnRXhpc3RzKHJlZ2lvbnMpIHtcbiAgICBsZXQgY29uZmlnRGV0YWlscyA9IFtdO1xuICAgIGZvciAoY29uc3QgcmVnaW9uIG9mIHJlZ2lvbnMpIHtcbiAgICAgICAgY29uc3QgY29uZmlnU2VydmljZUNsaWVudCA9IG5ldyBDb25maWdTZXJ2aWNlQ2xpZW50KHsgcmVnaW9uIH0pO1xuICAgICAgICBsZXQgY29uZmlnRGV0YWlsID0ge1xuICAgICAgICAgICAgcmVnaW9uOiByZWdpb24sXG4gICAgICAgICAgICBjb25maWdSZWNvcmRlckZvdW5kOiBmYWxzZSxcbiAgICAgICAgICAgIGNvbmZpZ0RlbGl2ZXJ5Q2hhbm5lbEZvdW5kOiBmYWxzZVxuICAgICAgICB9O1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgLy8gQ2hlY2sgaWYgQ29uZmlnIHJlY29yZGVyIGV4aXN0c1xuICAgICAgICAgICAgY29uc3QgcmVjb3JkZXJSZXNwb25zZSA9IGF3YWl0IGNvbmZpZ1NlcnZpY2VDbGllbnQuc2VuZChuZXcgRGVzY3JpYmVDb25maWd1cmF0aW9uUmVjb3JkZXJTdGF0dXNDb21tYW5kKHt9KSk7XG4gICAgICAgICAgICBjb25zdCByZWNvcmRlckV4aXN0cyA9IHJlY29yZGVyUmVzcG9uc2UuQ29uZmlndXJhdGlvblJlY29yZGVyc1N0YXR1cz8ubGVuZ3RoICE9PSAwO1xuICAgICAgICAgICAgaWYgKHJlY29yZGVyRXhpc3RzKSB7XG4gICAgICAgICAgICAgICAgY29uZmlnRGV0YWlsLmNvbmZpZ1JlY29yZGVyRm91bmQgPSB0cnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gQ2hlY2sgaWYgQ29uZmlnIGRlbGl2ZXJ5IGNoYW5uZWwgZXhpc3RzXG4gICAgICAgICAgICBjb25zdCBjaGFubmVsUmVzcG9uc2UgPSBhd2FpdCBjb25maWdTZXJ2aWNlQ2xpZW50LnNlbmQobmV3IERlc2NyaWJlRGVsaXZlcnlDaGFubmVsc0NvbW1hbmQoe30pKTtcbiAgICAgICAgICAgIGNvbnN0IGNoYW5uZWxFeGlzdHMgPSBjaGFubmVsUmVzcG9uc2UuRGVsaXZlcnlDaGFubmVscz8ubGVuZ3RoICE9PSAwO1xuICAgICAgICAgICAgaWYgKGNoYW5uZWxFeGlzdHMpIHtcbiAgICAgICAgICAgICAgICBjb25maWdEZXRhaWwuY29uZmlnRGVsaXZlcnlDaGFubmVsRm91bmQgPSB0cnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29uZmlnRGV0YWlscy5wdXNoKGNvbmZpZ0RldGFpbCk7XG4gICAgICAgIH1cbiAgICAgICAgY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgICBjb25zb2xlLmVycm9yKGBFcnJvciBjaGVja2luZyBBV1MgQ29uZmlnIGluICR7cmVnaW9ufTpgLCBlcnJvcik7XG4gICAgICAgIH1cbiAgICAgICAgZmluYWxseSB7XG4gICAgICAgICAgICBjb25maWdTZXJ2aWNlQ2xpZW50LmRlc3Ryb3koKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gY29uZmlnRGV0YWlscztcbn1cbmV4cG9ydCBkZWZhdWx0IGNoZWNrQ29uZmlnRXhpc3RzO1xuIiwiaW1wb3J0IHsgT3JnYW5pemF0aW9uc0NsaWVudCwgRGVzY3JpYmVPcmdhbml6YXRpb25Db21tYW5kLCBMaXN0Um9vdHNDb21tYW5kIH0gZnJvbSBcIkBhd3Mtc2RrL2NsaWVudC1vcmdhbml6YXRpb25zXCI7XG5hc3luYyBmdW5jdGlvbiBnZXRPcmdEZXRhaWxzKHJlZ2lvbikge1xuICAgIGNvbnN0IG9yZ0NsaWVudCA9IG5ldyBPcmdhbml6YXRpb25zQ2xpZW50KHsgcmVnaW9uIH0pO1xuICAgIGxldCBvcmdEZXRhaWxzID0ge307XG4gICAgdHJ5IHtcbiAgICAgICAgY29uc3Qgb3JnRGVzY3JpYmVDb21tYW5kID0gbmV3IERlc2NyaWJlT3JnYW5pemF0aW9uQ29tbWFuZCh7fSk7XG4gICAgICAgIGNvbnN0IG9yZ0RhdGEgPSBhd2FpdCBvcmdDbGllbnQuc2VuZChvcmdEZXNjcmliZUNvbW1hbmQpO1xuICAgICAgICBpZiAob3JnRGF0YS5Pcmdhbml6YXRpb24pIHtcbiAgICAgICAgICAgIG9yZ0RldGFpbHMuaWQgPSBvcmdEYXRhLk9yZ2FuaXphdGlvbi5JZCA/PyBcIlwiO1xuICAgICAgICAgICAgLy8gY29uc29sZS5sb2coYE9yZ2FuaXphdGlvbiBJRDogJHtvcmdEZXRhaWxzLmlkfWAgKTtcbiAgICAgICAgICAgIG9yZ0RldGFpbHMuYXJuID0gb3JnRGF0YS5Pcmdhbml6YXRpb24uQXJuID8/IFwiXCI7XG4gICAgICAgICAgICAvLyBjb25zb2xlLmxvZyhgT3JnYW5pemF0aW9uIEFSTjogJHtvcmdEZXRhaWxzLmFybn1gKTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBjb21tYW5kID0gbmV3IExpc3RSb290c0NvbW1hbmQoe30pO1xuICAgICAgICBjb25zdCByb290cyA9IGF3YWl0IG9yZ0NsaWVudC5zZW5kKGNvbW1hbmQpO1xuICAgICAgICBpZiAocm9vdHMuUm9vdHMpIHtcbiAgICAgICAgICAgIG9yZ0RldGFpbHMucm9vdE91SWQgPSByb290cy5Sb290c1swXS5JZDtcbiAgICAgICAgICAgIC8vIGNvbnNvbGUubG9nKGBBV1MgT3JnIHJvb3Qgb3UgaWQ6ICR7b3JnRGV0YWlscy5yb290T3VJZH1gKVxuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgY29uc29sZS5sb2coJ05vIGluZm8gZm91bmQgZm9yIHlvdXIgQVdTIE9yZ2FuaXphdGlvbi4nKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgY29uc29sZS5lcnJvcihgQW4gZXJyb3Igb2NjdXJyZWQ6ICR7ZXJyb3J9YCk7XG4gICAgfVxuICAgIGZpbmFsbHkge1xuICAgICAgICBvcmdDbGllbnQuZGVzdHJveSgpO1xuICAgICAgICByZXR1cm4gb3JnRGV0YWlscztcbiAgICB9XG59XG5leHBvcnQgZGVmYXVsdCBnZXRPcmdEZXRhaWxzO1xuIiwiaW1wb3J0IHsgQ29zdEFuZFVzYWdlUmVwb3J0U2VydmljZUNsaWVudCwgRGVzY3JpYmVSZXBvcnREZWZpbml0aW9uc0NvbW1hbmQgfSBmcm9tIFwiQGF3cy1zZGsvY2xpZW50LWNvc3QtYW5kLXVzYWdlLXJlcG9ydC1zZXJ2aWNlXCI7XG5jb25zdCBjaGVja0xlZ2FjeUN1ciA9IGFzeW5jIChyZWdpb24pID0+IHtcbiAgICAvLyBTZXQgdXAgQVdTIFNESyBjbGllbnQgZm9yIENvc3QgRXhwbG9yZXJcbiAgICBjb25zdCBjdXJDbGllbnQgPSBuZXcgQ29zdEFuZFVzYWdlUmVwb3J0U2VydmljZUNsaWVudCh7IHJlZ2lvbiB9KTtcbiAgICBsZXQgaXNMZWdhY3lDdXJTZXR1cCA9IGZhbHNlO1xuICAgIHRyeSB7XG4gICAgICAgIC8vIENoZWNrIGlmIENvc3QgRXhwbG9yZXIgaXMgc2V0IHVwXG4gICAgICAgIGNvbnN0IGlucHV0ID0ge307XG4gICAgICAgIGNvbnN0IGNvbW1hbmQgPSBuZXcgRGVzY3JpYmVSZXBvcnREZWZpbml0aW9uc0NvbW1hbmQoaW5wdXQpO1xuICAgICAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IGN1ckNsaWVudC5zZW5kKGNvbW1hbmQpO1xuICAgICAgICBpZiAocmVzcG9uc2UuUmVwb3J0RGVmaW5pdGlvbnMgJiYgcmVzcG9uc2UuUmVwb3J0RGVmaW5pdGlvbnMubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgaXNMZWdhY3lDdXJTZXR1cCA9IHRydWU7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHsgaXNMZWdhY3lDdXJTZXR1cCB9O1xuICAgIH1cbiAgICBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgLy8gQ2hlY2sgaWYgdGhlIGVycm9yIGlzIHJlbGF0ZWQgdG8gQ29zdCBFeHBsb3JlciBzZXR1cFxuICAgICAgICBjb25zb2xlLmVycm9yKGBFcnJvcjogJHtlcnJvcn1gKTtcbiAgICAgICAgaXNMZWdhY3lDdXJTZXR1cCA9IGZhbHNlO1xuICAgICAgICByZXR1cm4geyBpc0xlZ2FjeUN1clNldHVwIH07XG4gICAgfVxuICAgIGZpbmFsbHkge1xuICAgICAgICAvLyBDbG9zZSB0aGUgQVdTIFNESyBjbGllbnRcbiAgICAgICAgY3VyQ2xpZW50LmRlc3Ryb3koKTtcbiAgICB9XG59O1xuZXhwb3J0IGRlZmF1bHQgY2hlY2tMZWdhY3lDdXI7XG4iLCJpbXBvcnQgeyBPcmdhbml6YXRpb25zQ2xpZW50LCBMaXN0Um9vdHNDb21tYW5kIH0gZnJvbSBcIkBhd3Mtc2RrL2NsaWVudC1vcmdhbml6YXRpb25zXCI7XG5hc3luYyBmdW5jdGlvbiBnZXRFbmFibGVkT3JnUG9saWN5VHlwZXMocmVnaW9uKSB7XG4gICAgY29uc3Qgb3JnQ2xpZW50ID0gbmV3IE9yZ2FuaXphdGlvbnNDbGllbnQoeyByZWdpb24gfSk7XG4gICAgbGV0IHBvbGljeVR5cGVzRW5hYmxlZCA9IHtcbiAgICAgICAgc2NwRW5hYmxlZDogZmFsc2UsXG4gICAgICAgIHRhZ1BvbGljeUVuYWJsZWQ6IGZhbHNlLFxuICAgICAgICBiYWNrdXBQb2xpY3lFbmFibGVkOiBmYWxzZVxuICAgIH07XG4gICAgdHJ5IHtcbiAgICAgICAgY29uc3QgaW5wdXQgPSB7fTtcbiAgICAgICAgY29uc3QgY29tbWFuZCA9IG5ldyBMaXN0Um9vdHNDb21tYW5kKGlucHV0KTtcbiAgICAgICAgY29uc3Qgcm9vdHMgPSBhd2FpdCBvcmdDbGllbnQuc2VuZChjb21tYW5kKTtcbiAgICAgICAgaWYgKHJvb3RzLlJvb3RzKSB7XG4gICAgICAgICAgICBpZiAocm9vdHMuUm9vdHNbMF0uUG9saWN5VHlwZXMpIHtcbiAgICAgICAgICAgICAgICBmb3IgKGNvbnN0IGVuYWJsZWRQb2xpY3kgb2Ygcm9vdHMuUm9vdHNbMF0uUG9saWN5VHlwZXMpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGVuYWJsZWRQb2xpY3kuVHlwZSA9PSAnU0VSVklDRV9DT05UUk9MX1BPTElDWScgJiYgZW5hYmxlZFBvbGljeS5TdGF0dXMgPT0gJ0VOQUJMRUQnKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBwb2xpY3lUeXBlc0VuYWJsZWQuc2NwRW5hYmxlZCA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgaWYgKGVuYWJsZWRQb2xpY3kuVHlwZSA9PSAnVEFHX1BPTElDWScgJiYgZW5hYmxlZFBvbGljeS5TdGF0dXMgPT0gJ0VOQUJMRUQnKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBwb2xpY3lUeXBlc0VuYWJsZWQudGFnUG9saWN5RW5hYmxlZCA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgaWYgKGVuYWJsZWRQb2xpY3kuVHlwZSA9PSAnQkFDS1VQX1BPTElDWScgJiYgZW5hYmxlZFBvbGljeS5TdGF0dXMgPT0gJ0VOQUJMRUQnKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBwb2xpY3lUeXBlc0VuYWJsZWQuYmFja3VwUG9saWN5RW5hYmxlZCA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9IC8vIGVuZCBmb3JcbiAgICAgICAgICAgIH0gLy8gZW5kIGlmXG4gICAgICAgIH0gLy8gZW5kIGlmXG4gICAgfVxuICAgIGNhdGNoIChlcnJvcikge1xuICAgICAgICBjb25zb2xlLmVycm9yKGBBbiBlcnJvciBvY2N1cnJlZDogJHtlcnJvcn1gKTtcbiAgICB9XG4gICAgZmluYWxseSB7XG4gICAgICAgIG9yZ0NsaWVudC5kZXN0cm95KCk7XG4gICAgICAgIHJldHVybiBwb2xpY3lUeXBlc0VuYWJsZWQ7XG4gICAgfVxufVxuZXhwb3J0IGRlZmF1bHQgZ2V0RW5hYmxlZE9yZ1BvbGljeVR5cGVzO1xuIiwiaW1wb3J0IHsgT3JnYW5pemF0aW9uc0NsaWVudCwgTGlzdEFXU1NlcnZpY2VBY2Nlc3NGb3JPcmdhbml6YXRpb25Db21tYW5kIH0gZnJvbSBcIkBhd3Mtc2RrL2NsaWVudC1vcmdhbml6YXRpb25zXCI7XG5hc3luYyBmdW5jdGlvbiBnZXRFbmFibGVkT3JnU2VydmljZXMocmVnaW9uKSB7XG4gICAgY29uc3QgZGlzY292ZXJlZE9yZ1NlcnZpY2VzID0gW107XG4gICAgY29uc3Qgb3JnQ2xpZW50ID0gbmV3IE9yZ2FuaXphdGlvbnNDbGllbnQoeyByZWdpb24gfSk7XG4gICAgdHJ5IHtcbiAgICAgICAgY29uc3Qgb3JnU2VydmljZUFjY2Vzc0NvbW1hbmQgPSBuZXcgTGlzdEFXU1NlcnZpY2VBY2Nlc3NGb3JPcmdhbml6YXRpb25Db21tYW5kKHt9KTtcbiAgICAgICAgY29uc3Qgb3JnU2VydmljZUFjY2Vzc1Jlc3BvbnNlID0gYXdhaXQgb3JnQ2xpZW50LnNlbmQob3JnU2VydmljZUFjY2Vzc0NvbW1hbmQpO1xuICAgICAgICBpZiAob3JnU2VydmljZUFjY2Vzc1Jlc3BvbnNlLkVuYWJsZWRTZXJ2aWNlUHJpbmNpcGFscyAmJiBvcmdTZXJ2aWNlQWNjZXNzUmVzcG9uc2UuRW5hYmxlZFNlcnZpY2VQcmluY2lwYWxzLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgIG9yZ1NlcnZpY2VBY2Nlc3NSZXNwb25zZS5FbmFibGVkU2VydmljZVByaW5jaXBhbHM7XG4gICAgICAgICAgICBmb3IgKGNvbnN0IG9yZ1NlcnZpY2Ugb2Ygb3JnU2VydmljZUFjY2Vzc1Jlc3BvbnNlLkVuYWJsZWRTZXJ2aWNlUHJpbmNpcGFscykge1xuICAgICAgICAgICAgICAgIGNvbnN0IGZvdW5kT3JnU2VydmljZSA9IHsgc2VydmljZTogb3JnU2VydmljZS5TZXJ2aWNlUHJpbmNpcGFsID8/IFwiXCIgfTtcbiAgICAgICAgICAgICAgICBkaXNjb3ZlcmVkT3JnU2VydmljZXMucHVzaChmb3VuZE9yZ1NlcnZpY2UpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICAgIGNhdGNoIChlcnJvcikge1xuICAgICAgICBjb25zb2xlLmVycm9yKCdFcnJvciBjaGVja2luZyBzZXJ2aWNlIGFjY2VzczonLCBlcnJvcik7XG4gICAgfVxuICAgIGZpbmFsbHkge1xuICAgICAgICBvcmdDbGllbnQuZGVzdHJveSgpO1xuICAgICAgICByZXR1cm4gZGlzY292ZXJlZE9yZ1NlcnZpY2VzO1xuICAgIH1cbn1cbjtcbmV4cG9ydCBkZWZhdWx0IGdldEVuYWJsZWRPcmdTZXJ2aWNlcztcbiIsImltcG9ydCB7IENsb3VkRm9ybWF0aW9uQ2xpZW50LCBEZXNjcmliZU9yZ2FuaXphdGlvbnNBY2Nlc3NDb21tYW5kLCB9IGZyb20gXCJAYXdzLXNkay9jbGllbnQtY2xvdWRmb3JtYXRpb25cIjtcbmFzeW5jIGZ1bmN0aW9uIGdldE9yZ0Nsb3VkRm9ybWF0aW9uKHJlZ2lvbikge1xuICAgIGxldCBvcmdDZm5TdGF0dXMgPSB7XG4gICAgICAgIHN0YXR1czogXCJkaXNhYmxlZFwiXG4gICAgfTtcbiAgICBjb25zdCBjbG91ZEZvcm1hdGlvbkNsaWVudCA9IG5ldyBDbG91ZEZvcm1hdGlvbkNsaWVudCh7IHJlZ2lvbiB9KTtcbiAgICB0cnkge1xuICAgICAgICBjb25zdCBkZXNjcmliZU9yZ0FjY2Vzc0lucHV0ID0ge307XG4gICAgICAgIGNvbnN0IGNvbW1hbmQgPSBuZXcgRGVzY3JpYmVPcmdhbml6YXRpb25zQWNjZXNzQ29tbWFuZChkZXNjcmliZU9yZ0FjY2Vzc0lucHV0KTtcbiAgICAgICAgY29uc3QgY2xvdWRGb3JtYXRpb25PcmdBY2Nlc3MgPSBhd2FpdCBjbG91ZEZvcm1hdGlvbkNsaWVudC5zZW5kKGNvbW1hbmQpO1xuICAgICAgICAvL2NvbnNvbGUubG9nKFwiQ2xvdWRGb3JtYXRpb24gYWN0aXZhdGlvbiBzdGF0dXM6IFwiLCBjbG91ZEZvcm1hdGlvbk9yZ0FjY2Vzcy5TdGF0dXMpXG4gICAgICAgIG9yZ0NmblN0YXR1cy5zdGF0dXMgPSBjbG91ZEZvcm1hdGlvbk9yZ0FjY2Vzcy5TdGF0dXMgPz8gXCJkaXNhYmxlZFwiO1xuICAgIH1cbiAgICBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgY29uc29sZS5sb2coYEVycm9yOiAke2Vycm9yfWApO1xuICAgICAgICAvL3Rocm93IG5ldyBFcnJvcihgRXJyb3I6ICR7ZXJyb3J9YCk7XG4gICAgfVxuICAgIGZpbmFsbHkge1xuICAgICAgICBjbG91ZEZvcm1hdGlvbkNsaWVudC5kZXN0cm95KCk7XG4gICAgICAgIHJldHVybiBvcmdDZm5TdGF0dXM7XG4gICAgfVxufVxuO1xuZXhwb3J0IGRlZmF1bHQgZ2V0T3JnQ2xvdWRGb3JtYXRpb247XG4iLCJpbXBvcnQgeyBDb250cm9sVG93ZXJDbGllbnQsIExpc3RMYW5kaW5nWm9uZXNDb21tYW5kLCBHZXRMYW5kaW5nWm9uZUNvbW1hbmQgfSBmcm9tIFwiQGF3cy1zZGsvY2xpZW50LWNvbnRyb2x0b3dlclwiO1xuYXN5bmMgZnVuY3Rpb24gZ2V0Q29udHJvbFRvd2VyKHJlZ2lvbikge1xuICAgIGxldCBjb250cm9sVG93ZXJJbmZvID0ge307XG4gICAgY29uc3QgY29udHJvbFRvd2VyQ2xpZW50ID0gbmV3IENvbnRyb2xUb3dlckNsaWVudCh7IHJlZ2lvbiB9KTtcbiAgICB0cnkge1xuICAgICAgICBjb25zdCBjb21tYW5kID0gbmV3IExpc3RMYW5kaW5nWm9uZXNDb21tYW5kKHt9KTtcbiAgICAgICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBjb250cm9sVG93ZXJDbGllbnQuc2VuZChjb21tYW5kKTtcbiAgICAgICAgaWYgKHJlc3BvbnNlLmxhbmRpbmdab25lcyAmJiByZXNwb25zZS5sYW5kaW5nWm9uZXMubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgY29uc3QgaW5wdXQgPSB7XG4gICAgICAgICAgICAgICAgbGFuZGluZ1pvbmVJZGVudGlmaWVyOiByZXNwb25zZS5sYW5kaW5nWm9uZXNbMF0uYXJuLFxuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIGNvbnN0IGx6UmVnaW9uID0gcmVzcG9uc2UubGFuZGluZ1pvbmVzWzBdLmFybj8udG9TdHJpbmcoKS5zcGxpdCgnOicpWzNdID8/IFwiXCI7XG4gICAgICAgICAgICBpZiAobHpSZWdpb24pIHtcbiAgICAgICAgICAgICAgICBjb250cm9sVG93ZXJJbmZvLmNvbnRyb2xUb3dlclJlZ2lvbiA9IGx6UmVnaW9uO1xuICAgICAgICAgICAgICAgIGNvbnN0IGNvbnRyb2xUb3dlckNsaWVudFJlZ2lvbiA9IG5ldyBDb250cm9sVG93ZXJDbGllbnQoeyByZWdpb246IGx6UmVnaW9uIH0pO1xuICAgICAgICAgICAgICAgIGNvbnN0IGNvbW1hbmQgPSBuZXcgR2V0TGFuZGluZ1pvbmVDb21tYW5kKGlucHV0KTtcbiAgICAgICAgICAgICAgICBjb25zdCBselJlc3BvbnNlID0gYXdhaXQgY29udHJvbFRvd2VyQ2xpZW50UmVnaW9uLnNlbmQoY29tbWFuZCk7XG4gICAgICAgICAgICAgICAgaWYgKGx6UmVzcG9uc2UubGFuZGluZ1pvbmUpIHtcbiAgICAgICAgICAgICAgICAgICAgY29udHJvbFRvd2VySW5mby5zdGF0dXMgPSBselJlc3BvbnNlLmxhbmRpbmdab25lLnN0YXR1cztcbiAgICAgICAgICAgICAgICAgICAgY29udHJvbFRvd2VySW5mby5sYXRlc3RBdmFpbGFibGVWZXJzaW9uID0gbHpSZXNwb25zZS5sYW5kaW5nWm9uZS5sYXRlc3RBdmFpbGFibGVWZXJzaW9uO1xuICAgICAgICAgICAgICAgICAgICBjb250cm9sVG93ZXJJbmZvLmRlcGxveWVkVmVyc2lvbiA9IGx6UmVzcG9uc2UubGFuZGluZ1pvbmUudmVyc2lvbjtcbiAgICAgICAgICAgICAgICAgICAgY29udHJvbFRvd2VySW5mby5kcmlmdFN0YXR1cyA9IGx6UmVzcG9uc2UubGFuZGluZ1pvbmUuZHJpZnRTdGF0dXM/LnN0YXR1cztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG4gICAgY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoYEVycm9yIGNoZWNraW5nIENvbnRyb2wgVG93ZXIgaW4gJHtyZWdpb259OmAsIGVycm9yKTtcbiAgICB9XG4gICAgZmluYWxseSB7XG4gICAgICAgIGNvbnRyb2xUb3dlckNsaWVudC5kZXN0cm95KCk7XG4gICAgfVxuICAgIHJldHVybiBjb250cm9sVG93ZXJJbmZvO1xufVxuZXhwb3J0IGRlZmF1bHQgZ2V0Q29udHJvbFRvd2VyO1xuIiwiaW1wb3J0IHsgU1NPQWRtaW5DbGllbnQsIExpc3RJbnN0YW5jZXNDb21tYW5kIH0gZnJvbSBcIkBhd3Mtc2RrL2NsaWVudC1zc28tYWRtaW5cIjtcbmFzeW5jIGZ1bmN0aW9uIGdldElkY0luZm8ocmVnaW9uTGlzdCkge1xuICAgIGxldCBpZGNEZXRhaWxzID0geyBmb3VuZDogZmFsc2UgfTtcbiAgICBmb3IgKGNvbnN0IHJlZ2lvbiBvZiByZWdpb25MaXN0KSB7XG4gICAgICAgIGNvbnN0IHNzb0FkbWluQ2xpZW50ID0gbmV3IFNTT0FkbWluQ2xpZW50KHsgcmVnaW9uIH0pO1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgY29uc3Qgc3NvSW5wdXQgPSB7XG4gICAgICAgICAgICAgICAgTWF4UmVzdWx0czogTnVtYmVyKFwiMTAwXCIpXG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgY29uc3QgY29tbWFuZCA9IG5ldyBMaXN0SW5zdGFuY2VzQ29tbWFuZChzc29JbnB1dCk7XG4gICAgICAgICAgICBjb25zdCBzc29JbnN0YW5jZVJlc3BvbnNlID0gYXdhaXQgc3NvQWRtaW5DbGllbnQuc2VuZChjb21tYW5kKTtcbiAgICAgICAgICAgIGlmIChzc29JbnN0YW5jZVJlc3BvbnNlLkluc3RhbmNlcyAmJiBzc29JbnN0YW5jZVJlc3BvbnNlLkluc3RhbmNlcy5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICAgICAgY29uc3Qgc3NvSW5zdGFuY2UgPSBzc29JbnN0YW5jZVJlc3BvbnNlLkluc3RhbmNlc1swXTtcbiAgICAgICAgICAgICAgICBpZGNEZXRhaWxzLmZvdW5kID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICBpZGNEZXRhaWxzLnJlZ2lvbiA9IHJlZ2lvbjtcbiAgICAgICAgICAgICAgICBpZGNEZXRhaWxzLmFybiA9IHNzb0luc3RhbmNlLkluc3RhbmNlQXJuO1xuICAgICAgICAgICAgICAgIGlkY0RldGFpbHMuaWQgPSBzc29JbnN0YW5jZS5JZGVudGl0eVN0b3JlSWQ7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgICBjb25zb2xlLmxvZyhgRXJyb3IgbG9va2luZyBmb3IgQVdTIElkZW50aXR5IENlbnRlciBkZXRhaWxzIGluIHJlZ2lvbiAke3JlZ2lvbn1gKTtcbiAgICAgICAgfVxuICAgICAgICBmaW5hbGx5IHtcbiAgICAgICAgICAgIHNzb0FkbWluQ2xpZW50LmRlc3Ryb3koKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gaWRjRGV0YWlscztcbn1cbjtcbmV4cG9ydCBkZWZhdWx0IGdldElkY0luZm87XG4iLCJpbXBvcnQgeyBPcmdhbml6YXRpb25zQ2xpZW50LCBMaXN0RGVsZWdhdGVkQWRtaW5pc3RyYXRvcnNDb21tYW5kLCBMaXN0RGVsZWdhdGVkU2VydmljZXNGb3JBY2NvdW50Q29tbWFuZCB9IGZyb20gXCJAYXdzLXNkay9jbGllbnQtb3JnYW5pemF0aW9uc1wiO1xuYXN5bmMgZnVuY3Rpb24gZ2V0T3JnRGFBY2NvdW50cygpIHtcbiAgICBsZXQgb3JnRGFEZXRhaWxzID0gW107XG4gICAgY29uc3Qgb3JnQ2xpZW50ID0gbmV3IE9yZ2FuaXphdGlvbnNDbGllbnQoeyByZWdpb246ICd1cy1lYXN0LTEnIH0pO1xuICAgIGxldCBvcmdEYURldGFpbCA9IHt9O1xuICAgIHRyeSB7XG4gICAgICAgIGNvbnN0IGNvbW1hbmQgPSBuZXcgTGlzdERlbGVnYXRlZEFkbWluaXN0cmF0b3JzQ29tbWFuZCh7fSk7XG4gICAgICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgb3JnQ2xpZW50LnNlbmQoY29tbWFuZCk7XG4gICAgICAgIGlmIChyZXNwb25zZS5EZWxlZ2F0ZWRBZG1pbmlzdHJhdG9ycykge1xuICAgICAgICAgICAgZm9yIChjb25zdCBkYSBvZiByZXNwb25zZS5EZWxlZ2F0ZWRBZG1pbmlzdHJhdG9ycykge1xuICAgICAgICAgICAgICAgIGNvbnN0IGlucHV0ID0geyBBY2NvdW50SWQ6IGRhLklkIH07XG4gICAgICAgICAgICAgICAgY29uc3QgY29tbWFuZCA9IG5ldyBMaXN0RGVsZWdhdGVkU2VydmljZXNGb3JBY2NvdW50Q29tbWFuZChpbnB1dCk7XG4gICAgICAgICAgICAgICAgY29uc3QgYWNjb3VudFJlc3BvbnNlID0gYXdhaXQgb3JnQ2xpZW50LnNlbmQoY29tbWFuZCk7XG4gICAgICAgICAgICAgICAgaWYgKGFjY291bnRSZXNwb25zZS5EZWxlZ2F0ZWRTZXJ2aWNlcykge1xuICAgICAgICAgICAgICAgICAgICBvcmdEYURldGFpbCA9IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHNlcnZpY2VzOiBhY2NvdW50UmVzcG9uc2UuRGVsZWdhdGVkU2VydmljZXMsXG4gICAgICAgICAgICAgICAgICAgICAgICBhY2NvdW50TmFtZTogZGEuTmFtZVxuICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgICAgICBvcmdEYURldGFpbHMucHVzaChvcmdEYURldGFpbCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICAgIGNhdGNoIChlcnJvcikge1xuICAgICAgICBjb25zb2xlLmxvZyhgRXJyb3IgbG9va2luZyBmb3IgZGVsZWdhdGVkIHNlcnZpY2VzLmApO1xuICAgIH1cbiAgICBmaW5hbGx5IHtcbiAgICAgICAgb3JnQ2xpZW50LmRlc3Ryb3koKTtcbiAgICB9XG4gICAgcmV0dXJuIG9yZ0RhRGV0YWlscztcbn1cbjtcbmV4cG9ydCBkZWZhdWx0IGdldE9yZ0RhQWNjb3VudHM7XG4iLCJpbXBvcnQgeyBPcmdhbml6YXRpb25zQ2xpZW50LCBMaXN0QWNjb3VudHNDb21tYW5kIH0gZnJvbSAnQGF3cy1zZGsvY2xpZW50LW9yZ2FuaXphdGlvbnMnO1xuYXN5bmMgZnVuY3Rpb24gZ2V0T3JnTWVtYmVyQWNjb3VudHMoKSB7XG4gICAgbGV0IG9yZ01lbWJlckFjY291bnRJbmZvID0gW107XG4gICAgY29uc3Qgb3Jnc0NsaWVudCA9IG5ldyBPcmdhbml6YXRpb25zQ2xpZW50KHsgcmVnaW9uOiAndXMtZWFzdC0xJyB9KTtcbiAgICBjb25zdCBpbnB1dCA9IHtcbiAgICAgICAgTWF4UmVzdWx0czogTnVtYmVyKFwiMjAwXCIpLFxuICAgIH07XG4gICAgdHJ5IHtcbiAgICAgICAgbGV0IHJlc3BvbnNlID0gYXdhaXQgb3Jnc0NsaWVudC5zZW5kKG5ldyBMaXN0QWNjb3VudHNDb21tYW5kKHt9KSk7XG4gICAgICAgIGlmIChyZXNwb25zZS5BY2NvdW50cyAmJiByZXNwb25zZS5BY2NvdW50cy5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICBmb3IgKGNvbnN0IGFjY291bnQgb2YgcmVzcG9uc2UuQWNjb3VudHMpIHtcbiAgICAgICAgICAgICAgICBsZXQgb3JnTWVtYmVyQWNjb3VudCA9IHtcbiAgICAgICAgICAgICAgICAgICAgYWNjb3VudE5hbWU6IGFjY291bnQuTmFtZSxcbiAgICAgICAgICAgICAgICAgICAgYWNjb3VudEVtYWlsOiBhY2NvdW50LkVtYWlsLFxuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgb3JnTWVtYmVyQWNjb3VudEluZm8ucHVzaChvcmdNZW1iZXJBY2NvdW50KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGRvIHtcbiAgICAgICAgICAgICAgICBpZiAocmVzcG9uc2UuTmV4dFRva2VuKSB7XG4gICAgICAgICAgICAgICAgICAgIHJlc3BvbnNlID0gYXdhaXQgb3Jnc0NsaWVudC5zZW5kKG5ldyBMaXN0QWNjb3VudHNDb21tYW5kKHsgTmV4dFRva2VuOiByZXNwb25zZS5OZXh0VG9rZW4gfSkpO1xuICAgICAgICAgICAgICAgICAgICBpZiAocmVzcG9uc2UuQWNjb3VudHMgJiYgcmVzcG9uc2UuQWNjb3VudHMubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgZm9yIChjb25zdCBhY2NvdW50IG9mIHJlc3BvbnNlLkFjY291bnRzKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbGV0IG9yZ01lbWJlckFjY291bnQgPSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFjY291bnROYW1lOiBhY2NvdW50Lk5hbWUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFjY291bnRFbWFpbDogYWNjb3VudC5FbWFpbCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9yZ01lbWJlckFjY291bnRJbmZvLnB1c2gob3JnTWVtYmVyQWNjb3VudCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IHdoaWxlIChyZXNwb25zZS5OZXh0VG9rZW4pO1xuICAgICAgICB9XG4gICAgfVxuICAgIGNhdGNoIChlcnJvcikge1xuICAgICAgICBjb25zb2xlLmVycm9yKCdFcnJvciBsaXN0aW5nIEFXUyBhY2NvdW50czonLCBlcnJvcik7XG4gICAgfVxuICAgIGZpbmFsbHkge1xuICAgICAgICBvcmdzQ2xpZW50LmRlc3Ryb3koKTtcbiAgICB9XG4gICAgcmV0dXJuIG9yZ01lbWJlckFjY291bnRJbmZvO1xufVxuZXhwb3J0IGRlZmF1bHQgZ2V0T3JnTWVtYmVyQWNjb3VudHM7XG4iLCJpbXBvcnQgeyBPcmdhbml6YXRpb25zQ2xpZW50LCBMaXN0T3JnYW5pemF0aW9uYWxVbml0c0ZvclBhcmVudENvbW1hbmQsIExpc3RBY2NvdW50c0ZvclBhcmVudENvbW1hbmQgfSBmcm9tIFwiQGF3cy1zZGsvY2xpZW50LW9yZ2FuaXphdGlvbnNcIjtcbmFzeW5jIGZ1bmN0aW9uIGdldE9yZ1RvcExldmVsT3VzKHJlZ2lvbiwgcm9vdE91SWQpIHtcbiAgICBjb25zdCBvcmdDbGllbnQgPSBuZXcgT3JnYW5pemF0aW9uc0NsaWVudCh7IHJlZ2lvbiB9KTtcbiAgICBsZXQgdG9wTGV2ZWxPdXMgPSBbXTtcbiAgICB0cnkge1xuICAgICAgICBjb25zdCBsaXN0T1VzQ29tbWFuZCA9IG5ldyBMaXN0T3JnYW5pemF0aW9uYWxVbml0c0ZvclBhcmVudENvbW1hbmQoe1xuICAgICAgICAgICAgUGFyZW50SWQ6IHJvb3RPdUlkLFxuICAgICAgICB9KTtcbiAgICAgICAgY29uc3QgbGlzdE9Vc1Jlc3BvbnNlID0gYXdhaXQgb3JnQ2xpZW50LnNlbmQobGlzdE9Vc0NvbW1hbmQpO1xuICAgICAgICBpZiAobGlzdE9Vc1Jlc3BvbnNlLk9yZ2FuaXphdGlvbmFsVW5pdHMpIHtcbiAgICAgICAgICAgIGZvciAoY29uc3Qgb3Ugb2YgbGlzdE9Vc1Jlc3BvbnNlLk9yZ2FuaXphdGlvbmFsVW5pdHMpIHtcbiAgICAgICAgICAgICAgICBsZXQgdG9wTGV2ZWxPdSA9IHtcbiAgICAgICAgICAgICAgICAgICAgaWQ6IG91LklkLFxuICAgICAgICAgICAgICAgICAgICBuYW1lOiBvdS5OYW1lXG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICBjb25zdCBhY2NvdW50UmVzcG9uc2UgPSBhd2FpdCBvcmdDbGllbnQuc2VuZChuZXcgTGlzdEFjY291bnRzRm9yUGFyZW50Q29tbWFuZCh7IFBhcmVudElkOiBvdS5JZCB9KSk7XG4gICAgICAgICAgICAgICAgaWYgKGFjY291bnRSZXNwb25zZS5BY2NvdW50cyAmJiBhY2NvdW50UmVzcG9uc2UuQWNjb3VudHMubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgICAgICAgICB0b3BMZXZlbE91LmFjY291bnRzID0gYWNjb3VudFJlc3BvbnNlLkFjY291bnRzO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB0b3BMZXZlbE91cy5wdXNoKHRvcExldmVsT3UpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICAgIGNhdGNoIChlcnJvcikge1xuICAgICAgICBjb25zb2xlLmVycm9yKCdFcnJvciBjaGVja2luZyBzZXJ2aWNlIGFjY2VzczonLCBlcnJvcik7XG4gICAgICAgIHJldHVybiBbXTtcbiAgICB9XG4gICAgZmluYWxseSB7XG4gICAgICAgIG9yZ0NsaWVudC5kZXN0cm95KCk7XG4gICAgfVxuICAgIHJldHVybiB0b3BMZXZlbE91cztcbn1cbjtcbmV4cG9ydCBkZWZhdWx0IGdldE9yZ1RvcExldmVsT3VzO1xuIiwiLy8gYmFja2xvZyBpcyBhIHNlcmllcyBvZiB0YXNrcyBwdXQgdG9nZXRoZXIgdGhhdCB3aWxsIGNsb3NlXG4vLyBhbnkgbmVjZXNzYXJ5IGZpbmRpbmdzIGZyb20gdGhlIENGQVQgY2hlY2tzXG5hc3luYyBmdW5jdGlvbiBjcmVhdGVCYWNrbG9nKGFzc2Vzc21lbnQpIHtcbiAgICBsZXQgdGFza3MgPSBbXTtcbiAgICBpZiAoYXNzZXNzbWVudC5pYW1Vc2VyQ2hlY2tzICYmIGFzc2Vzc21lbnQuaWFtVXNlckNoZWNrcy5sZW5ndGggPiAwKSB7XG4gICAgICAgIGZvciAoY29uc3QgaWFtVXNlciBvZiBhc3Nlc3NtZW50LmlhbVVzZXJDaGVja3MpIHtcbiAgICAgICAgICAgIGxldCBpYW1UYXNrID0ge1xuICAgICAgICAgICAgICAgIHRpdGxlOiBgUmVtb3ZlIElBTSB1c2VyICR7aWFtVXNlci51c2VyTmFtZX1gLFxuICAgICAgICAgICAgICAgIGRldGFpbDogYFJldmlldyBhbmQgZGV0ZXJtaW5lIGlmIElBTSB1c2VyICR7aWFtVXNlci51c2VyTmFtZX0gY2FuIGJlIGRlbGV0ZWQuYCxcbiAgICAgICAgICAgICAgICByZW1lZGlhdGlvbkxpbms6IFwiXCJcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICB0YXNrcy5wdXNoKGlhbVRhc2spO1xuICAgICAgICAgICAgaWYgKGlhbVVzZXIuYWNjZXNzS2V5SWQpIHtcbiAgICAgICAgICAgICAgICBsZXQgaWFtQXBpVGFzayA9IHtcbiAgICAgICAgICAgICAgICAgICAgdGl0bGU6IGBSZW1vdmUgSUFNIHVzZXIgJHtpYW1Vc2VyLnVzZXJOYW1lfSBBUEkga2V5ICR7aWFtVXNlci5hY2Nlc3NLZXlJZH0gYCxcbiAgICAgICAgICAgICAgICAgICAgZGV0YWlsOiBgUmV2aWV3IGFuZCBkZXRlcm1pbmUgaWYgSUFNIHVzZXIgQVBJIGtleSAke2lhbVVzZXIuYWNjZXNzS2V5SWR9IGZvciAke2lhbVVzZXIudXNlck5hbWV9IGNhbiBiZSByZW1vdmVkLmAsXG4gICAgICAgICAgICAgICAgICAgIHJlbWVkaWF0aW9uTGluazogXCJodHRwczovL2RvY3MuYXdzLmFtYXpvbi5jb20vSUFNL2xhdGVzdC9Vc2VyR3VpZGUvaWRfdXNlcnNfbWFuYWdlLmh0bWwjaWRfdXNlcnNfZGVsZXRpbmdcIlxuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgdGFza3MucHVzaChpYW1BcGlUYXNrKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbiAgICBpZiAoYXNzZXNzbWVudC5lYzJDaGVja3MgJiYgYXNzZXNzbWVudC5lYzJDaGVja3MuZmluZChwYXJhbSA9PiBwYXJhbS5lYzJGb3VuZCA9PT0gdHJ1ZSkpIHtcbiAgICAgICAgZm9yIChjb25zdCBlYzIgb2YgYXNzZXNzbWVudC5lYzJDaGVja3MpIHtcbiAgICAgICAgICAgIGlmIChlYzIuZWMyRm91bmQgJiYgZWMyLnJlZ2lvbikge1xuICAgICAgICAgICAgICAgIGxldCBlYzJUYXNrID0ge1xuICAgICAgICAgICAgICAgICAgICB0aXRsZTogYERlbGV0ZSBFQzIgaW5zdGFuY2UgaW4gJHtlYzIucmVnaW9ufWAsXG4gICAgICAgICAgICAgICAgICAgIGRldGFpbDogYERlbGV0ZSBhbnkgdW5uZWNlc3NhcnkgRUMyIGluc3RhbmNlIGluICR7ZWMyLnJlZ2lvbn1gLFxuICAgICAgICAgICAgICAgICAgICByZW1lZGlhdGlvbkxpbms6IFwiaHR0cHM6Ly9kb2NzLmF3cy5hbWF6b24uY29tL0FXU0VDMi9sYXRlc3QvVXNlckd1aWRlL3Rlcm1pbmF0aW5nLWluc3RhbmNlcy5odG1sXCJcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgIHRhc2tzLnB1c2goZWMyVGFzayk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG4gICAgaWYgKGFzc2Vzc21lbnQudnBjQ2hlY2tzICYmIGFzc2Vzc21lbnQudnBjQ2hlY2tzLmxlbmd0aCA+IDApIHtcbiAgICAgICAgZm9yIChjb25zdCB2cGNGaW5kIG9mIGFzc2Vzc21lbnQudnBjQ2hlY2tzKSB7XG4gICAgICAgICAgICBpZiAodnBjRmluZC52cGNGb3VuZCAmJiB2cGNGaW5kLnJlZ2lvbikge1xuICAgICAgICAgICAgICAgIGxldCB2cGNUYXNrID0ge1xuICAgICAgICAgICAgICAgICAgICB0aXRsZTogYERlbGV0ZSBWUEMgaW4gJHt2cGNGaW5kLnJlZ2lvbn1gLFxuICAgICAgICAgICAgICAgICAgICBkZXRhaWw6IGBEZWxldGUgYW55IHVubmVjZXNzYXJ5IFZQQyBpbiAke3ZwY0ZpbmQucmVnaW9ufSB0byBpbmNsdWRlIHRoZSBkZWZhdWx0IFZQQy5gLFxuICAgICAgICAgICAgICAgICAgICByZW1lZGlhdGlvbkxpbms6IFwiaHR0cHM6Ly9naXRodWIuY29tL2Nsb3VkLWZvdW5kYXRpb25zLW9uLWF3cy9jbG91ZC1mb3VuZGF0aW9ucy10ZW1wbGF0ZXMvYmxvYi9tYWluL25ldHdvcmsvbmV0d29yay1kZWZhdWx0LXZwYy1kZWxldGlvbi9SRUFETUUubWRcIlxuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgdGFza3MucHVzaCh2cGNUYXNrKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbiAgICBpZiAoIWFzc2Vzc21lbnQuc2NwRW5hYmxlZCkge1xuICAgICAgICBjb25zdCBzY3BFbmFibGVkVGFzayA9IHtcbiAgICAgICAgICAgIHRpdGxlOiAnRW5hYmxlIFNDUCcsXG4gICAgICAgICAgICBkZXRhaWw6IGBFbmFibGUgU0NQIGluIEFXUyBPcmdhbml6YXRpb25gLFxuICAgICAgICAgICAgcmVtZWRpYXRpb25MaW5rOiBcImh0dHBzOi8vZG9jcy5hd3MuYW1hem9uLmNvbS9vcmdhbml6YXRpb25zL2xhdGVzdC91c2VyZ3VpZGUvb3Jnc19tYW5hZ2VfcG9saWNpZXNfZW5hYmxlLWRpc2FibGUuaHRtbFwiXG4gICAgICAgIH07XG4gICAgICAgIHRhc2tzLnB1c2goc2NwRW5hYmxlZFRhc2spO1xuICAgIH1cbiAgICBpZiAoIWFzc2Vzc21lbnQudGFnUG9saWN5RW5hYmxlZCkge1xuICAgICAgICBsZXQgdGFnUG9saWN5RW5hYmxlZFRhc2sgPSB7XG4gICAgICAgICAgICB0aXRsZTogJ0VuYWJsZSBUYWcgUG9saWN5JyxcbiAgICAgICAgICAgIGRldGFpbDogYEVuYWJsZSBUYWcgUG9saWN5IGluIEFXUyBPcmdhbml6YXRpb25gLFxuICAgICAgICAgICAgcmVtZWRpYXRpb25MaW5rOiBcImh0dHBzOi8vZG9jcy5hd3MuYW1hem9uLmNvbS9vcmdhbml6YXRpb25zL2xhdGVzdC91c2VyZ3VpZGUvb3Jnc19tYW5hZ2VfcG9saWNpZXNfZW5hYmxlLWRpc2FibGUuaHRtbFwiXG4gICAgICAgIH07XG4gICAgICAgIHRhc2tzLnB1c2godGFnUG9saWN5RW5hYmxlZFRhc2spO1xuICAgIH1cbiAgICBpZiAoIWFzc2Vzc21lbnQuYmFja3VwUG9saWN5RW5hYmxlZCkge1xuICAgICAgICBsZXQgYmFja3VwUG9saWN5RW5hYmxlZFRhc2sgPSB7XG4gICAgICAgICAgICB0aXRsZTogJ0VuYWJsZSBCYWNrdXAgUG9saWN5JyxcbiAgICAgICAgICAgIGRldGFpbDogYEVuYWJsZSBCYWNrdXAgUG9saWN5IGluIEFXUyBPcmdhbml6YXRpb25gLFxuICAgICAgICAgICAgcmVtZWRpYXRpb25MaW5rOiBcImh0dHBzOi8vZG9jcy5hd3MuYW1hem9uLmNvbS9vcmdhbml6YXRpb25zL2xhdGVzdC91c2VyZ3VpZGUvb3Jnc19tYW5hZ2VfcG9saWNpZXNfZW5hYmxlLWRpc2FibGUuaHRtbFwiXG4gICAgICAgIH07XG4gICAgICAgIHRhc2tzLnB1c2goYmFja3VwUG9saWN5RW5hYmxlZFRhc2spO1xuICAgIH1cbiAgICBpZiAoIWFzc2Vzc21lbnQuaXNMZWdhY3lDdXJTZXR1cCkge1xuICAgICAgICBjb25zdCBsZWdhY3lDdXJTZXR1cFRhc2sgPSB7XG4gICAgICAgICAgICB0aXRsZTogJ1NldHVwIGxlZ2FjeSBDVVInLFxuICAgICAgICAgICAgZGV0YWlsOiBgU2V0dXAgbGVnYWN5IENVUiBpbiBBV1MgT3JnYW5pemF0aW9uYCxcbiAgICAgICAgICAgIHJlbWVkaWF0aW9uTGluazogXCJodHRwczovL2RvY3MuYXdzLmFtYXpvbi5jb20vY3VyL2xhdGVzdC91c2VyZ3VpZGUvZGF0YWV4cG9ydHMtY3JlYXRlLWxlZ2FjeS5odG1sXCJcbiAgICAgICAgfTtcbiAgICAgICAgdGFza3MucHVzaChsZWdhY3lDdXJTZXR1cFRhc2spO1xuICAgIH1cbiAgICBsZXQgdHJhbnNpdGlvbmFsRm91bmQsIHN1c3BlbmRlZEZvdW5kLCBpbmZyYXN0cnVjdHVyZUZvdW5kID0gZmFsc2U7XG4gICAgbGV0IHdvcmtsb2Fkc0ZvdW5kID0gZmFsc2U7XG4gICAgbGV0IHNlY3VyaXR5Rm91bmQgPSBmYWxzZTtcbiAgICBpZiAoYXNzZXNzbWVudC5vcmdSb290T3VJZCkge1xuICAgICAgICBpZiAoYXNzZXNzbWVudC5vcmdPdUluZm8gJiYgYXNzZXNzbWVudC5vcmdPdUluZm8ubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgZm9yIChjb25zdCBvdSBvZiBhc3Nlc3NtZW50Lm9yZ091SW5mbykge1xuICAgICAgICAgICAgICAgIGlmIChvdS5uYW1lPy50b0xvd2VyQ2FzZSgpID09PSAnc3VzcGVuZGVkJykge1xuICAgICAgICAgICAgICAgICAgICBzdXNwZW5kZWRGb3VuZCA9IHRydWU7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmIChvdS5uYW1lPy50b0xvd2VyQ2FzZSgpID09PSAndHJhbnNpdGlvbmFsJykge1xuICAgICAgICAgICAgICAgICAgICB0cmFuc2l0aW9uYWxGb3VuZCA9IHRydWU7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmIChvdS5uYW1lPy50b0xvd2VyQ2FzZSgpID09PSAnd29ya2xvYWRzJykge1xuICAgICAgICAgICAgICAgICAgICB3b3JrbG9hZHNGb3VuZCA9IHRydWU7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmIChvdS5uYW1lPy50b0xvd2VyQ2FzZSgpID09PSAnc2VjdXJpdHknKSB7XG4gICAgICAgICAgICAgICAgICAgIHNlY3VyaXR5Rm91bmQgPSB0cnVlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAob3UubmFtZT8udG9Mb3dlckNhc2UoKSA9PT0gJ2luZnJhc3RydWN0dXJlJykge1xuICAgICAgICAgICAgICAgICAgICBpbmZyYXN0cnVjdHVyZUZvdW5kID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG4gICAgbGV0IGlkZW50aXR5RGVsZWdhdGVkID0gZmFsc2U7XG4gICAgbGV0IHNlY3VyaXR5SHViRGVsZWdhdGVkID0gZmFsc2U7XG4gICAgbGV0IGd1YXJkRHV0eURlbGVnYXRlZCA9IGZhbHNlO1xuICAgIGxldCBjb25maWdEZWxlZ2F0ZWQgPSBmYWxzZTtcbiAgICBsZXQgaWFtQWNjZXNzQW5hbHl6ZXJEZWxlZ2F0ZWQgPSBmYWxzZTtcbiAgICBsZXQgczNTdG9yYWdlTGVuc0RlbGVnYXRlZCA9IGZhbHNlO1xuICAgIGxldCBpcGFtRGVsZWdhdGVkID0gZmFsc2U7XG4gICAgbGV0IGFjY291bnREZWxlZ2F0ZWQgPSBmYWxzZTtcbiAgICBsZXQgYmFja3VwRGVsZWdhdGVkID0gZmFsc2U7XG4gICAgaWYgKGFzc2Vzc21lbnQub3JnRGVsZWdhdGVkQWRtaW5BY2NvdW50cyAmJiBhc3Nlc3NtZW50Lm9yZ0RlbGVnYXRlZEFkbWluQWNjb3VudHMubGVuZ3RoID4gMCkge1xuICAgICAgICBmb3IgKGNvbnN0IGFjY291bnQgb2YgYXNzZXNzbWVudC5vcmdEZWxlZ2F0ZWRBZG1pbkFjY291bnRzKSB7XG4gICAgICAgICAgICBpZiAoYWNjb3VudC5zZXJ2aWNlcyAmJiBhY2NvdW50LnNlcnZpY2VzLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgICAgICBmb3IgKGNvbnN0IHNydiBvZiBhY2NvdW50LnNlcnZpY2VzKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChzcnYuU2VydmljZVByaW5jaXBhbCA9PT0gJ3NlY3VyaXR5aHViLmFtYXpvbmF3cy5jb20nKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBzZWN1cml0eUh1YkRlbGVnYXRlZCA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgaWYgKHNydi5TZXJ2aWNlUHJpbmNpcGFsID09PSAnZ3VhcmRkdXR5LmFtYXpvbmF3cy5jb20nKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBndWFyZER1dHlEZWxlZ2F0ZWQgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGlmIChzcnYuU2VydmljZVByaW5jaXBhbCA9PT0gJ3Nzby5hbWF6b25hd3MuY29tJykge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWRlbnRpdHlEZWxlZ2F0ZWQgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGlmIChzcnYuU2VydmljZVByaW5jaXBhbCA9PT0gJ2NvbmZpZy5hbWF6b25hd3MuY29tJykge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uZmlnRGVsZWdhdGVkID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBpZiAoc3J2LlNlcnZpY2VQcmluY2lwYWwgPT09ICdhY2Nlc3MtYW5hbHl6ZXIuYW1hem9uYXdzLmNvbScpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlhbUFjY2Vzc0FuYWx5emVyRGVsZWdhdGVkID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBpZiAoc3J2LlNlcnZpY2VQcmluY2lwYWwgPT09ICdzdG9yYWdlLWxlbnMuczMuYW1hem9uYXdzLmNvbScpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHMzU3RvcmFnZUxlbnNEZWxlZ2F0ZWQgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGlmIChzcnYuU2VydmljZVByaW5jaXBhbCA9PT0gJ2lwYW0uYW1hem9uYXdzLmNvbScpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlwYW1EZWxlZ2F0ZWQgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGlmIChzcnYuU2VydmljZVByaW5jaXBhbCA9PT0gJ2FjY291bnQuYW1hem9uYXdzLmNvbScpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGFjY291bnREZWxlZ2F0ZWQgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGlmIChzcnYuU2VydmljZVByaW5jaXBhbCA9PT0gJ2JhY2t1cC5hbWF6b25hd3MuY29tJykge1xuICAgICAgICAgICAgICAgICAgICAgICAgYmFja3VwRGVsZWdhdGVkID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbiAgICBjb25zdCBhY2NvdW50RW1haWxSZXZpZXdUYXNrID0ge1xuICAgICAgICB0aXRsZTogJ1JldmlldyBhY2NvdW50IGVtYWlsIGFkZHJlc3NlcycsXG4gICAgICAgIGRldGFpbDogYFJldmlldyBBY2NvdW50IEVtYWlsIEFkZHJlc3NlcyBpbiBBV1MgT3JnYW5pemF0aW9uYCxcbiAgICAgICAgcmVtZWRpYXRpb25MaW5rOiBcImh0dHBzOi8vZG9jcy5hd3MuYW1hem9uLmNvbS9JQU0vbGF0ZXN0L1VzZXJHdWlkZS9yb290LXVzZXItYmVzdC1wcmFjdGljZXMuaHRtbCNydS1icC1ncm91cFwiXG4gICAgfTtcbiAgICB0YXNrcy5wdXNoKGFjY291bnRFbWFpbFJldmlld1Rhc2spO1xuICAgIC8vIE9Vc1xuICAgIGlmICghdHJhbnNpdGlvbmFsRm91bmQpIHtcbiAgICAgICAgY29uc3QgdHJhbnNpdGlvbmFsVGFzayA9IHtcbiAgICAgICAgICAgIHRpdGxlOiAnRGVwbG95IFRyYW5zaXRpb25hbCBPVScsXG4gICAgICAgICAgICBkZXRhaWw6IGBEZXBsb3kgVHJhbnNpdGlvbmFsIE9VIGluIEFXUyBPcmdhbml6YXRpb25gLFxuICAgICAgICAgICAgcmVtZWRpYXRpb25MaW5rOiBcImh0dHBzOi8vZG9jcy5hd3MuYW1hem9uLmNvbS93aGl0ZXBhcGVycy9sYXRlc3Qvb3JnYW5pemluZy15b3VyLWF3cy1lbnZpcm9ubWVudC90cmFuc2l0aW9uYWwtb3UuaHRtbFwiXG4gICAgICAgIH07XG4gICAgICAgIHRhc2tzLnB1c2godHJhbnNpdGlvbmFsVGFzayk7XG4gICAgfVxuICAgIGlmICghc3VzcGVuZGVkRm91bmQpIHtcbiAgICAgICAgY29uc3Qgc3VzcGVuZGVkVGFzayA9IHtcbiAgICAgICAgICAgIHRpdGxlOiAnRGVwbG95IFN1c3BlbmRlZCBPVScsXG4gICAgICAgICAgICBkZXRhaWw6IGBEZXBsb3kgU3VzcGVuZGVkIE9VIGluIEFXUyBPcmdhbml6YXRpb25gLFxuICAgICAgICAgICAgcmVtZWRpYXRpb25MaW5rOiBcImh0dHBzOi8vZG9jcy5hd3MuYW1hem9uLmNvbS93aGl0ZXBhcGVycy9sYXRlc3Qvb3JnYW5pemluZy15b3VyLWF3cy1lbnZpcm9ubWVudC9zdXNwZW5kZWQtb3UuaHRtbFwiXG4gICAgICAgIH07XG4gICAgICAgIHRhc2tzLnB1c2goc3VzcGVuZGVkVGFzayk7XG4gICAgfVxuICAgIGlmICghd29ya2xvYWRzRm91bmQpIHtcbiAgICAgICAgY29uc3Qgd29ya2xvYWRzVGFzayA9IHtcbiAgICAgICAgICAgIHRpdGxlOiAnRGVwbG95IFdvcmtsb2FkcyBPVScsXG4gICAgICAgICAgICBkZXRhaWw6IGBEZXBsb3kgV29ya2xvYWRzIE9VIGluIEFXUyBPcmdhbml6YXRpb25gLFxuICAgICAgICAgICAgcmVtZWRpYXRpb25MaW5rOiBcImh0dHBzOi8vZG9jcy5hd3MuYW1hem9uLmNvbS93aGl0ZXBhcGVycy9sYXRlc3Qvb3JnYW5pemluZy15b3VyLWF3cy1lbnZpcm9ubWVudC93b3JrbG9hZHMtb3UuaHRtbFwiXG4gICAgICAgIH07XG4gICAgICAgIHRhc2tzLnB1c2god29ya2xvYWRzVGFzayk7XG4gICAgfVxuICAgIGlmICghc2VjdXJpdHlGb3VuZCkge1xuICAgICAgICBjb25zdCBzZWN1cml0eVRhc2sgPSB7XG4gICAgICAgICAgICB0aXRsZTogJ0RlcGxveSBTZWN1cml0eSBPVScsXG4gICAgICAgICAgICBkZXRhaWw6IGBEZXBsb3kgU2VjdXJpdHkgT1UgaW4gQVdTIE9yZ2FuaXphdGlvbmAsXG4gICAgICAgICAgICByZW1lZGlhdGlvbkxpbms6IFwiaHR0cHM6Ly9kb2NzLmF3cy5hbWF6b24uY29tL3doaXRlcGFwZXJzL2xhdGVzdC9vcmdhbml6aW5nLXlvdXItYXdzLWVudmlyb25tZW50L3NlY3VyaXR5LW91LWFuZC1hY2NvdW50cy5odG1sXCJcbiAgICAgICAgfTtcbiAgICAgICAgdGFza3MucHVzaChzZWN1cml0eVRhc2spO1xuICAgIH1cbiAgICBpZiAoIWluZnJhc3RydWN0dXJlRm91bmQpIHtcbiAgICAgICAgY29uc3QgaW5mcmFzdHJ1Y3R1cmVUYXNrID0ge1xuICAgICAgICAgICAgdGl0bGU6ICdEZXBsb3kgSW5mcmFzdHJ1Y3R1cmUgT1UnLFxuICAgICAgICAgICAgZGV0YWlsOiBgRGVwbG95IEluZnJhc3RydWN0dXJlIE9VIGluIEFXUyBPcmdhbml6YXRpb25gLFxuICAgICAgICAgICAgcmVtZWRpYXRpb25MaW5rOiBcImh0dHBzOi8vZG9jcy5hd3MuYW1hem9uLmNvbS93aGl0ZXBhcGVycy9sYXRlc3Qvb3JnYW5pemluZy15b3VyLWF3cy1lbnZpcm9ubWVudC9pbmZyYXN0cnVjdHVyZS1vdS1hbmQtYWNjb3VudHMuaHRtbFwiXG4gICAgICAgIH07XG4gICAgICAgIHRhc2tzLnB1c2goaW5mcmFzdHJ1Y3R1cmVUYXNrKTtcbiAgICB9XG4gICAgLy8gQ29udHJvbCBUb3dlclxuICAgIGlmIChhc3Nlc3NtZW50LmNvbnRyb2xUb3dlclJlZ2lvbiA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIGNvbnN0IGRlcGxveUNvbnRyb2xUb3dlclRhc2sgPSB7XG4gICAgICAgICAgICB0aXRsZTogJ0RlcGxveSBBV1MgQ29udHJvbCBUb3dlcicsXG4gICAgICAgICAgICBkZXRhaWw6IGBEZXBsb3kgQVdTIENvbnRyb2wgVG93ZXIgaW4gQVdTIE9yZ2FuaXphdGlvbmAsXG4gICAgICAgICAgICByZW1lZGlhdGlvbkxpbms6IFwiaHR0cHM6Ly9jYXRhbG9nLndvcmtzaG9wcy5hd3MvY29udHJvbC10b3dlci9lbi1VUy9wcmVyZXF1aXNpdGVzL2RlcGxveWluZ1wiXG4gICAgICAgIH07XG4gICAgICAgIHRhc2tzLnB1c2goZGVwbG95Q29udHJvbFRvd2VyVGFzayk7XG4gICAgfVxuICAgIGlmIChhc3Nlc3NtZW50LmNvbnRyb2xUb3dlckRyaWZ0U3RhdHVzID09PSAnRFJJRlRFRCcpIHtcbiAgICAgICAgY29uc3QgZml4THpEcmlmdFRhc2sgPSB7XG4gICAgICAgICAgICB0aXRsZTogJ0ZpeCBkcmlmdCBpbiBkZXBsb3llZCBsYW5kaW5nIHpvbmUnLFxuICAgICAgICAgICAgZGV0YWlsOiBgRml4IGRyaWZ0IGluIGRlcGxveWVkIGxhbmRpbmcgem9uZWAsXG4gICAgICAgICAgICByZW1lZGlhdGlvbkxpbms6IFwiaHR0cHM6Ly9kb2NzLmF3cy5hbWF6b24uY29tL2NvbnRyb2x0b3dlci9sYXRlc3QvdXNlcmd1aWRlL3Jlc29sdmUtZHJpZnQuaHRtbFwiXG4gICAgICAgIH07XG4gICAgICAgIHRhc2tzLnB1c2goZml4THpEcmlmdFRhc2spO1xuICAgIH1cbiAgICBpZiAoYXNzZXNzbWVudC5jb250cm9sVG93ZXJEZXBsb3llZFZlcnNpb24gIT09IGFzc2Vzc21lbnQuY29udHJvbFRvd2VyTGF0ZXN0QXZhaWxhYmxlVmVyc2lvbikge1xuICAgICAgICBjb25zdCB1cGRhdGVDb250cm9sVG93ZXJUYXNrID0ge1xuICAgICAgICAgICAgdGl0bGU6IGBVcGRhdGUgQVdTIENvbnRyb2wgVG93ZXIgdG8gbGF0ZXN0IHZlcnNpb25gLFxuICAgICAgICAgICAgZGV0YWlsOiBgVXBkYXRlIEFXUyBDb250cm9sIFRvd2VyIHRvIHZlcnNpb24gJHthc3Nlc3NtZW50LmNvbnRyb2xUb3dlckxhdGVzdEF2YWlsYWJsZVZlcnNpb259YCxcbiAgICAgICAgICAgIHJlbWVkaWF0aW9uTGluazogXCJodHRwczovL2RvY3MuYXdzLmFtYXpvbi5jb20vY29udHJvbHRvd2VyL2xhdGVzdC91c2VyZ3VpZGUvdXBkYXRlLWNvbnRyb2x0b3dlci5odG1sXCJcbiAgICAgICAgfTtcbiAgICAgICAgdGFza3MucHVzaCh1cGRhdGVDb250cm9sVG93ZXJUYXNrKTtcbiAgICB9XG4gICAgLy8gY2xvdWR0cmFpbFxuICAgIGlmICghYXNzZXNzbWVudC5vcmdTZXJ2aWNlcyB8fCAhYXNzZXNzbWVudC5vcmdTZXJ2aWNlcy5maW5kKHBhcmFtID0+IHBhcmFtLnNlcnZpY2UgPT09ICdjbG91ZHRyYWlsLmFtYXpvbmF3cy5jb20nKSkge1xuICAgICAgICBjb25zdCBjdE9yZ1NlcnZpY2VUYXNrID0ge1xuICAgICAgICAgICAgdGl0bGU6ICdFbmFibGUgQVdTIENsb3VkVHJhaWwnLFxuICAgICAgICAgICAgZGV0YWlsOiBgRW5hYmxlIEFXUyBDbG91ZFRyYWlsIGluIEFXUyBPcmdhbml6YXRpb25gLFxuICAgICAgICAgICAgcmVtZWRpYXRpb25MaW5rOiBcImh0dHBzOi8vZG9jcy5hd3MuYW1hem9uLmNvbS9jb250cm9sdG93ZXIvbGF0ZXN0L3VzZXJndWlkZS9yZXNvbHZlLWRyaWZ0Lmh0bWxcIlxuICAgICAgICB9O1xuICAgICAgICB0YXNrcy5wdXNoKGN0T3JnU2VydmljZVRhc2spO1xuICAgIH1cbiAgICAvLyBTMyBTdG9yYWdlIExlbnNcbiAgICBpZiAoIXMzU3RvcmFnZUxlbnNEZWxlZ2F0ZWQpIHtcbiAgICAgICAgY29uc3QgdGFza1MzU3RvcmFnZUxlbnNEZWxlZ2F0ZWQgPSB7XG4gICAgICAgICAgICB0aXRsZTogJ0RlbGVnYXRlIGFkbWluaXN0cmF0aW9uIG9mIEFtYXpvbiBTMyBTdG9yYWdlIExlbnMnLFxuICAgICAgICAgICAgZGV0YWlsOiBgRGVsZWdhdGUgYWRtaW5pc3RyYXRpb24gdG8gQW1hem9uIFMzIFN0b3JhZ2UgTGVuc2AsXG4gICAgICAgICAgICByZW1lZGlhdGlvbkxpbms6IFwiaHR0cHM6Ly9kb2NzLmF3cy5hbWF6b24uY29tL29yZ2FuaXphdGlvbnMvbGF0ZXN0L3VzZXJndWlkZS9zZXJ2aWNlcy10aGF0LWNhbi1pbnRlZ3JhdGUtczNsZW5zLmh0bWwjaW50ZWdyYXRlLWVuYWJsZS1kYS1zM2xlbnNcIlxuICAgICAgICB9O1xuICAgICAgICB0YXNrcy5wdXNoKHRhc2tTM1N0b3JhZ2VMZW5zRGVsZWdhdGVkKTtcbiAgICB9XG4gICAgLy8gQ2xvdWRGb3JtYXRpb25cbiAgICBpZiAoIWFzc2Vzc21lbnQub3JnU2VydmljZXMgfHwgIWFzc2Vzc21lbnQub3JnU2VydmljZXMuZmluZChwYXJhbSA9PiBwYXJhbS5zZXJ2aWNlID09PSAnbWVtYmVyLm9yZy5zdGFja3NldHMuY2xvdWRmb3JtYXRpb24uYW1hem9uYXdzLmNvbScpKSB7XG4gICAgICAgIGNvbnN0IG9yZ1NlcnZpY2VDZm5FbmFibGVUYXNrID0ge1xuICAgICAgICAgICAgdGl0bGU6ICdFbmFibGUgQVdTIENsb3VkRm9ybWF0aW9uJyxcbiAgICAgICAgICAgIGRldGFpbDogYEVuYWJsZSBBV1MgQ2xvdWRGb3JtYXRpb24gaW4gQVdTIE9yZ2FuaXphdGlvbmAsXG4gICAgICAgICAgICByZW1lZGlhdGlvbkxpbms6IFwiaHR0cHM6Ly9kb2NzLmF3cy5hbWF6b24uY29tL0FXU0Nsb3VkRm9ybWF0aW9uL2xhdGVzdC9Vc2VyR3VpZGUvc3RhY2tzZXRzLW9yZ3MtYWN0aXZhdGUtdHJ1c3RlZC1hY2Nlc3MuaHRtbFwiXG4gICAgICAgIH07XG4gICAgICAgIHRhc2tzLnB1c2gob3JnU2VydmljZUNmbkVuYWJsZVRhc2spO1xuICAgIH1cbiAgICAvLyBJZGVudGl0eSBDZW50ZXJcbiAgICBpZiAoIWFzc2Vzc21lbnQub3JnU2VydmljZXMgfHwgIWFzc2Vzc21lbnQub3JnU2VydmljZXMuZmluZChwYXJhbSA9PiBwYXJhbS5zZXJ2aWNlID09PSAnc3NvLmFtYXpvbmF3cy5jb20nKSkge1xuICAgICAgICBjb25zdCBzc29UYXNrID0ge1xuICAgICAgICAgICAgdGl0bGU6ICdFbmFibGUgQVdTIFNpbmdsZSBTaWduLU9uJyxcbiAgICAgICAgICAgIGRldGFpbDogYEVuYWJsZSBBV1MgU2luZ2xlIFNpZ24tT24gaW4gQVdTIE9yZ2FuaXphdGlvbmAsXG4gICAgICAgICAgICByZW1lZGlhdGlvbkxpbms6IFwiaHR0cHM6Ly9kb2NzLmF3cy5hbWF6b24uY29tL3NpbmdsZXNpZ25vbi9sYXRlc3QvdXNlcmd1aWRlL2dldC1zZXQtdXAtZm9yLWlkYy5odG1sXCJcbiAgICAgICAgfTtcbiAgICAgICAgdGFza3MucHVzaChzc29UYXNrKTtcbiAgICB9XG4gICAgaWYgKCFpZGVudGl0eURlbGVnYXRlZCkge1xuICAgICAgICBjb25zdCBpZGVudGl0eURlbGVnYXRlZFRhc2sgPSB7XG4gICAgICAgICAgICB0aXRsZTogJ0RlbGVnYXRlIGFkbWluaXN0cmF0aW9uIHRvIEFXUyBJQU0gSWRlbnRpdHkgQ2VudGVyJyxcbiAgICAgICAgICAgIGRldGFpbDogYERlbGVnYXRlIGFkbWluaXN0cmF0aW9uIHRvIEFXUyBJQU0gSWRlbnRpdHkgQ2VudGVyYCxcbiAgICAgICAgICAgIHJlbWVkaWF0aW9uTGluazogXCJodHRwczovL2RvY3MuYXdzLmFtYXpvbi5jb20vc2luZ2xlc2lnbm9uL2xhdGVzdC91c2VyZ3VpZGUvZGVsZWdhdGVkLWFkbWluLmh0bWxcIlxuICAgICAgICB9O1xuICAgICAgICB0YXNrcy5wdXNoKGlkZW50aXR5RGVsZWdhdGVkVGFzayk7XG4gICAgfVxuICAgIC8vIFNlY3VyaXR5SHViXG4gICAgaWYgKCFhc3Nlc3NtZW50Lm9yZ1NlcnZpY2VzIHx8ICFhc3Nlc3NtZW50Lm9yZ1NlcnZpY2VzLmZpbmQocGFyYW0gPT4gcGFyYW0uc2VydmljZSA9PT0gJ3NlY3VyaXR5aHViLmFtYXpvbmF3cy5jb20nKSkge1xuICAgICAgICBjb25zdCB0YXNrU2VjdXJpdHlIdWJEZWxlZ2F0ZWQgPSB7XG4gICAgICAgICAgICB0aXRsZTogJ0RlbGVnYXRlIGFkbWluaXN0cmF0aW9uIHRvIEFXUyBTZWN1cml0eSBIdWInLFxuICAgICAgICAgICAgZGV0YWlsOiBgRGVsZWdhdGUgYWRtaW5pc3RyYXRpb24gdG8gQVdTIFNlY3VyaXR5IEh1YmAsXG4gICAgICAgICAgICByZW1lZGlhdGlvbkxpbms6IFwiaHR0cHM6Ly9kb2NzLmF3cy5hbWF6b24uY29tL29yZ2FuaXphdGlvbnMvbGF0ZXN0L3VzZXJndWlkZS9zZXJ2aWNlcy10aGF0LWNhbi1pbnRlZ3JhdGUtc2VjdXJpdHlodWIuaHRtbCNpbnRlZ3JhdGUtZW5hYmxlLXRhLXNlY3VyaXR5aHViXCJcbiAgICAgICAgfTtcbiAgICAgICAgdGFza3MucHVzaCh0YXNrU2VjdXJpdHlIdWJEZWxlZ2F0ZWQpO1xuICAgIH1cbiAgICBpZiAoIXNlY3VyaXR5SHViRGVsZWdhdGVkKSB7XG4gICAgICAgIGNvbnN0IHRhc2tTZWN1cml0eUh1YkRlbGVnYXRlZCA9IHtcbiAgICAgICAgICAgIHRpdGxlOiAnRGVsZWdhdGUgYWRtaW5pc3RyYXRpb24gb2YgQVdTIFNlY3VyaXR5IEh1YicsXG4gICAgICAgICAgICBkZXRhaWw6IGBEZWxlZ2F0ZSBhZG1pbmlzdHJhdGlvbiB0byBBV1MgU2VjdXJpdHkgSHViYCxcbiAgICAgICAgICAgIHJlbWVkaWF0aW9uTGluazogXCJodHRwczovL2RvY3MuYXdzLmFtYXpvbi5jb20vc2VjdXJpdHlodWIvbGF0ZXN0L3VzZXJndWlkZS9kZXNpZ25hdGUtb3Jncy1hZG1pbi1hY2NvdW50Lmh0bWxcIlxuICAgICAgICB9O1xuICAgICAgICB0YXNrcy5wdXNoKHRhc2tTZWN1cml0eUh1YkRlbGVnYXRlZCk7XG4gICAgfVxuICAgIC8vIElBTSBBY2Nlc3MgQW5hbHl6ZXJcbiAgICBpZiAoIWFzc2Vzc21lbnQub3JnU2VydmljZXMgfHwgIWFzc2Vzc21lbnQub3JnU2VydmljZXMuZmluZChwYXJhbSA9PiBwYXJhbS5zZXJ2aWNlID09PSAnYWNjZXNzLWFuYWx5emVyLmFtYXpvbmF3cy5jb20nKSkge1xuICAgICAgICBjb25zdCB0YXNrSWFtQWNjZXNzQW5hbHl6ZXJEZWxlZ2F0ZWQgPSB7XG4gICAgICAgICAgICB0aXRsZTogJ0RlbGVnYXRlIGFkbWluaXN0cmF0aW9uIHRvIEFXUyBJQU0gQWNjZXNzIEFuYWx5emVyJyxcbiAgICAgICAgICAgIGRldGFpbDogYERlbGVnYXRlIGFkbWluaXN0cmF0aW9uIHRvIEFXUyBJQU0gQWNjZXNzIEFuYWx5emVyYCxcbiAgICAgICAgICAgIHJlbWVkaWF0aW9uTGluazogXCJodHRwczovL2RvY3MuYXdzLmFtYXpvbi5jb20vSUFNL2xhdGVzdC9Vc2VyR3VpZGUvYWNjZXNzLWFuYWx5emVyLWdldHRpbmctc3RhcnRlZC5odG1sI2FjY2Vzcy1hbmFseXplci1lbmFibGluZ1wiXG4gICAgICAgIH07XG4gICAgICAgIHRhc2tzLnB1c2godGFza0lhbUFjY2Vzc0FuYWx5emVyRGVsZWdhdGVkKTtcbiAgICB9XG4gICAgaWYgKCFpYW1BY2Nlc3NBbmFseXplckRlbGVnYXRlZCkge1xuICAgICAgICBjb25zdCB0YXNrSWFtQWNjZXNzQW5hbHl6ZXJEZWxlZ2F0ZWQgPSB7XG4gICAgICAgICAgICB0aXRsZTogJ0RlbGVnYXRlIGFkbWluaXN0cmF0aW9uIG9mIEFXUyBJQU0gQWNjZXNzIEFuYWx5emVyJyxcbiAgICAgICAgICAgIGRldGFpbDogYERlbGVnYXRlIGFkbWluaXN0cmF0aW9uIHRvIEFXUyBJQU0gQWNjZXNzIEFuYWx5emVyYCxcbiAgICAgICAgICAgIHJlbWVkaWF0aW9uTGluazogXCJodHRwczovL2RvY3MuYXdzLmFtYXpvbi5jb20vSUFNL2xhdGVzdC9Vc2VyR3VpZGUvYWNjZXNzLWFuYWx5emVyLXNldHRpbmdzLmh0bWxcIlxuICAgICAgICB9O1xuICAgICAgICB0YXNrcy5wdXNoKHRhc2tJYW1BY2Nlc3NBbmFseXplckRlbGVnYXRlZCk7XG4gICAgfVxuICAgIC8vIEd1YXJkRHV0eVxuICAgIGlmICghYXNzZXNzbWVudC5vcmdTZXJ2aWNlcyB8fCAhYXNzZXNzbWVudC5vcmdTZXJ2aWNlcy5maW5kKHBhcmFtID0+IHBhcmFtLnNlcnZpY2UgPT09ICdndWFyZGR1dHkuYW1hem9uYXdzLmNvbScpKSB7XG4gICAgICAgIGNvbnN0IHRhc2tHdWFyZER1dHlEZWxlZ2F0ZWQgPSB7XG4gICAgICAgICAgICB0aXRsZTogJ0VuYWJsZSBBV1MgR3VhcmREdXR5JyxcbiAgICAgICAgICAgIGRldGFpbDogYEVuYWJsZSBBV1MgR3VhcmREdXR5IGluIEFXUyBPcmdhbml6YXRpb25gLFxuICAgICAgICAgICAgcmVtZWRpYXRpb25MaW5rOiBcImh0dHBzOi8vZG9jcy5hd3MuYW1hem9uLmNvbS9vcmdhbml6YXRpb25zL2xhdGVzdC91c2VyZ3VpZGUvc2VydmljZXMtdGhhdC1jYW4taW50ZWdyYXRlLWd1YXJkZHV0eS5odG1sI2ludGVncmF0ZS1lbmFibGUtdGEtZ3VhcmRkdXR5XCJcbiAgICAgICAgfTtcbiAgICAgICAgdGFza3MucHVzaCh0YXNrR3VhcmREdXR5RGVsZWdhdGVkKTtcbiAgICB9XG4gICAgaWYgKCFndWFyZER1dHlEZWxlZ2F0ZWQpIHtcbiAgICAgICAgY29uc3QgdGFza0d1YXJkRHV0eURlbGVnYXRlZCA9IHtcbiAgICAgICAgICAgIHRpdGxlOiAnRGVsZWdhdGUgYWRtaW5pc3RyYXRpb24gb2YgQVdTIEd1YXJkRHV0eScsXG4gICAgICAgICAgICBkZXRhaWw6IGBEZWxlZ2F0ZSBhZG1pbmlzdHJhdGlvbiB0byBBV1MgR3VhcmREdXR5YCxcbiAgICAgICAgICAgIHJlbWVkaWF0aW9uTGluazogXCJodHRwczovL2RvY3MuYXdzLmFtYXpvbi5jb20vb3JnYW5pemF0aW9ucy9sYXRlc3QvdXNlcmd1aWRlL3NlcnZpY2VzLXRoYXQtY2FuLWludGVncmF0ZS1ndWFyZGR1dHkuaHRtbFwiXG4gICAgICAgIH07XG4gICAgICAgIHRhc2tzLnB1c2godGFza0d1YXJkRHV0eURlbGVnYXRlZCk7XG4gICAgfVxuICAgIC8vIENvbmZpZ1xuICAgIGlmICghYXNzZXNzbWVudC5vcmdTZXJ2aWNlcyB8fCAhYXNzZXNzbWVudC5vcmdTZXJ2aWNlcy5maW5kKHBhcmFtID0+IHBhcmFtLnNlcnZpY2UgPT09ICdjb25maWcuYW1hem9uYXdzLmNvbScpKSB7XG4gICAgICAgIGNvbnN0IGNvbmZpZ09yZ1NlcnZpY2VUYXNrID0ge1xuICAgICAgICAgICAgdGl0bGU6ICdFbmFibGUgQVdTIENvbmZpZycsXG4gICAgICAgICAgICBkZXRhaWw6IGBFbmFibGUgQVdTIENvbmZpZyBpbiBBV1MgT3JnYW5pemF0aW9uYCxcbiAgICAgICAgICAgIHJlbWVkaWF0aW9uTGluazogXCJodHRwczovL2RvY3MuYXdzLmFtYXpvbi5jb20vb3JnYW5pemF0aW9ucy9sYXRlc3QvdXNlcmd1aWRlL3NlcnZpY2VzLXRoYXQtY2FuLWludGVncmF0ZS1jb25maWcuaHRtbCNpbnRlZ3JhdGUtZW5hYmxlLXRhLWNvbmZpZ1wiXG4gICAgICAgIH07XG4gICAgICAgIHRhc2tzLnB1c2goY29uZmlnT3JnU2VydmljZVRhc2spO1xuICAgIH1cbiAgICBpZiAoIWNvbmZpZ0RlbGVnYXRlZCkge1xuICAgICAgICBjb25zdCB0YXNrQ29uZmlnRGVsZWdhdGVkID0ge1xuICAgICAgICAgICAgdGl0bGU6ICdEZWxlZ2F0ZSBhZG1pbmlzdHJhdGlvbiBvZiBBV1MgQ29uZmlnJyxcbiAgICAgICAgICAgIGRldGFpbDogYERlbGVnYXRlIGFkbWluaXN0cmF0aW9uIHRvIEFXUyBDb25maWdgLFxuICAgICAgICAgICAgcmVtZWRpYXRpb25MaW5rOiBcImh0dHBzOi8vZG9jcy5hd3MuYW1hem9uLmNvbS9vcmdhbml6YXRpb25zL2xhdGVzdC91c2VyZ3VpZGUvc2VydmljZXMtdGhhdC1jYW4taW50ZWdyYXRlLWNvbmZpZy5odG1sXCJcbiAgICAgICAgfTtcbiAgICAgICAgdGFza3MucHVzaCh0YXNrQ29uZmlnRGVsZWdhdGVkKTtcbiAgICB9XG4gICAgLy8gUkFNXG4gICAgaWYgKCFhc3Nlc3NtZW50Lm9yZ1NlcnZpY2VzIHx8ICFhc3Nlc3NtZW50Lm9yZ1NlcnZpY2VzLmZpbmQocGFyYW0gPT4gcGFyYW0uc2VydmljZSA9PT0gJ3JhbS5hbWF6b25hd3MuY29tJykpIHtcbiAgICAgICAgY29uc3Qgb3JnU2VydmljZVJhbVRhc2sgPSB7XG4gICAgICAgICAgICB0aXRsZTogJ0VuYWJsZSBBV1MgUmVzb3VyY2UgQWNjZXNzIE1hbmFnZXInLFxuICAgICAgICAgICAgZGV0YWlsOiBgRW5hYmxlIEFXUyBSZXNvdXJjZSBBY2Nlc3MgTWFuYWdlciBpbiBBV1MgT3JnYW5pemF0aW9uYCxcbiAgICAgICAgICAgIHJlbWVkaWF0aW9uTGluazogXCJodHRwczovL2RvY3MuYXdzLmFtYXpvbi5jb20vb3JnYW5pemF0aW9ucy9sYXRlc3QvdXNlcmd1aWRlL3NlcnZpY2VzLXRoYXQtY2FuLWludGVncmF0ZS1yYW0uaHRtbCNpbnRlZ3JhdGUtZW5hYmxlLXRhLXJhbVwiXG4gICAgICAgIH07XG4gICAgICAgIHRhc2tzLnB1c2gob3JnU2VydmljZVJhbVRhc2spO1xuICAgIH1cbiAgICAvLyBJUEFNXG4gICAgaWYgKCFhc3Nlc3NtZW50Lm9yZ1NlcnZpY2VzIHx8ICFhc3Nlc3NtZW50Lm9yZ1NlcnZpY2VzLmZpbmQocGFyYW0gPT4gcGFyYW0uc2VydmljZSA9PT0gJ2lwYW0uYW1hem9uYXdzLmNvbScpKSB7XG4gICAgICAgIGNvbnN0IG9yZ1NlcnZpY2VJcGFtVGFzayA9IHtcbiAgICAgICAgICAgIHRpdGxlOiAnRW5hYmxlIEFXUyBJUEFNJyxcbiAgICAgICAgICAgIGRldGFpbDogYEVuYWJsZSBBV1MgSVBBTSBpbiBBV1MgT3JnYW5pemF0aW9uYCxcbiAgICAgICAgICAgIHJlbWVkaWF0aW9uTGluazogXCJodHRwczovL2RvY3MuYXdzLmFtYXpvbi5jb20vb3JnYW5pemF0aW9ucy9sYXRlc3QvdXNlcmd1aWRlL3NlcnZpY2VzLXRoYXQtY2FuLWludGVncmF0ZS1pcGFtLmh0bWxcIlxuICAgICAgICB9O1xuICAgICAgICB0YXNrcy5wdXNoKG9yZ1NlcnZpY2VJcGFtVGFzayk7XG4gICAgfVxuICAgIGlmICghaXBhbURlbGVnYXRlZCkge1xuICAgICAgICBjb25zdCB0YXNrSXBhbURlbGVnYXRlZCA9IHtcbiAgICAgICAgICAgIHRpdGxlOiAnRGVsZWdhdGUgYWRtaW5pc3RyYXRpb24gb2YgQVdTIElQQU0nLFxuICAgICAgICAgICAgZGV0YWlsOiBgRGVsZWdhdGUgYWRtaW5pc3RyYXRpb24gdG8gQVdTIElQQU1gLFxuICAgICAgICAgICAgcmVtZWRpYXRpb25MaW5rOiBcImh0dHBzOi8vZG9jcy5hd3MuYW1hem9uLmNvbS92cGMvbGF0ZXN0L2lwYW0vZW5hYmxlLWludGVnLWlwYW0uaHRtbFwiXG4gICAgICAgIH07XG4gICAgICAgIHRhc2tzLnB1c2godGFza0lwYW1EZWxlZ2F0ZWQpO1xuICAgIH1cbiAgICAvLyBBY2NvdW50IE1hbmFnZXJcbiAgICBpZiAoIWFzc2Vzc21lbnQub3JnU2VydmljZXMgfHwgIWFzc2Vzc21lbnQub3JnU2VydmljZXMuZmluZChwYXJhbSA9PiBwYXJhbS5zZXJ2aWNlID09PSAnYWNjb3VudC5hbWF6b25hd3MuY29tJykpIHtcbiAgICAgICAgY29uc3Qgb3JnU2VydmljZUFjY291bnRUYXNrID0ge1xuICAgICAgICAgICAgdGl0bGU6ICdFbmFibGUgQVdTIEFjY291bnQnLFxuICAgICAgICAgICAgZGV0YWlsOiBgRW5hYmxlIEFXUyBBY2NvdW50IGluIEFXUyBPcmdhbml6YXRpb25gLFxuICAgICAgICAgICAgcmVtZWRpYXRpb25MaW5rOiBcImh0dHBzOi8vZG9jcy5hd3MuYW1hem9uLmNvbS9hY2NvdW50cy9sYXRlc3QvcmVmZXJlbmNlL3VzaW5nLW9yZ3MtZGVsZWdhdGVkLWFkbWluLmh0bWxcIlxuICAgICAgICB9O1xuICAgICAgICB0YXNrcy5wdXNoKG9yZ1NlcnZpY2VBY2NvdW50VGFzayk7XG4gICAgfVxuICAgIGlmICghYWNjb3VudERlbGVnYXRlZCkge1xuICAgICAgICBjb25zdCB0YXNrQWNjb3VudERlbGVnYXRlZCA9IHtcbiAgICAgICAgICAgIHRpdGxlOiAnRGVsZWdhdGUgYWRtaW5pc3RyYXRpb24gb2YgQVdTIEFjY291bnQgbWFuYWdlbWVudCcsXG4gICAgICAgICAgICBkZXRhaWw6IGBEZWxlZ2F0ZSBhZG1pbmlzdHJhdGlvbiB0byBBV1MgQWNjb3VudCBjb250YWN0IG1hbmFnZW1lbnRgLFxuICAgICAgICAgICAgcmVtZWRpYXRpb25MaW5rOiBcImh0dHBzOi8vZG9jcy5hd3MuYW1hem9uLmNvbS9vcmdhbml6YXRpb25zL2xhdGVzdC91c2VyZ3VpZGUvc2VydmljZXMtdGhhdC1jYW4taW50ZWdyYXRlLWFjY291bnQuaHRtbCNpbnRlZ3JhdGUtZW5hYmxlLWRhLWFjY291bnRcIlxuICAgICAgICB9O1xuICAgICAgICB0YXNrcy5wdXNoKHRhc2tBY2NvdW50RGVsZWdhdGVkKTtcbiAgICB9XG4gICAgLy8gQmFja3VwXG4gICAgaWYgKCFhc3Nlc3NtZW50Lm9yZ1NlcnZpY2VzIHx8ICFhc3Nlc3NtZW50Lm9yZ1NlcnZpY2VzLmZpbmQocGFyYW0gPT4gcGFyYW0uc2VydmljZSA9PT0gJ2JhY2t1cC5hbWF6b25hd3MuY29tJykpIHtcbiAgICAgICAgY29uc3Qgb3JnU2VydmljZUJhY2t1cFRhc2sgPSB7XG4gICAgICAgICAgICB0aXRsZTogJ0VuYWJsZSBBV1MgQmFja3VwJyxcbiAgICAgICAgICAgIGRldGFpbDogYEVuYWJsZSBBV1MgQmFja3VwIGluIEFXUyBPcmdhbml6YXRpb25gLFxuICAgICAgICAgICAgcmVtZWRpYXRpb25MaW5rOiBcImh0dHBzOi8vZG9jcy5hd3MuYW1hem9uLmNvbS9vcmdhbml6YXRpb25zL2xhdGVzdC91c2VyZ3VpZGUvc2VydmljZXMtdGhhdC1jYW4taW50ZWdyYXRlLWJhY2t1cC5odG1sI2ludGVncmF0ZS1lbmFibGUtdGEtYmFja3VwXCJcbiAgICAgICAgfTtcbiAgICAgICAgdGFza3MucHVzaChvcmdTZXJ2aWNlQmFja3VwVGFzayk7XG4gICAgfVxuICAgIGlmICghYmFja3VwRGVsZWdhdGVkKSB7XG4gICAgICAgIGNvbnN0IHRhc2tCYWNrdXBEZWxlZ2F0ZWQgPSB7XG4gICAgICAgICAgICB0aXRsZTogJ0RlbGVnYXRlIGFkbWluaXN0cmF0aW9uIG9mIEFXUyBCYWNrdXAnLFxuICAgICAgICAgICAgZGV0YWlsOiBgRGVsZWdhdGUgYWRtaW5pc3RyYXRpb24gdG8gQVdTIEJhY2t1cGAsXG4gICAgICAgICAgICByZW1lZGlhdGlvbkxpbms6IFwiaHR0cHM6Ly9kb2NzLmF3cy5hbWF6b24uY29tL2F3cy1iYWNrdXAvbGF0ZXN0L2Rldmd1aWRlL21hbmFnZS1jcm9zcy1hY2NvdW50Lmh0bWwjYmFja3VwLWRlbGVnYXRlZGFkbWluXCJcbiAgICAgICAgfTtcbiAgICAgICAgdGFza3MucHVzaCh0YXNrQmFja3VwRGVsZWdhdGVkKTtcbiAgICB9XG4gICAgcmV0dXJuIHRhc2tzO1xufVxuZXhwb3J0IGRlZmF1bHQgY3JlYXRlQmFja2xvZztcbiIsImltcG9ydCAqIGFzIGZzIGZyb20gJ2ZzJztcbmFzeW5jIGZ1bmN0aW9uIGNyZWF0ZUppcmFJbXBvcnQodGFza3MpIHtcbiAgICBsZXQgY3N2ID0gJ1wiU3VtbWFyeVwiLCBcIkRlc2NyaXB0aW9uXCIsIFwiU3RhdHVzXCIgXFxyXFxuJztcbiAgICBmb3IgKGNvbnN0IHRhc2sgb2YgdGFza3MpIHtcbiAgICAgICAgY3N2ICs9IGBcImNmYXQgLSAke3Rhc2suY2F0ZWdvcnl9IC0gJHt0YXNrLnRpdGxlfVwiLCBcIiR7dGFzay5kZXRhaWx9XCIsIFwiT3BlblwiIFxcclxcbmA7XG4gICAgfVxuICAgIGZzLndyaXRlRmlsZVN5bmMoJy4vamlyYS1pbXBvcnQuY3N2JywgY3N2KTtcbiAgICByZXR1cm47XG59XG5leHBvcnQgZGVmYXVsdCBjcmVhdGVKaXJhSW1wb3J0O1xuIiwiaW1wb3J0ICogYXMgZnMgZnJvbSAnZnMnO1xuYXN5bmMgZnVuY3Rpb24gY3JlYXRlQXNhbmFJbXBvcnQodGFza3MpIHtcbiAgICBsZXQgY3N2ID0gJ1wiVGFza1wiLCBcIkRlc2NyaXB0aW9uXCIsIFwiU3RhdHVzXCIgIFxcclxcbic7XG4gICAgZm9yIChjb25zdCB0YXNrIG9mIHRhc2tzKSB7XG4gICAgICAgIGNzdiArPSBgXCJjZmF0IC0gJHt0YXNrLnRpdGxlfVwiLCBcIiR7dGFzay5kZXRhaWx9IC0gUmVtZWRpYXRpb24gTGluazogJHt0YXNrLnJlbWVkaWF0aW9uTGlua31cIiwgXCJOb3QgU3RhcnRlZFwiIFxcclxcbmA7XG4gICAgfVxuICAgIGZzLndyaXRlRmlsZVN5bmMoJy4vYXNhbmEtaW1wb3J0LmNzdicsIGNzdik7XG4gICAgcmV0dXJuO1xufVxuZXhwb3J0IGRlZmF1bHQgY3JlYXRlQXNhbmFJbXBvcnQ7XG4iLCJpbXBvcnQgZnMgZnJvbSAnZnMnO1xuaW1wb3J0IHBhdGggZnJvbSAncGF0aCc7XG5pbXBvcnQgYXJjaGl2ZXIgZnJvbSAnYXJjaGl2ZXInO1xuYXN5bmMgZnVuY3Rpb24gemlwQXNzZXNzbWVudEZpbGVzKCkge1xuICAgIHRyeSB7XG4gICAgICAgIGNvbnN0IG91dHB1dCA9IGZzLmNyZWF0ZVdyaXRlU3RyZWFtKHBhdGguam9pbihwcm9jZXNzLmN3ZCgpLCAnYXNzZXNzbWVudC56aXAnKSk7XG4gICAgICAgIGNvbnN0IGFyY2hpdmUgPSBhcmNoaXZlcignemlwJywge1xuICAgICAgICAgICAgemxpYjogeyBsZXZlbDogOSB9LCAvLyBTZXRzIHRoZSBjb21wcmVzc2lvbiBsZXZlbC5cbiAgICAgICAgfSk7XG4gICAgICAgIGFyY2hpdmUucGlwZShvdXRwdXQpO1xuICAgICAgICAvLyBBZGQgdGhlIGZpbGVzIHRvIHRoZSBhcmNoaXZlXG4gICAgICAgIGFyY2hpdmUuZmlsZShwYXRoLmpvaW4ocHJvY2Vzcy5jd2QoKSwgJ2NmYXQudHh0JyksIHsgbmFtZTogJ2NmYXQudHh0JyB9KTtcbiAgICAgICAgYXJjaGl2ZS5maWxlKHBhdGguam9pbihwcm9jZXNzLmN3ZCgpLCAnY2ZhdC1jaGVja3MuY3N2JyksIHsgbmFtZTogJ2NmYXQtY2hlY2tzLmNzdicgfSk7XG4gICAgICAgIGFyY2hpdmUuZmlsZShwYXRoLmpvaW4ocHJvY2Vzcy5jd2QoKSwgJ2FzYW5hLWltcG9ydC5jc3YnKSwgeyBuYW1lOiAnYXNhbmEtaW1wb3J0LmNzdicgfSk7XG4gICAgICAgIGFyY2hpdmUuZmlsZShwYXRoLmpvaW4ocHJvY2Vzcy5jd2QoKSwgJ2ppcmEtaW1wb3J0LmNzdicpLCB7IG5hbWU6ICdqaXJhLWltcG9ydC5jc3YnIH0pO1xuICAgICAgICBhcmNoaXZlLmZpbmFsaXplKCk7XG4gICAgICAgIGNvbnNvbGUubG9nKCdaaXAgZmlsZSBjcmVhdGVkIHN1Y2Nlc3NmdWxseSEnKTtcbiAgICB9XG4gICAgY2F0Y2ggKGVycikge1xuICAgICAgICBjb25zb2xlLmVycm9yKCdFcnJvciBjcmVhdGluZyB6aXAgZmlsZTonLCBlcnIpO1xuICAgIH1cbn1cbmV4cG9ydCBkZWZhdWx0IHppcEFzc2Vzc21lbnRGaWxlcztcbiJdLCJuYW1lcyI6WyJyZXF1aXJlIiwidHMiLCJUcmFuc2Zvcm0iLCJ0cmFuc2Zvcm0iLCJjaHVuayIsImVuYyIsImNiIiwibG9nZ2VyIiwiQ29uc29sZSIsInN0ZG91dCIsImFzeW5jIiwicmVwb3J0IiwiY2ZhdENoZWNrcyIsInJlZ2lvbiIsInByb2Nlc3MiLCJlbnYiLCJBV1NfUkVHSU9OIiwiYWxsUmVnaW9ucyIsImVjMkNsaWVudCIsIkVDMkNsaWVudCIsImRlc2NyaWJlUmVnaW9uc0NvbW1hbmQiLCJEZXNjcmliZVJlZ2lvbnNDb21tYW5kIiwicmVzcG9uc2UiLCJzZW5kIiwicmVnaW9ucyIsIlJlZ2lvbnMiLCJwdXNoIiwiUmVnaW9uTmFtZSIsImVycm9yIiwiY29uc29sZSIsImRlc3Ryb3kiLCJsb2ciLCJhY2NvdW50VHlwZSIsIm9yZ2FuaXphdGlvbnNDbGllbnQiLCJPcmdhbml6YXRpb25zQ2xpZW50IiwiaXNJbk9yZ2FuaXphdGlvbiIsImlzTWFuYWdlbWVudEFjY291bnQiLCJjdXJyZW50QWNjb3VudElkIiwic3RzQ2xpZW50IiwiU1RTQ2xpZW50IiwiZ2V0Q2FsbGVySWRlbnRpdHlDb21tYW5kIiwiR2V0Q2FsbGVySWRlbnRpdHlDb21tYW5kIiwiQWNjb3VudCIsImdldEFjY291bnRJZCIsImRlc2NyaWJlT3JnYW5pemF0aW9uQ29tbWFuZCIsIkRlc2NyaWJlT3JnYW5pemF0aW9uQ29tbWFuZCIsImRlc2NyaWJlT3JnYW5pemF0aW9uUmVzcG9uc2UiLCJPcmdhbml6YXRpb24iLCJNYXN0ZXJBY2NvdW50SWQiLCJtYW5hZ2VtZW50QWNjb3VudElkIiwiZGVmaW5lQWNjb3VudFR5cGUiLCJ0cmFuc2l0aW9uYWxGb3VuZCIsInN1c3BlbmRlZEZvdW5kIiwiaW5mcmFzdHJ1Y3R1cmVGb3VuZCIsIndvcmtsb2Fkc0ZvdW5kIiwic2VjdXJpdHlGb3VuZCIsImNmYXRJYW1Vc2VyUGFzcyIsImNmYXRJYW1JZFBPcmdTZXJ2aWNlUGFzcyIsImNmYXRJYW1JZGNDb25maWd1cmVkUGFzcyIsImNmYXRDbG91ZFRyYWlsUGFzcyIsImNmYXRDbG91ZFRyYWlsT3JnVHJhaWxQYXNzIiwiY2ZhdFZwY1Bhc3MiLCJjZmF0RWMyUGFzcyIsImNmYXRDb25maWdNYW5hZ2VtZW50QWNjb3VudFBhc3MiLCJjZmF0Q29uZmlnUmVjb3JkZXJNYW5hZ2VtZW50QWNjb3VudFBhc3MiLCJjZmF0Q2xvdWRUcmFpbE9yZ1NlcnZpY2VFbmFibGVkUGFzcyIsImNmYXRUYWdQb2xpY2llc0VuYWJsZWRQYXNzIiwiY2ZhdFNjcEVuYWJsZWRQYXNzIiwiY2ZhdEJhY2t1cFBvbGljaWVzRW5hYmxlZFBhc3MiLCJjZmF0T3JnQ2xvdWRGb3JtYXRpb25FbmFibGVkUGFzcyIsImNmYXRPcmdDbG91ZEZvcm1hdGlvblN0YXR1c1Bhc3MiLCJjZmF0T3JnU2VydmljZUd1YXJkRHV0eUVuYWJsZWRQYXNzIiwiY2ZhdE9yZ1NlcnZpY2VTZWN1cml0eUh1YkVuYWJsZWRQYXNzIiwiY2ZhdE9yZ1NlcnZpY2VJYW1BY2Nlc3NBbmFseXplckVuYWJsZWRQYXNzIiwiY2ZhdE9yZ1NlcnZpY2VBd3NDb25maWdFbmFibGVkUGFzcyIsImNmYXRPcmdTZXJ2aWNlUmFtRW5hYmxlZFBhc3MiLCJjZmF0Q29udHJvbFRvd2VyRGVwbG95ZWRQYXNzIiwiY2ZhdENvbnRyb2xUb3dlck5vdERyaWZ0ZWRQYXNzIiwiY2ZhdENvbnRyb2xUb3dlckxhdGVzdFZlcnNpb25QYXNzIiwiY2ZhdExvZ0FyY2hpdmVBY2NvdW50UGFzcyIsImNmYXRBdWRpdEFjY291bnRQYXNzIiwiY2ZhdE1hbmFnZW1lbnRBY2NvdW50UGFzcyIsImNmYXRPcmdTZXJ2aWNlQmFja3VwRW5hYmxlZFBhc3MiLCJvcmdhbml6YXRpb25EZXBsb3kiLCJtYW5hZ2VtZW50QWNjb3VudCIsInVuZGVmaW5lZCIsImlhbVVzZXJSZXN1bHQiLCJpYW1DbGllbnQiLCJJQU1DbGllbnQiLCJpYW1Vc2VySW5mbyIsImxpc3RVc2Vyc0NvbW1hbmQiLCJMaXN0VXNlcnNDb21tYW5kIiwibGlzdFVzZXJzUmVzcG9uc2UiLCJ1c2VyIiwiVXNlcnMiLCJ1c2VyTmFtZSIsIlVzZXJOYW1lIiwibGlzdEFjY2Vzc0tleXNDb21tYW5kIiwiTGlzdEFjY2Vzc0tleXNDb21tYW5kIiwiYWNjZXNzS2V5cyIsIkFjY2Vzc0tleU1ldGFkYXRhIiwibGVuZ3RoIiwiYWNjZXNzS2V5IiwiYWNjZXNzS2V5SWQiLCJBY2Nlc3NLZXlJZCIsImdldExhc3RVc2VkQ29tbWFuZCIsIkdldEFjY2Vzc0tleUxhc3RVc2VkQ29tbWFuZCIsImxhc3RVc2VkUmVzcG9uc2UiLCJmb3VuZFVzZXJJbmZvIiwibGFzdFVzZWQiLCJBY2Nlc3NLZXlMYXN0VXNlZCIsIkxhc3RVc2VkRGF0ZSIsImlhbVVzZXJDaGVja3MiLCJlYzJDaGVjayIsImVjMlZhbGlkYXRpb24iLCJjb21tYW5kIiwiRGVzY3JpYmVJbnN0YW5jZXNDb21tYW5kIiwiUmVzZXJ2YXRpb25zIiwiZWMyRm91bmQiLCJmaW5kIiwicGFyYW0iLCJlYzJDaGVja3MiLCJpbmZvIiwiZWMyIiwidnBjQ2hlY2siLCJ2cGNWYWxpZGF0aW9uIiwiRGVzY3JpYmVWcGNzQ29tbWFuZCIsIlZwY3MiLCJ2cGNGb3VuZCIsInZwY0NoZWNrcyIsImNsb3VkVHJhaWxEZXRhaWxzIiwiY2xvdWRUcmFpbFZhbGlkYXRpb24iLCJjbG91ZFRyYWlsQ2xpZW50IiwiQ2xvdWRUcmFpbENsaWVudCIsImNsb3VkVHJhaWxEZXNjcmliZUNvbW1hbmQiLCJEZXNjcmliZVRyYWlsc0NvbW1hbmQiLCJjbG91ZFRyYWlsUmVzcG9uc2UiLCJ0cmFpbExpc3QiLCJ0cmFpbCIsInRyYWlsSW5mbyIsIkhvbWVSZWdpb24iLCJ0cmFpbEZvdW5kIiwiaXNPcmdUcmFpbCIsIklzTXVsdGlSZWdpb25UcmFpbCIsImlzTXVsdGlSZWdpb24iLCJjb25maWdEZXRhaWxzIiwiY29uZmlnU2VydmljZUNsaWVudCIsIkNvbmZpZ1NlcnZpY2VDbGllbnQiLCJjb25maWdEZXRhaWwiLCJjb25maWdSZWNvcmRlckZvdW5kIiwiY29uZmlnRGVsaXZlcnlDaGFubmVsRm91bmQiLCJyZWNvcmRlclJlc3BvbnNlIiwiRGVzY3JpYmVDb25maWd1cmF0aW9uUmVjb3JkZXJTdGF0dXNDb21tYW5kIiwiQ29uZmlndXJhdGlvblJlY29yZGVyc1N0YXR1cyIsImNoYW5uZWxSZXNwb25zZSIsIkRlc2NyaWJlRGVsaXZlcnlDaGFubmVsc0NvbW1hbmQiLCJEZWxpdmVyeUNoYW5uZWxzIiwiY29uZmlnRmluZCIsIm9yZ0RldGFpbHMiLCJvcmdDbGllbnQiLCJvcmdEZXNjcmliZUNvbW1hbmQiLCJvcmdEYXRhIiwiaWQiLCJJZCIsImFybiIsIkFybiIsIkxpc3RSb290c0NvbW1hbmQiLCJyb290cyIsIlJvb3RzIiwicm9vdE91SWQiLCJsZWdhY3lDdXJDaGVjayIsImN1ckNsaWVudCIsIkNvc3RBbmRVc2FnZVJlcG9ydFNlcnZpY2VDbGllbnQiLCJpc0xlZ2FjeUN1clNldHVwIiwiaW5wdXQiLCJEZXNjcmliZVJlcG9ydERlZmluaXRpb25zQ29tbWFuZCIsIlJlcG9ydERlZmluaXRpb25zIiwiZW5hYmxlT3JnUG9saWNpZXNDaGVjayIsInBvbGljeVR5cGVzRW5hYmxlZCIsInNjcEVuYWJsZWQiLCJ0YWdQb2xpY3lFbmFibGVkIiwiYmFja3VwUG9saWN5RW5hYmxlZCIsIlBvbGljeVR5cGVzIiwiZW5hYmxlZFBvbGljeSIsIlR5cGUiLCJTdGF0dXMiLCJvcmdTZXJ2aWNlcyIsImRpc2NvdmVyZWRPcmdTZXJ2aWNlcyIsIm9yZ1NlcnZpY2VBY2Nlc3NDb21tYW5kIiwiTGlzdEFXU1NlcnZpY2VBY2Nlc3NGb3JPcmdhbml6YXRpb25Db21tYW5kIiwib3JnU2VydmljZUFjY2Vzc1Jlc3BvbnNlIiwiRW5hYmxlZFNlcnZpY2VQcmluY2lwYWxzIiwib3JnU2VydmljZSIsImZvdW5kT3JnU2VydmljZSIsInNlcnZpY2UiLCJTZXJ2aWNlUHJpbmNpcGFsIiwiY2ZuT3JnU3RhdHVzIiwib3JnQ2ZuU3RhdHVzIiwic3RhdHVzIiwiY2xvdWRGb3JtYXRpb25DbGllbnQiLCJDbG91ZEZvcm1hdGlvbkNsaWVudCIsImRlc2NyaWJlT3JnQWNjZXNzSW5wdXQiLCJEZXNjcmliZU9yZ2FuaXphdGlvbnNBY2Nlc3NDb21tYW5kIiwiY2xvdWRGb3JtYXRpb25PcmdBY2Nlc3MiLCJjb250cm9sVG93ZXJEZXRhaWxzIiwiY29udHJvbFRvd2VySW5mbyIsImNvbnRyb2xUb3dlckNsaWVudCIsIkNvbnRyb2xUb3dlckNsaWVudCIsIkxpc3RMYW5kaW5nWm9uZXNDb21tYW5kIiwibGFuZGluZ1pvbmVzIiwibGFuZGluZ1pvbmVJZGVudGlmaWVyIiwibHpSZWdpb24iLCJ0b1N0cmluZyIsInNwbGl0IiwiY29udHJvbFRvd2VyUmVnaW9uIiwiY29udHJvbFRvd2VyQ2xpZW50UmVnaW9uIiwiR2V0TGFuZGluZ1pvbmVDb21tYW5kIiwibHpSZXNwb25zZSIsImxhbmRpbmdab25lIiwibGF0ZXN0QXZhaWxhYmxlVmVyc2lvbiIsImRlcGxveWVkVmVyc2lvbiIsInZlcnNpb24iLCJkcmlmdFN0YXR1cyIsImlkY0luZm8iLCJyZWdpb25MaXN0IiwiaWRjRGV0YWlscyIsImZvdW5kIiwic3NvQWRtaW5DbGllbnQiLCJTU09BZG1pbkNsaWVudCIsInNzb0lucHV0IiwiTWF4UmVzdWx0cyIsIk51bWJlciIsIkxpc3RJbnN0YW5jZXNDb21tYW5kIiwic3NvSW5zdGFuY2VSZXNwb25zZSIsIkluc3RhbmNlcyIsInNzb0luc3RhbmNlIiwiSW5zdGFuY2VBcm4iLCJJZGVudGl0eVN0b3JlSWQiLCJvcmdEZWxlZ2F0ZWRBZG1pbkFjY291bnRzIiwib3JnRGFEZXRhaWxzIiwib3JnRGFEZXRhaWwiLCJMaXN0RGVsZWdhdGVkQWRtaW5pc3RyYXRvcnNDb21tYW5kIiwiRGVsZWdhdGVkQWRtaW5pc3RyYXRvcnMiLCJkYSIsIkFjY291bnRJZCIsIkxpc3REZWxlZ2F0ZWRTZXJ2aWNlc0ZvckFjY291bnRDb21tYW5kIiwiYWNjb3VudFJlc3BvbnNlIiwiRGVsZWdhdGVkU2VydmljZXMiLCJzZXJ2aWNlcyIsImFjY291bnROYW1lIiwiTmFtZSIsIm9yZ01lbWJlckFjY291bnRzIiwib3JnTWVtYmVyQWNjb3VudEluZm8iLCJvcmdzQ2xpZW50IiwiTGlzdEFjY291bnRzQ29tbWFuZCIsIkFjY291bnRzIiwiYWNjb3VudCIsIm9yZ01lbWJlckFjY291bnQiLCJhY2NvdW50RW1haWwiLCJFbWFpbCIsIk5leHRUb2tlbiIsIm9yZ0FybiIsIm9yZ0lkIiwib3JnUm9vdE91SWQiLCJvcmdDbG91ZEZvcm1hdGlvblN0YXR1cyIsImNvbnRyb2xUb3dlckRlcGxveWVkVmVyc2lvbiIsImNvbnRyb2xUb3dlckRyaWZ0U3RhdHVzIiwiY29udHJvbFRvd2VyTGF0ZXN0QXZhaWxhYmxlVmVyc2lvbiIsImNvbnRyb2xUb3dlclN0YXR1cyIsImN0RmluZCIsIm9yZ091SW5mbyIsInRvcExldmVsT3VzIiwibGlzdE9Vc0NvbW1hbmQiLCJMaXN0T3JnYW5pemF0aW9uYWxVbml0c0ZvclBhcmVudENvbW1hbmQiLCJQYXJlbnRJZCIsImxpc3RPVXNSZXNwb25zZSIsIk9yZ2FuaXphdGlvbmFsVW5pdHMiLCJvdSIsInRvcExldmVsT3UiLCJuYW1lIiwiTGlzdEFjY291bnRzRm9yUGFyZW50Q29tbWFuZCIsImFjY291bnRzIiwidG9Mb3dlckNhc2UiLCJtZW1iZXJBY2NvdW50IiwiaWRlbnRpdHlEZWxlZ2F0ZWQiLCJzZWN1cml0eUh1YkRlbGVnYXRlZCIsImd1YXJkRHV0eURlbGVnYXRlZCIsImNvbmZpZ0RlbGVnYXRlZCIsImlhbUFjY2Vzc0FuYWx5emVyRGVsZWdhdGVkIiwiczNTdG9yYWdlTGVuc0RlbGVnYXRlZCIsImlwYW1EZWxlZ2F0ZWQiLCJhY2NvdW50RGVsZWdhdGVkIiwiYmFja3VwRGVsZWdhdGVkIiwic3J2IiwibWVzc2FnZSIsIndhcm4iLCJPcmdDaGVjayIsImNoZWNrIiwiZGVzY3JpcHRpb24iLCJyZXF1aXJlZCIsIndlaWdodCIsImxvZSIsInJlbWVkaWF0aW9uTGluayIsIk1BQ2hlY2siLCJjZmF0SWFtVXNlckNoZWNrIiwiY2ZhdEVjMkNoZWNrIiwiY2ZhdFZwY0NoZWNrIiwiY2ZhdENsb3VkVHJhaWxDaGVjayIsImNmYXRDbG91ZFRyYWlsT3JnU2VydmljZUVuYWJsZWRDaGVjayIsImNmYXRDbG91ZFRyYWlsT3JnVHJhaWxDaGVjayIsImNmYXRDb25maWdNYW5hZ2VtZW50QWNjb3VudENoZWNrIiwiY2ZhdENvbmZpZ1JlY29yZGVyTWFuYWdlbWVudEFjY291bnRDaGVjayIsImNmYXRDbG91ZEZvcm1hdGlvbkVuYWJsZUNoZWNrIiwiY2ZhdE9yZ1NlcnZpY2VHdWFyZER1dHlDaGVjayIsImNmYXRPcmdTZXJ2aWNlUmFtQ2hlY2siLCJjZmF0T3JnU2VydmljZVNlY3VyaXR5SHViQ2hlY2siLCJjZmF0T3JnU2VydmljZUlhbUFjY2Vzc0FuYWx5emVyQ2hlY2siLCJjZmF0T3JnU2VydmljZUNvbmZpZ0NoZWNrIiwiY2ZhdE9yZ1NlcnZpY2VDbG91ZEZvcm1hdGlvbkNoZWNrIiwiY2ZhdEluZnJhT3VDaGVjayIsImNmYXRTZWN1cml0eU91Q2hlY2siLCJjZmF0V29ya2xvYWRPdUNoZWNrIiwiY2ZhdElhbUlkQ09yZ1NlcnZpY2VDaGVjayIsImNmYXRJYW1JZGNDb25maWd1cmVkQ2hlY2siLCJjZmF0T3JnUG9saWN5U2NwRW5hYmxlZCIsImNmYXRPcmdQb2xpY3lUYWdQb2xpY3lDaGVjayIsImNmYXRCYWNrdXBQb2xpY2llc0VuYWJsZWRDaGVjayIsImNmYXRDb250cm9sVG93ZXJEZXBsb3llZENoZWNrIiwiY2ZhdENvbnRyb2xUb3dlckxhdGVzdFZlcnNpb25DaGVjayIsImNmYXRDb250cm9sVG93ZXJOb3REcmlmdGVkQ2hlY2siLCJjZmF0TG9nQXJjaGl2ZUFjY291bnRDaGVjayIsImNmYXRBdWRpdEFjY291bnRDaGVjayIsInRhYmxlIiwib2JqZWN0QXJyYXlDU1YiLCJkYXRhIiwiZGF0YUFycmF5IiwiQXJyYXkiLCJpc0FycmF5Iiwia2V5cyIsIk9iamVjdCIsInJvd3MiLCJqb2luIiwib2JqIiwidmFsdWVzIiwibWFwIiwia2V5IiwidmFsdWUiLCJyZXBsYWNlIiwib2JqZWN0VG9DU1YiLCJhc3Nlc3NtZW50IiwidGFza3MiLCJEYXRlIiwidG9VVENTdHJpbmciLCJzY29yZSIsInRvdGFsUmVxdWlyZWRMb2UiLCJ0b3RhbFNjb3JlIiwiY2ZhdFN0YXR1cyIsInJlYWQiLCJpYW1Vc2VyIiwidnBjRmluZCIsIm1hQ2F0ZWdvcnkiLCJpYW1UYXNrIiwidGl0bGUiLCJjYXRlZ29yeSIsImRldGFpbCIsImlhbUFwaVRhc2siLCJlYzJUYXNrIiwidnBjVGFzayIsImdvdkNhdGVnb3J5IiwiY3RPcmdTZXJ2aWNlVGFzayIsImNvbmZpZ09yZ1NlcnZpY2VUYXNrIiwic2NwRW5hYmxlZFRhc2siLCJ0YWdQb2xpY3lFbmFibGVkVGFzayIsImJhY2t1cFBvbGljeUVuYWJsZWRUYXNrIiwibGVnYWN5Q3VyU2V0dXBUYXNrIiwibWFzQ2F0ZWdvcnkiLCJ0cmFuc2l0aW9uYWxUYXNrIiwic3VzcGVuZGVkVGFzayIsIndvcmtsb2Fkc1Rhc2siLCJzZWN1cml0eVRhc2siLCJpbmZyYXN0cnVjdHVyZVRhc2siLCJseldheXBvaW50IiwiZGVwbG95Q29udHJvbFRvd2VyVGFzayIsImZpeEx6RHJpZnRUYXNrIiwidXBkYXRlQ29udHJvbFRvd2VyVGFzayIsIm9yZ1NlcnZpY2VDZm5FbmFibGVUYXNrIiwic3NvQ2F0ZWdvcnkiLCJzc29UYXNrIiwiaWRlbnRpdHlEZWxlZ2F0ZWRUYXNrIiwic2VjQ2F0ZWdvcnkiLCJ0YXNrR3VhcmREdXR5RGVsZWdhdGVkIiwidGFza1NlY3VyaXR5SHViRGVsZWdhdGVkIiwidGFza0lhbUFjY2Vzc0FuYWx5emVyRGVsZWdhdGVkIiwidGFza0Nsb3VkVHJhaWxEZWxlZ2F0ZWQiLCJ0YXNrQ29uZmlnRGVsZWdhdGVkIiwidGFza1MzU3RvcmFnZUxlbnNEZWxlZ2F0ZWQiLCJuZXR3b3JrQ2F0ZWdvcnkiLCJvcmdTZXJ2aWNlSXBhbVRhc2siLCJvcmdTZXJ2aWNlUmFtVGFzayIsInRhc2tJcGFtRGVsZWdhdGVkIiwidGFza1NjcERlbGVnYXRlZCIsIm9iQ2F0ZWdvcnkiLCJvcmdTZXJ2aWNlQWNjb3VudFRhc2siLCJ0YXNrQWNjb3VudERlbGVnYXRlZCIsImJhY2t1cFdheXBvaW50Iiwib3JnU2VydmljZUJhY2t1cFRhc2siLCJ0YXNrQmFja3VwRGVsZWdhdGVkIiwiZW5hYmxlUG9saWN5VHlwZVRhc2siLCJiYWNrbG9nIiwiY3N2IiwidGFzayIsIm91dHB1dCIsImN3ZCIsImFyY2hpdmUiLCJ6bGliIiwibGV2ZWwiLCJwaXBlIiwiZmlsZSIsImZpbmFsaXplIiwiZXJyIiwibWFpbiJdLCJzb3VyY2VSb290IjoiIn0=