(()=>{"use strict";const e=require("@aws-sdk/client-sts"),n=require("@aws-sdk/client-organizations"),t=require("@aws-sdk/client-iam"),o=require("@aws-sdk/client-cloudformation"),i=require("@aws-sdk/client-sso-admin"),a=require("@aws-sdk/client-ec2"),s=require("@aws-sdk/client-cloudtrail"),c=require("@aws-sdk/client-config-service"),r=require("@aws-sdk/client-controltower"),l=require("@aws-sdk/client-cost-and-usage-report-service"),d=require("node:console"),g=require("node:stream"),u=require("fs"),m=new g.Transform({transform(e,n,t){t(null,e)}}),f=new d.Console({stdout:m}),A=require("path"),S=require("archiver");(async()=>{let d={},g=[];const p=process.env.AWS_REGION||"us-east-1",h=await async function(){const e=new a.EC2Client({region:"us-east-1"});try{const n=new a.DescribeRegionsCommand({}),t=await e.send(n),o=[];for(const e of t.Regions||[])o.push(e.RegionName||"");return o}catch(e){return console.error("Error retrieving regions:",e),[]}finally{e.destroy()}}();console.log("discovering your AWS environment...");const y=await(async t=>{const o=new n.OrganizationsClient({region:t});let i=!1,a=!1;try{const s=await async function(n){const t=new e.STSClient({region:n});try{const n=new e.GetCallerIdentityCommand({});return(await t.send(n)).Account}catch(e){throw console.error("Error getting account ID:",e),e}}(t);if(s){const e=new n.DescribeOrganizationCommand({}),t=await o.send(e);if(t.Organization?.MasterAccountId){const e=t.Organization?.MasterAccountId;e==s?(a=!0,i=!0):i=!0}else i=!1}}catch(e){console.error("Error:",e)}finally{o.destroy()}return{isInOrganization:i,isManagementAccount:a}})(p);let w,C,v=!1,O=!1,E=!1,$=!1,b=!1,z=!1,I=!1,T=!1,W=!0,k=!1,D=!1,N=!1,R=!1,L=!1,P=!1,M=!1,U=!1,F=!1,q=!1,G=!1,V=!1,K=!1,Z=!1,B=!1,Y=!1,x=!1,_=!1,H=!0,j=!1;y&&(d.organizationDeploy=y.isInOrganization,d.managementAccount=y.isManagementAccount,void 0===y.isManagementAccount&&(y.isManagementAccount=!1,console.log("AWS account is not the Management Account of an AWS Organization")),H=y.isManagementAccount),console.log("discovering IAM Users...");const J=await(async()=>{const e=new t.IAMClient({region:"us-east-1"}),n=[];try{const o=new t.ListUsersCommand({}),i=await e.send(o);for(const o of i.Users||[]){const i=o.UserName||"",a=new t.ListAccessKeysCommand({UserName:i}),s=(await e.send(a)).AccessKeyMetadata||[];if(s.length>0)for(const o of s){const a=o.AccessKeyId||"",s=new t.GetAccessKeyLastUsedCommand({AccessKeyId:a}),c=await e.send(s),r={userName:i,accessKeyId:a,lastUsed:c&&c.AccessKeyLastUsed&&`${c.AccessKeyLastUsed.LastUsedDate}`||"Not available"};n.push(r)}else{const e={userName:i};n.push(e)}}}catch(e){console.error("Error:",e)}finally{e.destroy()}return n})();J&&J.length>0?(console.log("IAM Users discovered."),d.iamUserChecks=J):$=!0,console.log("discovering EC2 instances across all AWS Regions...");const Q=await async function(e){let n=[];for(const t of e){const e=new a.EC2Client({region:t}),o=new a.DescribeInstancesCommand({});try{const i=await e.send(o);if(i.Reservations)if(i.Reservations.length>0){const e={region:t,ec2Found:!0};n.push(e)}else{const e={region:t,ec2Found:!1};n.push(e)}else{const e={region:t,ec2Found:!1};n.push(e)}}catch(e){console.log(`Error checking instance: ${e}`)}finally{e.destroy()}}return n}(h);if(Q&&Q.find((e=>!0===e.ec2Found))){d.ec2Checks=Q,console.info("warning: EC2 instances discovered.");for(const e of Q)k=!1}console.log("discovering VPCs across all AWS Regions...");const X=await async function(e){let n=[];for(const t of e){const e=new a.EC2Client({region:t}),o=new a.DescribeVpcsCommand({});try{const i=await e.send(o);if(i.Vpcs)if(i.Vpcs.length>0){const e={region:t,vpcFound:!0};n.push(e)}else{const e={region:t,vpcFound:!1};n.push(e)}else{const e={region:t,vpcFound:!1};n.push(e)}}catch(e){console.log(`Error: ${e}`)}finally{e.destroy()}}return n}(h);if(d.vpcChecks=X,X&&X.length>0&&(W=!1,console.log("warning: VPCs discovered.")),console.log("discovering AWS Config configurations across all AWS Regions..."),d.cloudTrailDetails=await async function(e){let n=[];for(const t of e){const e=new s.CloudTrailClient({region:t}),o=new s.DescribeTrailsCommand({});try{const i=await e.send(o);if(i.trailList)for(const e of i.trailList){let o={};o=e.HomeRegion==t?{region:t,trailFound:!0,isOrgTrail:e.IsMultiRegionTrail,isMultiRegion:e.IsMultiRegionTrail}:{region:t,trailFound:!1},n.push(o)}}catch(e){console.log(`Error checking instance: ${e}`)}finally{e.destroy()}}return n}(h),d.configDetails=await async function(e){let n=[];for(const t of e){const e=new c.ConfigServiceClient({region:t});let o={region:t,configRecorderFound:!1,configDeliveryChannelFound:!1};try{const t=await e.send(new c.DescribeConfigurationRecorderStatusCommand({}));0!==t.ConfigurationRecordersStatus?.length&&(o.configRecorderFound=!0);const i=await e.send(new c.DescribeDeliveryChannelsCommand({}));0!==i.DeliveryChannels?.length&&(o.configDeliveryChannelFound=!0),n.push(o)}catch(e){console.error(`Error checking AWS Config in ${t}:`,e)}finally{e.destroy()}}return n}(h),d.configDetails&&d.configDetails.find((e=>!0===e.configRecorderFound)))for(const e of d.configDetails)e.configRecorderFound&&(D=!0),e.configDeliveryChannelFound&&(N=!0);if(y.isInOrganization&&y.isManagementAccount){console.log("collecting general AWS Organization details...");const e=await async function(e){const t=new n.OrganizationsClient({region:e});let o={};try{const e=new n.DescribeOrganizationCommand({}),i=await t.send(e);i.Organization&&(o.id=i.Organization.Id??"",o.arn=i.Organization.Arn??"");const a=new n.ListRootsCommand({}),s=await t.send(a);s.Roots?o.rootOuId=s.Roots[0].Id:console.log("No info found for your AWS Organization.")}catch(e){console.error(`An error occurred: ${e}`)}finally{return t.destroy(),o}}("us-east-1");console.log("collecting CUR details...");const t=await(async e=>{const n=new l.CostAndUsageReportServiceClient({region:e});let t=!1;try{const e={},o=new l.DescribeReportDefinitionsCommand(e),i=await n.send(o);return i.ReportDefinitions&&i.ReportDefinitions.length>0&&(t=!0),{isLegacyCurSetup:t}}catch(e){return console.error(`Error: ${e}`),t=!1,{isLegacyCurSetup:t}}finally{n.destroy()}})("us-east-1");console.log("collecting AWS Organization Policy details...");const a=await async function(e){const t=new n.OrganizationsClient({region:e});let o={scpEnabled:!1,tagPolicyEnabled:!1,backupPolicyEnabled:!1};try{const e={},i=new n.ListRootsCommand(e),a=await t.send(i);if(a.Roots&&a.Roots[0].PolicyTypes)for(const e of a.Roots[0].PolicyTypes)"SERVICE_CONTROL_POLICY"==e.Type&&"ENABLED"==e.Status&&(o.scpEnabled=!0),"TAG_POLICY"==e.Type&&"ENABLED"==e.Status&&(o.tagPolicyEnabled=!0),"BACKUP_POLICY"==e.Type&&"ENABLED"==e.Status&&(o.backupPolicyEnabled=!0)}catch(e){console.error(`An error occurred: ${e}`)}finally{return t.destroy(),o}}("us-east-1");console.log("collecting AWS Organization service trusted access details..."),d.orgServices=await async function(e){const t=[],o=new n.OrganizationsClient({region:e});try{const e=new n.ListAWSServiceAccessForOrganizationCommand({}),i=await o.send(e);if(i.EnabledServicePrincipals&&i.EnabledServicePrincipals.length>0){i.EnabledServicePrincipals;for(const e of i.EnabledServicePrincipals){const n={service:e.ServicePrincipal??""};t.push(n)}}}catch(e){console.error("Error checking service access:",e)}finally{return o.destroy(),t}}("us-east-1"),console.log("collecting AWS Organization CloudFormation status details...");const s=await async function(e){let n={status:"disabled"};const t=new o.CloudFormationClient({region:e});try{const e={},i=new o.DescribeOrganizationsAccessCommand(e),a=await t.send(i);n.status=a.Status??"disabled"}catch(e){console.log(`Error: ${e}`)}finally{return t.destroy(),n}}(p);console.log("collecting AWS Control Tower details...");const c=await async function(e){let n={};const t=new r.ControlTowerClient({region:e});try{const e=new r.ListLandingZonesCommand({}),o=await t.send(e);if(o.landingZones&&o.landingZones.length>0){const e={landingZoneIdentifier:o.landingZones[0].arn},t=o.landingZones[0].arn?.toString().split(":")[3]??"";if(t){n.controlTowerRegion=t;const o=new r.ControlTowerClient({region:t}),i=new r.GetLandingZoneCommand(e),a=await o.send(i);a.landingZone&&(n.status=a.landingZone.status,n.latestAvailableVersion=a.landingZone.latestAvailableVersion,n.deployedVersion=a.landingZone.version,n.driftStatus=a.landingZone.driftStatus?.status)}}}catch(n){console.error(`Error checking Control Tower in ${e}:`,n)}finally{t.destroy()}return n}(p);if(d.idcInfo=await async function(e){let n={found:!1};for(const t of e){const e=new i.SSOAdminClient({region:t});try{const o={MaxResults:Number("100")},a=new i.ListInstancesCommand(o),s=await e.send(a);if(s.Instances&&s.Instances.length>0){const e=s.Instances[0];n.found=!0,n.region=t,n.arn=e.InstanceArn,n.id=e.IdentityStoreId;break}}catch(e){console.log(`Error looking for AWS Identity Center details in region ${t}`)}finally{e.destroy()}}return n}(h),console.log("collecting AWS Organization service delegated admin details..."),d.orgDelegatedAdminAccounts=await async function(){let e=[];const t=new n.OrganizationsClient({region:"us-east-1"});let o={};try{const i=new n.ListDelegatedAdministratorsCommand({}),a=await t.send(i);if(a.DelegatedAdministrators)for(const i of a.DelegatedAdministrators){const a={AccountId:i.Id},s=new n.ListDelegatedServicesForAccountCommand(a),c=await t.send(s);c.DelegatedServices&&(o={services:c.DelegatedServices,accountName:i.Name},e.push(o))}}catch(e){console.log("Error looking for delegated services.")}finally{t.destroy()}return e}(),console.log("collecting AWS Organization member account details..."),d.orgMemberAccounts=await async function(){let e=[];const t=new n.OrganizationsClient({region:"us-east-1"});Number("200");try{let o=await t.send(new n.ListAccountsCommand({}));if(o.Accounts&&o.Accounts.length>0){for(const n of o.Accounts){let t={accountName:n.Name,accountEmail:n.Email};e.push(t)}do{if(o.NextToken&&(o=await t.send(new n.ListAccountsCommand({NextToken:o.NextToken})),o.Accounts&&o.Accounts.length>0))for(const n of o.Accounts){let t={accountName:n.Name,accountEmail:n.Email};e.push(t)}}while(o.NextToken)}}catch(e){console.error("Error listing AWS accounts:",e)}finally{t.destroy()}return e}(),d.isLegacyCurSetup=t.isLegacyCurSetup,d.orgArn=e.arn,d.orgId=e.id,d.orgRootOuId=e.rootOuId,d.backupPolicyEnabled=a.backupPolicyEnabled,d.scpEnabled=a.scpEnabled,d.tagPolicyEnabled=a.tagPolicyEnabled,d.orgCloudFormationStatus=s.status,d.controlTowerDeployedVersion=c.deployedVersion,d.controlTowerDriftStatus=c.driftStatus,d.controlTowerLatestAvailableVersion=c.latestAvailableVersion,d.controlTowerRegion=c.controlTowerRegion,d.controlTowerStatus=c.status,d.idcInfo.arn&&(z=!0),d.cloudTrailDetails&&d.cloudTrailDetails.length>0){I=!0;for(const e of d.cloudTrailDetails)e.trailFound&&e.isOrgTrail&&(T=!0)}if(d.orgServices.find((e=>"cloudtrail.amazonaws.com"===e.service))&&(R=!0),d.orgServices.find((e=>"config.amazonaws.com"===e.service))&&(V=!0),a.scpEnabled&&(P=!0),a.tagPolicyEnabled&&(L=!0),a.backupPolicyEnabled&&(M=!0),e.rootOuId&&(console.log("collecting OU and member account details..."),d.orgOuInfo=await async function(e,t){const o=new n.OrganizationsClient({region:e});let i=[];try{const e=new n.ListOrganizationalUnitsForParentCommand({ParentId:t}),a=await o.send(e);if(a.OrganizationalUnits)for(const e of a.OrganizationalUnits){let t={id:e.Id,name:e.Name};const a=await o.send(new n.ListAccountsForParentCommand({ParentId:e.Id}));a.Accounts&&a.Accounts.length>0&&(t.accounts=a.Accounts),i.push(t)}}catch(e){return console.error("Error checking service access:",e),[]}finally{o.destroy()}return i}("us-east-1",e.rootOuId),d.orgOuInfo&&d.orgOuInfo.length>0))for(const e of d.orgOuInfo)"suspended"===e.name?.toLowerCase()&&(C=!0),"transitional"===e.name?.toLowerCase()&&(w=!0),"workloads"===e.name?.toLowerCase()&&(O=!0),"security"===e.name?.toLowerCase()&&(E=!0),"infrastructure"===e.name?.toLowerCase()&&(v=!0);if(d.orgMemberAccounts&&d.orgMemberAccounts.length>0)for(const e of d.orgMemberAccounts)e.accountName&&("log archive"===e.accountName.toLowerCase()&&(x=!0),"audit"===e.accountName.toLowerCase()&&(_=!0),"security tooling"===e.accountName.toLowerCase()&&(_=!0));let g=!1,u=!1,m=!1,f=!1,A=!1,S=!1,y=!1,$=!1,W=!1;if(d.orgDelegatedAdminAccounts&&d.orgDelegatedAdminAccounts.length>0)for(const e of d.orgDelegatedAdminAccounts)if(e.services&&e.services.length>0)for(const n of e.services)"securityhub.amazonaws.com"===n.ServicePrincipal&&(u=!0),"guardduty.amazonaws.com"===n.ServicePrincipal&&(m=!0),"sso.amazonaws.com"===n.ServicePrincipal&&(g=!0),"config.amazonaws.com"===n.ServicePrincipal&&(f=!0),"access-analyzer.amazonaws.com"===n.ServicePrincipal&&(A=!0),"storage-lens.s3.amazonaws.com"===n.ServicePrincipal&&(S=!0),"ipam.amazonaws.com"===n.ServicePrincipal&&(y=!0),"account.amazonaws.com"===n.ServicePrincipal&&($=!0),"backup.amazonaws.com"===n.ServicePrincipal&&(W=!0);c.controlTowerRegion&&(Z=!0),"DRIFTED"!==c.driftStatus&&(B=!0),c.deployedVersion===c.latestAvailableVersion&&(Y=!0),d.orgServices.find((e=>"member.org.stacksets.cloudformation.amazonaws.com"===e.service))&&(U=!0),d.orgServices.find((e=>"sso.amazonaws.com"===e.service))&&(b=!0),d.orgServices.find((e=>"guardduty.amazonaws.com"===e.service))&&(F=!0),d.orgServices.find((e=>"securityhub.amazonaws.com"===e.service))&&(q=!0),d.orgServices.find((e=>"access-analyzer.amazonaws.com"===e.service))&&(G=!0),d.orgServices.find((e=>"ram.amazonaws.com"===e.service))&&(K=!0),d.orgServices.find((e=>"backup.amazonaws.com"===e.service))&&(j=!0)}else if(y.isInOrganization&&!y.isManagementAccount){const e="\nWARNING: You are running CFAT from an account that is a member of your AWS Organization. Please run the solution from your AWS Management account.";console.warn(e)}else{const e="\nWARNING: You are running CFAT from an account that not part of an AWS Organization. This account will be treated as a standalone account.";console.warn(e)}let ee={check:"AWS Organization created",description:"AWS Organization is enabled.",status:y.isInOrganization?"complete":"incomplete",required:!0,weight:6,loe:1,remediationLink:" "};g.push(ee);let ne={check:"Management Account created",description:"AWS Management account exists.",status:H?"complete":"incomplete",required:!0,weight:6,loe:1,remediationLink:" "};g.push(ne);const te={check:"Management Account IAM Users removed",description:"IAM Users should not exist in Management Account.",status:$?"complete":"incomplete",required:!1,weight:4,loe:1,remediationLink:" "};g.push(te);const oe={check:"Management Account EC2 instances removed",description:"EC2 Instances should not exist in Management Account.",status:k?"complete":"incomplete",required:!1,weight:4,loe:1,remediationLink:" "};g.push(oe);const ie={check:"Management Account VPCs removed",description:"Management Account should not have any VPCs.",status:W?"complete":"incomplete",required:!1,weight:4,loe:1,remediationLink:"https://github.com/cloud-foundations-on-aws/cloud-foundations-templates/blob/main/network/network-default-vpc-deletion/README.md"};g.push(ie),d.isLegacyCurSetup;const ae={check:"CloudTrail Trail created",description:"CloudTrail should be enabled within the account.",status:I?"complete":"incomplete",required:!0,weight:6,loe:3,remediationLink:"https://docs.aws.amazon.com/awscloudtrail/latest/userguide/creating-trail-organization.html"};g.push(ae);const se={check:"CloudTrail Organization Service enabled",description:"CloudTrail should be enabled on the Organization.",status:R?"complete":"incomplete",required:!0,weight:6,loe:1,remediationLink:"https://docs.aws.amazon.com/organizations/latest/userguide/services-that-can-integrate-cloudtrail.html"};g.push(se);const ce={check:"CloudTrail Org Trail deployed",description:"At least one CloudTrail Organization Trail should be enabled.",status:T?"complete":"incomplete",required:!0,weight:6,loe:1,remediationLink:"https://docs.aws.amazon.com/awscloudtrail/latest/userguide/creating-trail-organization.html"};g.push(ce);const re={check:"Config Recorder in Management Account configured",description:"Config Recorder in the Management Account should be enabled.",status:D?"complete":"incomplete",required:!0,weight:6,loe:2,remediationLink:"https://aws.amazon.com/blogs/mt/managing-aws-organizations-accounts-using-aws-config-and-aws-cloudformation-stacksets/"};g.push(re);const le={check:"Config Delivery Channel in Management Account configured",description:"Config Delivery Channel in Management Account should be enabled.",status:N?"complete":"incomplete",required:!0,weight:6,loe:2,remediationLink:"https://aws.amazon.com/blogs/mt/managing-aws-organizations-accounts-using-aws-config-and-aws-cloudformation-stacksets/"};g.push(le);g.push({check:"CloudFormation StackSets activated",description:"CloudFormation StackSets should be activated in the CloudFormation console.",status:"incomplete",required:!1,weight:5,loe:1,remediationLink:"https://docs.aws.amazon.com/organizations/latest/userguide/services-that-can-integrate-cloudformation.html#integrate-enable-ta-cloudformation"});const de={check:"GuardDuty Organization service enabled",description:"GuardDuty Organization services should be enabled.",status:F?"complete":"incomplete",required:!1,weight:4,loe:1,remediationLink:" "};g.push(de);const ge={check:"RAM Organization service enabled",description:"Resource Access Manager (RAM) trusted access should be enabled in the AWS Organization.",status:K?"complete":"incomplete",required:!1,weight:4,loe:1,remediationLink:" "};g.push(ge);const ue={check:"Security Hub Organization service enabled",description:"Security Hub trusted access should be enabled in the AWS Organization.",status:q?"complete":"incomplete",required:!1,weight:4,loe:1,remediationLink:" "};g.push(ue);const me={check:"IAM Access Analyzer Organization service enabled",description:"IAM Access Analyzer trusted access should be enabled in the AWS Organization.",status:G?"complete":"incomplete",required:!1,weight:4,loe:1,remediationLink:" "};g.push(me);const fe={check:"Config Organization service enabled",description:"AWS Config trusted access should be enabled in the AWS Organization.",status:V?"complete":"incomplete",required:!1,weight:4,loe:1,remediationLink:" "};g.push(fe);const Ae={check:"CloudFormation Organization service enabled",description:"CloudFormation trusted access should be enabled in the AWS Organization.",status:U?"complete":"incomplete",required:!1,weight:5,loe:1,remediationLink:"https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/stacksets-orgs-activate-trusted-access.html"};g.push(Ae);const Se={check:"Top-level Infrastructure OU deployed",description:"Top-level Infrastructure OU should exist.",status:v?"complete":"incomplete",required:!1,weight:5,loe:2,remediationLink:"https://catalog.workshops.aws/control-tower/en-US/introduction/manage-ou"};g.push(Se);const pe={check:"Top-level Security OU deployed",description:"Top-level Security OU should exist.",status:E?"complete":"incomplete",required:!0,weight:6,loe:2,remediationLink:"https://catalog.workshops.aws/control-tower/en-US/introduction/manage-ou"};g.push(pe);const he={check:"Top-level Workloads OU deployed",description:"Top-level Workloads OU should exist.",status:O?"complete":"incomplete",required:!1,weight:5,loe:2,remediationLink:"https://catalog.workshops.aws/control-tower/en-US/introduction/manage-ou"};g.push(he);const ye={check:"IAM IdC Organization service enabled",description:"IAM Identity Center trusted access should be enabled in the AWS Organization",status:b?"complete":"incomplete",required:!0,weight:6,loe:1,remediationLink:"https://docs.aws.amazon.com/singlesignon/latest/userguide/get-set-up-for-idc.html"};g.push(ye);const we={check:"IAM IdC configured",description:"IAM Identity Center should be configured.",status:z?"complete":"incomplete",required:!0,weight:6,loe:3,remediationLink:"https://docs.aws.amazon.com/singlesignon/latest/userguide/tutorials.html"};g.push(we);const Ce={check:"Service Control Policies enabled",description:"Service Control Policy should be enabled within the AWS Organization.",status:P?"complete":"incomplete",required:!0,weight:6,loe:1,remediationLink:"https://docs.aws.amazon.com/organizations/latest/userguide/orgs_manage_policies_enable-disable.html"};g.push(Ce);const ve={check:"Organization Tag Policy enabled",description:"Tag Policy should be enabled within the AWS Organization.",status:L?"complete":"incomplete",required:!0,weight:6,loe:1,remediationLink:"https://docs.aws.amazon.com/organizations/latest/userguide/orgs_manage_policies_enable-disable.html"};g.push(ve);const Oe={check:"Organization Backup Policy enabled",description:"Backup Policy should be enabled within the AWS Organization.",status:M?"complete":"incomplete",required:!1,weight:5,loe:1,remediationLink:"https://docs.aws.amazon.com/organizations/latest/userguide/orgs_manage_policies_enable-disable.html"};g.push(Oe);const Ee={check:"Control Tower deployed",description:"Control Tower should be deployed.",status:Z?"complete":"incomplete",required:!0,weight:6,loe:6,remediationLink:"https://catalog.workshops.aws/control-tower/en-US/prerequisites/deploying"};g.push(Ee);const $e={check:"Control Tower latest version",description:"Control Tower should be the latest version.",status:Y?"complete":"incomplete",required:!1,weight:5,loe:2,remediationLink:"https://docs.aws.amazon.com/controltower/latest/userguide/update-controltower.html"};g.push($e);const be={check:"Control Tower not drifted",description:"Control Tower should not be drifted.",status:B?"complete":"incomplete",required:!0,weight:6,loe:2,remediationLink:"https://docs.aws.amazon.com/controltower/latest/userguide/resolve-drift.html"};g.push(be);const ze={check:"Log Archive account deployed",description:"Log Archive account should exist.",status:x?"complete":"incomplete",required:!0,weight:6,loe:2,remediationLink:" "};g.push(ze);const Ie={check:"Audit account deployed",description:"Audit/Security Tooling account should exist.",status:_?"complete":"incomplete",required:!0,weight:6,loe:2,remediationLink:" "};g.push(Ie),d.cfatChecks=g,console.table(g,["check","status","required","loe"]),console.log("writing assessment summary checks to ./cfat/cfat-checks.csv...");const Te=function(e){const n=Array.isArray(e)?e:[e],t=n.length>0?Object.keys(n[0]):[],o=[t.join(",")];for(const e of n){const n=t.map((n=>{const t=e[n];return"string"==typeof t?`"${t.replace(/"/g,'""')}"`:t}));o.push(n.join(","))}return o.join("\n")}(g);u.writeFileSync("./cfat-checks.csv",Te);const We=await async function(e){let n=[],t="Cloud Foundation Assessment Tool";t+=`\nGenerated on: ${(new Date).toUTCString()} \n\n`;let o=0,i=0,a=0,s="COMPLETE";if(e.cfatChecks&&e.cfatChecks.length>0){t+="\nIncomplete Requirements:";for(const n of e.cfatChecks)a+=n.weight,!0===n.required&&"incomplete"===n.status&&(t+=`\n    INCOMPLETE: ${n.check}`,i+=n.loe,s="INCOMPLETE"),"complete"===n.status&&(o+=n.weight);t+="\n\n====================================\n",t+=`\nFoundation Status: ${s}`,"INCOMPLETE"===s&&(t+=`\nEstimate of Required Level of Effort (LOE): ${i} hours`),t+=`\nCFAT Score: ${o} out of ${a}`,t+="\n\n====================================\n",t+="\nFoundation Checks:\n",e.cfatChecks&&e.cfatChecks.length>0&&(t+=`${c=e.cfatChecks,f.table(c),(m.read()||"").toString()}`)}var c;if(t+="\n\nStart Detailed Report:\n\n",t+="\n*********************************************************",t+="\n                   MANAGEMENT ACCOUNT",t+="\n*********************************************************",t+="\n\nAWS ACCOUNT TYPE\n",t+=`\n  Is in AWS Organization: ${e.organizationDeploy}`,t+=`\n  Assessing AWS Management Account: ${e.managementAccount}`,t+="\n\nIAM USERS CHECK\n",e.iamUserChecks&&e.iamUserChecks.length>0)for(const n of e.iamUserChecks)t+=`\n  IAM User: ${n.userName}`,n.accessKeyId&&(t+=`\n    User API Key ID: ${n.accessKeyId}`),t+="\n";else t+="\n  No IAM Users found.";if(t+="\n\nEC2 INSTANCE CHECK\n",e.ec2Checks&&e.ec2Checks.find((e=>!0===e.ec2Found)))for(const n of e.ec2Checks)n.ec2Found&&(t+=`\n  ${n.region} - found EC2 Instance(s).`);else t+="\n  No EC2 instances found.";if(t+="\n\nVPC CHECK\n",e.vpcChecks&&e.vpcChecks.length>0)for(const n of e.vpcChecks)n.vpcFound&&(t+=`\n  ${n.region} - found VPC(s).`);else t+="\n  No VPCs found.";if(t+="\n\nAWS CONFIG CHECK\n",e.configDetails&&e.configDetails.find((e=>!0===e.configRecorderFound)))for(const n of e.configDetails)n.configRecorderFound&&(t+=`\n  ${n.region} - Config Recorder found`),n.configDeliveryChannelFound&&(t+=`\n  ${n.region} - Config Delivery Channel found`);else t+="\n  No AWS Config resource discovered";t+="\n\nMANAGEMENT ACCOUNT TASKS:";const r="Management Account";if(e.iamUserChecks&&e.iamUserChecks.length>0)for(const o of e.iamUserChecks){let e={title:`Remove IAM user ${o.userName}`,category:r,detail:`Review and determine if IAM user ${o.userName} can be deleted.`};const i=`${e.title} - ${e.category} - ${e.detail}`;if(n.push(e),t+=`\n  ${i}`,o.accessKeyId){let e={title:`Remove IAM user ${o.userName} API key ${o.accessKeyId} `,category:r,detail:`Review and determine if IAM user API key ${o.accessKeyId} for ${o.userName} can be removed.`};t+=`\n  ${e.title} - ${e.category} - ${e.detail}`,n.push(e)}}if(e.ec2Checks&&e.ec2Checks.find((e=>!0===e.ec2Found)))for(const o of e.ec2Checks)if(o.ec2Found&&o.region){let e={title:`Delete EC2 instance in ${o.region}`,category:r,detail:`Delete any unnecessary EC2 instance in ${o.region}`};t+=`\n  ${e.title} - ${e.category} - ${e.detail}`,n.push(e)}if(e.vpcChecks&&e.vpcChecks.length>0)for(const o of e.vpcChecks)if(o.vpcFound&&o.region){let e={title:`Delete VPC in ${o.region}`,category:r,detail:`Delete any unnecessary VPC in ${o.region} to include the default VPC.`};t+=`\n  ${e.title} - ${e.category} - ${e.detail}`,n.push(e)}if(t+="\n\n*********************************************************",t+="\n                    GOVERNANCE",t+="\n*********************************************************",t+="\n\nAWS ORGANIZATION POLICY TYPES\n",t+=`\n  Service Control Policies (SCP) enabled: ${e.scpEnabled}`,t+=`\n  Tag Policies enabled: ${e.tagPolicyEnabled}`,t+=`\n  Backup Policies enabled: ${e.backupPolicyEnabled}`,t+="\n\nAWS ORGANIZATION CLOUDFORMATION\n",t+=`\n  AWS CloudFormation Organization stack sets status : ${e.orgCloudFormationStatus}`,t+="\n\nCLOUDTRAIL CHECK\n",e.cloudTrailDetails&&e.cloudTrailDetails.length>0)for(const n of e.cloudTrailDetails)n.trailFound&&(t+=`\n  CloudTrail found in ${n.region}`,t+=`\n    Is Organization Trail: ${n.isOrgTrail}`,t+=`\n    Is MultiRegion: ${n.isMultiRegion}`,t+="\n");else t+="\n  No AWS CloudTrail resource discovered";t+="\n\nGOVERNANCE SERVICES ENABLED IN AWS ORGANIZATION:\n",e.orgServices?(e.orgServices.find((e=>"cloudtrail.amazonaws.com"===e.service))&&(t+="\n  AWS CloudTrail"),e.orgServices.find((e=>"config.amazonaws.com"===e.service))&&(t+="\n  AWS Config")):t+="\n  No governance service enabled",t+="\n\nGOVERNANCE TASKS:";const l="Governance";if(!e.orgServices||!e.orgServices.find((e=>"cloudtrail.amazonaws.com"===e.service))){const e={title:"Enable AWS CloudTrail",category:l,detail:"Enable AWS CloudTrail in AWS Organization"};n.push(e),t+=`\n  ${e.title} - ${e.category} - ${e.detail}`}if(!e.orgServices||!e.orgServices.find((e=>"config.amazonaws.com"===e.service))){const e={title:"Enable AWS Config",category:l,detail:"Enable AWS Config in AWS Organization"};n.push(e),t+=`\n  ${e.title} - ${e.category} - ${e.detail}`}if(!e.scpEnabled){const e={title:"Enable SCP",category:l,detail:"Enable SCP in AWS Organization"};n.push(e),t+=`\n  ${e.title} - ${e.category} - ${e.detail}`}if(!e.tagPolicyEnabled){let e={title:"Enable Tag Policy",category:l,detail:"Enable Tag Policy in AWS Organization"};n.push(e),t+=`\n  ${e.title} - ${e.category} - ${e.detail}`}if(!e.backupPolicyEnabled){let e={title:"Enable Backup Policy",category:l,detail:"Enable Backup Policy in AWS Organization"};n.push(e),t+=`\n  ${e.title} - ${e.category} - ${e.detail}`}if(t+="\n\n*********************************************************",t+="\n                FINANCIAL MANAGEMENT",t+="\n*********************************************************",t+="\n\nLegacy CUR",t+=`\n  Is legacy CUR setup: ${e.isLegacyCurSetup}`,t+="\n\nCLOUD FINANCIAL MANAGEMENT TASKS:",!e.isLegacyCurSetup){const e={title:"Setup legacy CUR",category:"Cloud Financial Management",detail:"Setup legacy CUR in AWS Organization"};n.push(e),t+=`\n  ${e.title} - ${e.category} - ${e.detail}`}t+="\n\n*********************************************************",t+="\n                MULTI-ACCOUNT STRATEGY",t+="\n*********************************************************",t+="\n\nAWS ORGANIZATION DETAILS\n",t+=`\n  AWS Organization Id: ${e.orgId}`,t+=`\n  AWS Organization ARN: ${e.orgArn}`,t+=`\n  AWS Organization Root OU Id: ${e.orgRootOuId}`,t+="\n\nAWS ORGANIZATION CLOUDFORMATION\n",t+=`\n  AWS CloudFormation Organization stack sets status : ${e.orgCloudFormationStatus}`;let d,g,A=!1,S=!1,p=!1;if(e.orgRootOuId)if(t+="\n\nAWS ORGANIZATION TOP-LEVEL ORGANIZATION UNITS\n",t+="\n  List of Organization's top-level OUs and AWS accounts:",e.orgOuInfo&&e.orgOuInfo.length>0)for(const n of e.orgOuInfo)if("suspended"===n.name?.toLowerCase()&&(g=!0),"transitional"===n.name?.toLowerCase()&&(d=!0),"workloads"===n.name?.toLowerCase()&&(S=!0),"security"===n.name?.toLowerCase()&&(p=!0),"infrastructure"===n.name?.toLowerCase()&&(A=!0),t+=`\n    Organizational Unit: ${n.name}`,t+=`\n      Organizational Unit Id: ${n.id}`,n.accounts&&n.accounts.length>0){t+="\n      AWS Accounts:";for(const e of n.accounts)t+=`\n        ${e.Name}`;t+="\n"}else t+="\n      AWS Accounts: None",t+="\n";else t+="\n  No top level OUs found.";if(t+="\n\nAWS ORGANIZATION MEMBER ACCOUNTS\n",e.orgMemberAccounts&&e.orgMemberAccounts.length>0)for(const n of e.orgMemberAccounts)t+=`\n  Account: ${n.accountName}`,t+=`\n  Account Email: ${n.accountEmail}\n`;else t+="No member accounts found which is amazing as this is running from one.";if(t+="\n\nAWS ORGANIZATION ENABLED SERVICES\n",t+="\n  The following AWS Services are enabled within your AWS Organization:",e.orgServices&&e.orgServices.length>0)for(const n of e.orgServices)t+=`\n    ${n.service}`;else t+="\n    No trusted access enabled in the AWS Organization";let h=!1,y=!1,w=!1,C=!1,v=!1,O=!1,E=!1,$=!1,b=!1;if(t+="\n\nAWS ORGANIZATION INTEGRATED SERVICE REGISTERED DELEGATED ADMINS\n",e.orgDelegatedAdminAccounts&&e.orgDelegatedAdminAccounts.length>0)for(const n of e.orgDelegatedAdminAccounts){if(t+=`\n  Account: ${n.accountName}`,n.services&&n.services.length>0){t+="\n  Delegated Services:";for(const e of n.services)t+=`\n    ${e.ServicePrincipal}`,"securityhub.amazonaws.com"===e.ServicePrincipal&&(y=!0),"guardduty.amazonaws.com"===e.ServicePrincipal&&(w=!0),"sso.amazonaws.com"===e.ServicePrincipal&&(h=!0),"config.amazonaws.com"===e.ServicePrincipal&&(C=!0),"access-analyzer.amazonaws.com"===e.ServicePrincipal&&(v=!0),"storage-lens.s3.amazonaws.com"===e.ServicePrincipal&&(O=!0),"ipam.amazonaws.com"===e.ServicePrincipal&&(E=!0),"account.amazonaws.com"===e.ServicePrincipal&&($=!0),"backup.amazonaws.com"===e.ServicePrincipal&&(b=!0)}t+="\n "}else t+="\n  No delegated admin accounts in AWS Organization";t+="\n\nMULTI-ACCOUNT STRATEGY TASKS:";let z="Multi-Account Strategy";if(t+=`\n  Review Account Email Addresses - ${z} - Review Account Email Addresses in AWS Organization`,!e.scpEnabled){const e={title:"Enable Service Control Policy",category:z,detail:"Enable Service Control Policy in AWS Organization"};n.push(e),t+=`\n  ${e.title} - ${e.category} - ${e.detail}`}if(!d){const e={title:"Deploy Transitional OU",category:z,detail:"Deploy Transitional OU in AWS Organization"};n.push(e),t+=`\n  ${e.title} - ${e.category} - ${e.detail}`}if(!g){const e={title:"Deploy Suspended OU",category:z,detail:"Deploy Suspended OU in AWS Organization"};n.push(e),t+=`\n  ${e.title} - ${e.category} - ${e.detail}`}if(!S){const e={title:"Deploy Workloads OU",category:z,detail:"Deploy Workloads OU in AWS Organization"};n.push(e),t+=`\n  ${e.title} - ${e.category} - ${e.detail}`}if(!p){const e={title:"Deploy Security OU",category:z,detail:"Deploy Security OU in AWS Organization"};n.push(e),t+=`\n  ${e.title} - ${e.category} - ${e.detail}`}if(!A){const e={title:"Deploy Infrastructure OU",category:z,detail:"Deploy Infrastructure OU in AWS Organization"};n.push(e),t+=`\n  ${e.title} - ${e.category} - ${e.detail}`}t+="\n\n*********************************************************",t+="\n                  LANDING ZONE",t+="\n*********************************************************",t+="\n\nAWS CONTROL TOWER\n",e.controlTowerRegion?(t+=`\n  Control Tower home region: ${e.controlTowerRegion}`,t+=`\n  Control Tower status: ${e.controlTowerStatus}`,t+=`\n  Control Tower Landing Zone version: ${e.controlTowerDeployedVersion}`,t+=`\n  Latest available version: ${e.controlTowerLatestAvailableVersion}`,t+=`\n  Drift Status: ${e.controlTowerDriftStatus}`):t+="\n  AWS Control Tower is not deployed in the AWS Organization",t+="\n\nLANDING ZONE TASKS:";const I="Landing Zone";if(void 0===e.controlTowerRegion){const e={title:"Deploy AWS Control Tower",category:I,detail:"Deploy AWS Control Tower in AWS Organization"};n.push(e),t+=`\n  ${e.title} - ${e.category} - ${e.detail}`}if("DRIFTED"===e.controlTowerDriftStatus){const e={title:"Fix drift in deployed landing zone",category:I,detail:"Fix drift in deployed landing zone"};n.push(e),t+=`\n  ${e.title} - ${e.category} - ${e.detail}`}if(e.controlTowerDeployedVersion!==e.controlTowerLatestAvailableVersion){const o={title:"Update AWS Control Tower to latest version",category:I,detail:`Update AWS Control Tower to version ${e.controlTowerLatestAvailableVersion}`};n.push(o),t+=`\n  ${o.title} - ${o.category} - ${o.detail}`}if(!e.orgServices||!e.orgServices.find((e=>"member.org.stacksets.cloudformation.amazonaws.com"===e.service))){const e={title:"Enable AWS CloudFormation",category:I,detail:"Enable AWS CloudFormation in AWS Organization"};n.push(e),t+=`\n  ${e.title} - ${e.category} - ${e.detail}`}t+="\n\n*********************************************************",t+="\n                    IDENTITY",t+="\n*********************************************************",e.idcInfo?(t+="\n\nAWS IAM IDENTITY CENTER\n",t+=`\n  IdC Region: ${e.idcInfo.region}`,t+=`\n  IdC ARN: ${e.idcInfo.arn}`,t+=`\n  IdC Instance Id: ${e.idcInfo.id}`):t+="\n\nAWS IAM IDENTITY CENTER NOT FOUND\n",t+="\n\nIDENTITY TASKS:";const T="Identity";if(!e.orgServices||!e.orgServices.find((e=>"sso.amazonaws.com"===e.service))){const e={title:"Enable AWS Single Sign-On",category:T,detail:"Enable AWS Single Sign-On in AWS Organization"};n.push(e),t+=`\n  ${e.title} - ${e.category} - ${e.detail}`}if(!h){const e={title:"Delegate administration to AWS IAM Identity Center",category:T,detail:"Delegate administration to AWS IAM Identity Center"};n.push(e),t+=`\n  ${e.title} - ${e.category} - ${e.detail}`}if(!e.scpEnabled){const e={title:"Enable AWS Single Sign-On",category:T,detail:"Enable AWS Single Sign-On in AWS Organization"};n.push(e),t+=`\n  ${e.title} - ${e.category} - ${e.detail}`}t+="\n\n*********************************************************",t+="\n                    SECURITY",t+="\n*********************************************************",t+="\n\nAWS SECURITY SERVICES ENABLED IN AWS ORGANIZATION:\n",e.orgServices&&e.orgServices.find((e=>"guardduty.amazonaws.com"===e.service))&&(t+="\n  AWS GuardDuty"),e.orgServices&&e.orgServices.find((e=>"securityhub.amazonaws.com"===e.service))&&(t+="\n  AWS Security Hub"),e.orgServices&&e.orgServices.find((e=>"access-analyzer.amazonaws.com"===e.service))&&(t+="\n  IAM Access Analyzer"),e.orgServices&&e.orgServices.find((e=>"macie.amazonaws.com"===e.service))&&(t+="\n  Macie"),e.orgServices&&e.orgServices.find((e=>"storage-lens.s3.amazonaws.com"===e.service))&&(t+="\n  Amazon S3 Storage Lens"),e.orgServices&&e.orgServices.find((e=>"inspector2.amazonaws.com"===e.service))&&(t+="\n  Amazon Inspector"),e.orgServices&&e.orgServices.find((e=>"cloudtrail.amazonaws.com"===e.service))&&(t+="\n  AWS CloudTrail"),e.orgServices&&e.orgServices.find((e=>"config.amazonaws.com"===e.service))&&(t+="\n  AWS Config"),t+="\n\nSECURITY TASKS:";const W="Security";if(!e.scpEnabled){const e={title:"Enable AWS Single Sign-On",category:W,detail:"Enable AWS Single Sign-On in AWS Organization"};n.push(e),t+=`\n  ${e.title} - ${e.category} - ${e.detail}`}if(!e.orgServices||!e.orgServices.find((e=>"guardduty.amazonaws.com"===e.service))){const e={title:"Delegate administration to AWS GuardDuty",category:W,detail:"Delegate administration to AWS GuardDuty"};n.push(e),t+=`\n  ${e.title} - ${e.category} - ${e.detail}`}if(!e.orgServices||!e.orgServices.find((e=>"securityhub.amazonaws.com"===e.service))){const e={title:"Delegate administration to AWS Security Hub",category:W,detail:"Delegate administration to AWS Security Hub"};n.push(e),t+=`\n  ${e.title} - ${e.category} - ${e.detail}`}if(!e.orgServices||!e.orgServices.find((e=>"access-analyzer.amazonaws.com"===e.service))){const e={title:"Delegate administration to AWS IAM Access Analyzer",category:W,detail:"Delegate administration to AWS IAM Access Analyzer"};n.push(e),t+=`\n  ${e.title} - ${e.category} - ${e.detail}`}if(!e.orgServices||!e.orgServices.find((e=>"cloudtrail.amazonaws.com"===e.service))){const e={title:"Delegate administration to AWS CloudTrail",category:W,detail:"Delegate administration to AWS CloudTrail"};n.push(e),t+=`\n  ${e.title} - ${e.category} - ${e.detail}`}if(!e.orgServices||!e.orgServices.find((e=>"config.amazonaws.com"===e.service))){const e={title:"Delegate administration to AWS Config",category:W,detail:"Delegate administration to AWS Config"};n.push(e),t+=`\n  ${e.title} - ${e.category} - ${e.detail}`}if(!y){const e={title:"Delegate administration of AWS Security Hub",category:W,detail:"Delegate administration to AWS Security Hub"};n.push(e),t+=`\n  ${e.title} - ${e.category} - ${e.detail}`}if(!w){const e={title:"Delegate administration of AWS GuardDuty",category:W,detail:"Delegate administration to AWS GuardDuty"};n.push(e),t+=`\n  ${e.title} - ${e.category} - ${e.detail}`}if(!C){const e={title:"Delegate administration of AWS Config",category:W,detail:"Delegate administration to AWS Config"};n.push(e),t+=`\n  ${e.title} - ${e.category} - ${e.detail}`}if(!v){const e={title:"Delegate administration of AWS IAM Access Analyzer",category:W,detail:"Delegate administration to AWS IAM Access Analyzer"};n.push(e),t+=`\n  ${e.title} - ${e.category} - ${e.detail}`}if(!O){const e={title:"Delegate administration of Amazon S3 Storage Lens",category:W,detail:"Delegate administration to Amazon S3 Storage Lens"};n.push(e),t+=`\n  ${e.title} - ${e.category} - ${e.detail}`}t+="\n\n*********************************************************",t+="\n                    NETWORK",t+="\n*********************************************************",t+="\n\nNETWORK TASKS:";const k="Network";if(!e.orgServices||!e.orgServices.find((e=>"guardduty.amazonaws.com"===e.service))){const e={title:"Enable AWS GuardDuty",category:k,detail:"Enable AWS GuardDuty in AWS Organization"};n.push(e),t+=`\n  ${e.title} - ${e.category} - ${e.detail}`}if(!e.orgServices||!e.orgServices.find((e=>"ipam.amazonaws.com"===e.service))){const e={title:"Enable AWS IPAM",category:k,detail:"Enable AWS IPAM in AWS Organization"};n.push(e),t+=`\n  ${e.title} - ${e.category} - ${e.detail}`}if(!e.orgServices||!e.orgServices.find((e=>"ram.amazonaws.com"===e.service))){const e={title:"Enable AWS Resource Access Manager",category:k,detail:"Enable AWS Resource Access Manager in AWS Organization"};n.push(e),t+=`\n  ${e.title} - ${e.category} - ${e.detail}`}if(!E){const e={title:"Delegate administration of AWS IPAM",category:k,detail:"Delegate administration to AWS IPAM"};n.push(e),t+=`\n  ${e.title} - ${e.category} - ${e.detail}`}if(!e.scpEnabled){const e={title:"Enable AWS Service Control Policy",category:k,detail:"Enable AWS Service Control Policy in AWS Organization"};n.push(e),t+=`\n  ${e.title} - ${e.category} - ${e.detail}`}t+="\n\n*********************************************************",t+="\n                  OBSERVABILITY",t+="\n*********************************************************",t+="\n\nOBSERVABILITY TASKS:";const D="Observability";if(!e.orgServices||!e.orgServices.find((e=>"account.amazonaws.com"===e.service))){const e={title:"Enable AWS Account",category:D,detail:"Enable AWS Account in AWS Organization"};n.push(e),t+=`\n  ${e.title} - ${e.category} - ${e.detail}`}if(!$){const e={title:"Delegate administration of AWS Account",category:D,detail:"Delegate administration to AWS Account"};n.push(e),t+=`\n  ${e.title} - ${e.category} - ${e.detail}`}t+="\n\n*********************************************************",t+="\n               BACKUP AND RECOVERY",t+="\n*********************************************************",t+="\n\nBACKUP AND RECOVERY TASKS:";const N="Backup and Recovery";if(!e.orgServices||!e.orgServices.find((e=>"backup.amazonaws.com"===e.service))){const e={title:"Enable AWS Backup",category:N,detail:"Enable AWS Backup in AWS Organization"};n.push(e),t+=`\n  ${e.title} - ${e.category} - ${e.detail}`}if(!b){const e={title:"Delegate administration of AWS Backup",category:N,detail:"Delegate administration to AWS Backup"};n.push(e),t+=`\n  ${e.title} - ${e.category} - ${e.detail}`}if(!e.backupPolicyEnabled){const e={title:"Enable AWS Backup Policy",category:N,detail:"Enable AWS Backup Policy in AWS Organization"};n.push(e),t+=`\n  ${e.title} - ${e.category} - ${e.detail}`}if(!e.scpEnabled){const e={title:"Enable AWS Service Control Policy",category:N,detail:"Enable AWS Service Control Policy in AWS Organization"};n.push(e),t+=`\n  ${e.title} - ${e.category} - ${e.detail}`}return t+="\n\n\n  END REVIEW",console.log("compiling report..."),console.log("saving report to ./cfat/cfat.txt..."),u.appendFileSync("./cfat.txt",t),n}(d);console.log("cloud foundation assessment complete. Access your report at ./cfat/cfat.txt"),console.log("assessment summary checks written to ./cfat/cfat-checks.csv"),async function(e){let n='"Summary", "Description", "Status" \r\n';for(const t of e)n+=`"cfat - ${t.category} - ${t.title}", "${t.detail}", "Open" \r\n`;u.writeFileSync("./jira-import.csv",n)}(We),await async function(e){let n='"Task", "Status" \r\n';const t=new Set;for(const n of e){const e=n.detail??"UNDEFINED";"UNDEFINED"!==e&&t.add(e)}const o=Array.from(t);for(const e of o)n+=`"cfat - ${e}", "Not Started" \r\n`;u.writeFileSync("./asana-import.csv",n)}(We),await async function(){try{const e=u.createWriteStream(A.join(process.cwd(),"assessment.zip")),n=S("zip",{zlib:{level:9}});n.pipe(e),n.file(A.join(process.cwd(),"cfat.txt"),{name:"cfat.txt"}),n.file(A.join(process.cwd(),"cfat-checks.csv"),{name:"cfat-checks.csv"}),n.file(A.join(process.cwd(),"asana-import.csv"),{name:"asana-import.csv"}),n.file(A.join(process.cwd(),"jira-import.csv"),{name:"jira-import.csv"}),n.finalize(),console.log("Zip file created successfully!")}catch(e){console.error("Error creating zip file:",e)}}(),console.log("assessment files zipped to ./cfat/assessment.zip")})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,