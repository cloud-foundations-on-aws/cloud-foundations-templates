(()=>{"use strict";const n=require("@aws-sdk/client-sts"),e=require("@aws-sdk/client-organizations"),i=require("@aws-sdk/client-iam"),o=require("@aws-sdk/client-cloudformation"),a=require("@aws-sdk/client-sso-admin"),t=require("@aws-sdk/client-ec2"),s=require("@aws-sdk/client-cloudtrail"),c=require("@aws-sdk/client-config-service"),r=require("@aws-sdk/client-controltower"),l=require("@aws-sdk/client-cost-and-usage-report-service");async function d(n,e,i){return`${e} - Task ${n} - Deploy top-level OU ${i}.`}async function p(n,e,i){return`${e} - Task ${n} - Remove IAM user ${i}`}async function u(n,e,i,o){return`${e} - Task ${n} - Remove IAM user ${i} API key: ${o}`}async function S(n,e,i){return`${e} - Task ${n} - Delete VPC in the ${i} region.`}async function y(n,e,i){return`${e} - Task ${n} - Delete VPC in the ${i} region.`}async function g(n,e,i){return`${e} - Task ${n} - Enable the AWS service ${i} within your AWS Organization`}async function f(n,e,i){return`${e} - Task ${n} - Delegate the AWS service ${i} within your AWS Organization to a member account`}async function A(n,e,i){return`${e} - Task ${n} - Enable the policy type ${i} within your AWS Organization.`}const w=require("fs");(async()=>{let m=[];const C="./Pathfinder.txt";let F=new Date;const h=process.env.AWS_REGION||"us-east-1",E=await async function(){const n=new t.EC2Client({region:"us-east-1"});try{const e=new t.DescribeRegionsCommand({}),i=await n.send(e),o=[];for(const n of i.Regions||[])o.push(n.RegionName||"");return o}catch(n){return console.error("Error retrieving regions:",n),[]}finally{n.destroy()}}();console.log("Discovering your AWS environment....");const I=await(async i=>{const o=new e.OrganizationsClient({region:i});let a=!1,t=!1;try{const s=await async function(e){const i=new n.STSClient({region:e});try{const e=new n.GetCallerIdentityCommand({});return(await i.send(e)).Account}catch(n){throw console.error("Error getting account ID:",n),n}}(i);if(s){const n=new e.DescribeOrganizationCommand({}),i=await o.send(n);if(i.Organization?.MasterAccountId){const n=i.Organization?.MasterAccountId;n==s?(t=!0,a=!0):a=!0}else a=!1}}catch(n){console.error("Error:",n)}finally{o.destroy()}return{isInOrganization:a,isManagementAccount:t}})(h);let O,T,v=!1,N=!1,$=!1,R=!1,b=!0,z=!1,D=!1,M=!1,W=!0,P=!1,L=!1,k=!1,U=!1,q=!1,G=!1,V=!1,K=!1,Z=!1,B=!1,Y=!1,x=!1,H=!1,_=!1,J=!1,j=!1,Q=!1,X=!1;w.writeFileSync(C,"Cloud Foundations - Assessment Tool"),w.appendFileSync(C,`\nGenerated on: ${F.toUTCString()} \n\n`),w.appendFileSync(C,"\n*********************************************************"),w.appendFileSync(C,"\n                   MANAGEMENT ACCOUNT"),w.appendFileSync(C,"\n*********************************************************"),w.appendFileSync(C,"\n\nAWS ACCOUNT TYPE\n");let nn=!0;I&&(console.dir(I,{depth:null,colors:!0}),w.appendFileSync(C,`\n  Is in AWS Organization: ${I.isInOrganization}`),w.appendFileSync(C,`\n  Assessing AWS Management Account: ${I.isManagementAccount}`),void 0===I.isManagementAccount&&(I.isManagementAccount=!1),nn=I.isManagementAccount),console.log("Discovering IAM Users....");const en=await(async()=>{const n=new i.IAMClient({region:"us-east-1"}),e=[];try{const o=new i.ListUsersCommand({}),a=await n.send(o);for(const o of a.Users||[]){const a=o.UserName||"",t=new i.ListAccessKeysCommand({UserName:a}),s=(await n.send(t)).AccessKeyMetadata||[];if(s.length>0)for(const o of s){const t=o.AccessKeyId||"",s=new i.GetAccessKeyLastUsedCommand({AccessKeyId:t}),c=await n.send(s),r={userName:a,accessKeyId:t,lastUsed:c&&c.AccessKeyLastUsed&&`${c.AccessKeyLastUsed.LastUsedDate}`||"Not available"};e.push(r)}else{const n={userName:a};e.push(n)}}}catch(n){console.error("Error:",n)}finally{n.destroy()}return e})();if(w.appendFileSync(C,"\n\nIAM USERS CHECK\n"),en&&en.length>0){console.dir(en,{depth:null,colors:!0});for(const n of en)w.appendFileSync(C,`\n  IAM User: ${n.userName}`),n.accessKeyId&&w.appendFileSync(C,`\n    User API Key ID: ${n.accessKeyId}`),w.appendFileSync(C,"\n")}else w.appendFileSync(C,"\n  No IAM Users found."),R=!0;console.log("Discovering EC2 instances across all AWS Regions....");const on=await async function(n){let e=[];for(const i of n){const n=new t.EC2Client({region:i}),o=new t.DescribeInstancesCommand({});try{const a=await n.send(o);if(a.Reservations)if(a.Reservations.length>0){const n={region:i,ec2Found:!0};e.push(n)}else{const n={region:i,ec2Found:!1};e.push(n)}else{const n={region:i,ec2Found:!1};e.push(n)}}catch(n){console.log(`Error checking instance: ${n}`)}finally{n.destroy()}}return e}(E);if(w.appendFileSync(C,"\n\nEC2 INSTANCE CHECK\n"),on&&on.find((n=>!0===n.ec2Found))){console.dir(on,{depth:null,colors:!0});for(const n of on)P=!1,n.ec2Found&&w.appendFileSync(C,`\n  ${n.region} - found EC2 Instance(s).`)}else w.appendFileSync(C,"\n  No EC2 instances found.");console.log("Discovering VPCs across all AWS Regions....");const an=await async function(n){let e=[];for(const i of n){const n=new t.EC2Client({region:i}),o=new t.DescribeVpcsCommand({});try{const a=await n.send(o);if(a.Vpcs)if(a.Vpcs.length>0){const n={region:i,vpcFound:!0};e.push(n)}else{const n={region:i,vpcFound:!1};e.push(n)}else{const n={region:i,vpcFound:!1};e.push(n)}}catch(n){console.log(`Error checking instance: ${n}`)}finally{n.destroy()}}return e}(E);if(w.appendFileSync(C,"\n\nVPC CHECK\n"),an&&an.length>0){W=!1,console.dir(an,{depth:null,colors:!0});for(const n of an)n.vpcFound&&w.appendFileSync(C,`\n  ${n.region} - found VPC(s).`)}else w.appendFileSync(C,"\n  No VPCs found.");console.log("Discovering AWS Config configurations across all AWS Regions....");const tn=await async function(n){let e=[];for(const i of n){const n=new s.CloudTrailClient({region:i}),o=new s.DescribeTrailsCommand({});try{const a=await n.send(o);if(a.trailList)for(const n of a.trailList){let o={};o=n.HomeRegion==i?{region:i,trailFound:!0,isOrgTrail:n.IsMultiRegionTrail,isMultiRegion:n.IsMultiRegionTrail}:{region:i,trailFound:!1},e.push(o)}}catch(n){console.log(`Error checking instance: ${n}`)}finally{n.destroy()}}return e}(E),sn=await async function(n){let e=[];for(const i of n){const n=new c.ConfigServiceClient({region:i});let o={region:i,configRecorderFound:!1,configDeliveryChannelFound:!1};try{const i=await n.send(new c.DescribeConfigurationRecorderStatusCommand({}));0!==i.ConfigurationRecordersStatus?.length&&(o.configRecorderFound=!0);const a=await n.send(new c.DescribeDeliveryChannelsCommand({}));0!==a.DeliveryChannels?.length&&(o.configDeliveryChannelFound=!0),e.push(o)}catch(n){console.error(`Error checking AWS Config in ${i}:`,n)}finally{n.destroy()}}return e}(E);if(w.appendFileSync(C,"\n\nAWS CONFIG CHECK\n"),sn&&sn.find((n=>!0===n.configRecorderFound))){console.dir(sn,{depth:null,colors:!0});for(const n of sn)n.configRecorderFound&&(L=!0,w.appendFileSync(C,`\n  ${n.region} - Config Recorder found`)),n.configDeliveryChannelFound&&(k=!0,w.appendFileSync(C,`\n  ${n.region} - Config Delivery Channel found`))}else w.appendFileSync(C,"\n  No AWS Config resource discovered");if(I.isInOrganization&&I.isManagementAccount){const n=await async function(n){const i=new e.OrganizationsClient({region:n});let o={};try{const n=new e.DescribeOrganizationCommand({}),a=await i.send(n);a.Organization&&(o.id=a.Organization.Id??"",o.arn=a.Organization.Arn??"");const t=new e.ListRootsCommand({}),s=await i.send(t);s.Roots?o.rootOuId=s.Roots[0].Id:console.log("No info found for your AWS Organization.")}catch(n){console.error(`An error occurred: ${n}`)}finally{return i.destroy(),o}}("us-east-1");console.dir(n,{depth:null,colors:!0});const i=await(async n=>{const e=new l.CostAndUsageReportServiceClient({region:n});let i=!1;try{const n={},o=new l.DescribeReportDefinitionsCommand(n),a=await e.send(o);return a.ReportDefinitions&&a.ReportDefinitions.length>0&&(i=!0),{isLegacyCurSetup:i}}catch(n){return console.error(`Error: ${n}`),i=!1,{isLegacyCurSetup:i}}finally{e.destroy()}})("us-east-1"),t=await async function(n){const i=new e.OrganizationsClient({region:n});let o={scpEnabled:!1,tagPolicyEnabled:!1,backupPolicyEnabled:!1};try{const n={},a=new e.ListRootsCommand(n),t=await i.send(a);if(t.Roots&&t.Roots[0].PolicyTypes)for(const n of t.Roots[0].PolicyTypes)"SERVICE_CONTROL_POLICY"==n.Type&&"ENABLED"==n.Status&&(o.scpEnabled=!0),"TAG_POLICY"==n.Type&&"ENABLED"==n.Status&&(o.tagPolicyEnabled=!0),"BACKUP_POLICY"==n.Type&&"ENABLED"==n.Status&&(o.backupPolicyEnabled=!0)}catch(n){console.error(`An error occurred: ${n}`)}finally{return i.destroy(),o}}("us-east-1");console.dir(t,{depth:null,colors:!0});const s=await async function(n){const i=[],o=new e.OrganizationsClient({region:n});try{const n=new e.ListAWSServiceAccessForOrganizationCommand({}),a=await o.send(n);if(a.EnabledServicePrincipals&&a.EnabledServicePrincipals.length>0){a.EnabledServicePrincipals;for(const n of a.EnabledServicePrincipals){const e={service:n.ServicePrincipal??""};i.push(e)}}}catch(n){console.error("Error checking service access:",n)}finally{return o.destroy(),i}}("us-east-1");console.dir(s,{depth:null,colors:!0});const c=await async function(n){let e={status:"disabled"};const i=new o.CloudFormationClient({region:n});try{const n={},a=new o.DescribeOrganizationsAccessCommand(n),t=await i.send(a);e.status=t.Status??"disabled"}catch(n){console.log(`Error: ${n}`)}finally{return i.destroy(),e}}(h);console.dir(c,{depth:null,colors:!0});const m=await async function(n){let e={};const i=new r.ControlTowerClient({region:n});try{const n=new r.ListLandingZonesCommand({}),o=await i.send(n);if(console.log(JSON.stringify(o.landingZones,null,2)),o.landingZones&&o.landingZones.length>0){const n={landingZoneIdentifier:o.landingZones[0].arn},i=o.landingZones[0].arn?.toString().split(":")[3]??"";if(i){e.controlTowerRegion=i;const o=new r.ControlTowerClient({region:i}),a=new r.GetLandingZoneCommand(n),t=await o.send(a);t.landingZone&&(console.log(JSON.stringify(t.landingZone,null,2)),e.status=t.landingZone.status,e.latestAvailableVersion=t.landingZone.latestAvailableVersion,e.deployedVersion=t.landingZone.version,e.driftStatus=t.landingZone.driftStatus?.status)}}}catch(e){console.error(`Error checking Control Tower in ${n}:`,e)}finally{i.destroy()}return e}(h),F=await async function(n){let e={found:!1};for(const i of n){const n=new a.SSOAdminClient({region:i});try{const o={MaxResults:Number("100")},t=new a.ListInstancesCommand(o),s=await n.send(t);if(s.Instances&&s.Instances.length>0){const n=s.Instances[0];e.found=!0,e.region=i,e.arn=n.InstanceArn,e.id=n.IdentityStoreId;break}}catch(n){console.log(`Error looking for AWS Identity Center details in region ${i}`)}finally{n.destroy()}}return e}(E);console.dir(F,{depth:null,colors:!0});const I=await async function(){let n=[];const i=new e.OrganizationsClient({region:"us-east-1"});let o={};try{const a=new e.ListDelegatedAdministratorsCommand({}),t=await i.send(a);if(t.DelegatedAdministrators)for(const a of t.DelegatedAdministrators){const t={AccountId:a.Id},s=new e.ListDelegatedServicesForAccountCommand(t),c=await i.send(s);c.DelegatedServices&&(o={services:c.DelegatedServices,accountName:a.Name},n.push(o))}}catch(n){console.log("Error looking for delegated services.")}finally{i.destroy()}return n}();console.dir(I,{depth:null,colors:!0});const R=await async function(){let n=[];const i=new e.OrganizationsClient({region:"us-east-1"});Number("200");try{let o=await i.send(new e.ListAccountsCommand({}));if(o.Accounts&&o.Accounts.length>0){for(const e of o.Accounts){let i={accountName:e.Name,accountEmail:e.Email};n.push(i)}do{if(o.NextToken&&(o=await i.send(new e.ListAccountsCommand({NextToken:o.NextToken})),o.Accounts&&o.Accounts.length>0))for(const e of o.Accounts){let i={accountName:e.Name,accountEmail:e.Email};n.push(i)}}while(o.NextToken)}}catch(n){console.error("Error listing AWS accounts:",n)}finally{i.destroy()}return n}();console.dir(R,{depth:null,colors:!0}),F.arn&&(z=!0),w.appendFileSync(C,"\n\nMANAGEMENT ACCOUNT RECOMMENDED TASKS:");let W=1;const P="Management Account";if(en&&en.length>0)for(const n of en){const e=await p(W,P,n.userName);if(w.appendFileSync(C,`\n  ${e}`),W++,n.accessKeyId){const e=await u(W,P,n.userName,n.accessKeyId);w.appendFileSync(C,`\n  ${e}`),W++}}if(on&&on.find((n=>!0===n.ec2Found)))for(const n of on)if(n.ec2Found&&n.region){const e=await y(W,P,n.region);w.appendFileSync(C,`\n  ${e}`),W++}if(an&&an.length>0)for(const n of an)if(n.vpcFound&&n.region){const e=await S(W,P,n.region);w.appendFileSync(C,`\n  ${e}`),W++}if(w.appendFileSync(C,"\n\n*********************************************************"),w.appendFileSync(C,"\n                    GOVERNANCE"),w.appendFileSync(C,"\n*********************************************************"),w.appendFileSync(C,"\n\nAWS ORGANIZATION POLICY TYPES\n"),w.appendFileSync(C,`\n  Service Control Policies (SCP) enabled: ${t.scpEnabled}`),w.appendFileSync(C,`\n  Tag Policies enabled: ${t.tagPolicyEnabled}`),w.appendFileSync(C,`\n  Backup Policies enabled: ${t.backupPolicyEnabled}`),w.appendFileSync(C,"\n\nAWS ORGANIZATION CLOUDFORMATION\n"),w.appendFileSync(C,`\n  AWS CloudFormation Organization stack sets status : ${c.status}`),c&&(K=!0),w.appendFileSync(C,"\n\nCLOUDTRAIL CHECK\n"),tn&&tn.length>0){D=!0,console.dir(tn,{depth:null,colors:!0});for(const n of tn)n.trailFound&&(w.appendFileSync(C,`\n  CloudTrail found in ${n.region}`),w.appendFileSync(C,`\n    Is Organization Trail: ${n.isOrgTrail}`),w.appendFileSync(C,`\n    Is MultiRegion: ${n.isMultiRegion}`),w.appendFileSync(C,"\n"),n.isOrgTrail&&(M=!0))}else w.appendFileSync(C,"\n  No AWS CloudTrail resource discovered");w.appendFileSync(C,"\n\nGOVERNANCE SERVICES ENABLED IN AWS ORGANIZATION:\n"),s.find((n=>"cloudtrail.amazonaws.com"===n.service))&&(w.appendFileSync(C,"\n  AWS CloudTrail"),U=!0);let L=!1;s.find((n=>"config.amazonaws.com"===n.service))&&(w.appendFileSync(C,"\n  AWS Config"),L=!0),w.appendFileSync(C,"\n\nGOVERNANCE RECOMMENDED TASKS:");const k="Governance";let nn=1;if(s.find((n=>"cloudtrail.amazonaws.com"===n.service)))U=!0;else{const n=await g(nn,k,"AWS CloudTrail");w.appendFileSync(C,`\n  ${n}`),nn++}if(s.find((n=>"config.amazonaws.com"===n.service)))L=!0;else{const n=await g(nn,k,"AWS Config");w.appendFileSync(C,`\n  ${n}`),nn++}if(t.scpEnabled)G=!0;else{const n=await A(nn,k,"Service Control Policy");w.appendFileSync(C,`\n  ${n}`),nn++}if(t.tagPolicyEnabled)q=!0;else{const n=await A(nn,k,"Tag Policy");w.appendFileSync(C,`\n  ${n}`),nn++}if(t.backupPolicyEnabled)V=!0;else{const n=await A(nn,k,"Backup Policy");w.appendFileSync(C,`\n  ${n}`),nn++}w.appendFileSync(C,"\n\n*********************************************************"),w.appendFileSync(C,"\n                FINANCIAL MANAGEMENT"),w.appendFileSync(C,"\n*********************************************************"),w.appendFileSync(C,"\n\nLegacy CUR"),w.appendFileSync(C,`\n  Is legacy CUR setup: ${i.isLegacyCurSetup}`),w.appendFileSync(C,"\n\nCLOUD FINANCIAL MANAGEMENT RECOMMENDED TASKS:");let sn=1;const cn="Cloud Financial Management";if(!i.isLegacyCurSetup){const n=await async function(n,e){return`${e} - Task ${n} - Enable and create a Cost and Utilization Report (CUR) in the billing console.`}(sn,cn);w.appendFileSync(C,`\n  ${n}`)}if(w.appendFileSync(C,"\n\n*********************************************************"),w.appendFileSync(C,"\n                MULTI-ACCOUNT STRATEGY"),w.appendFileSync(C,"\n*********************************************************"),w.appendFileSync(C,"\n\nAWS ORGANIZATION DETAILS\n"),w.appendFileSync(C,`\n  AWS Organization Id: ${n.id}`),w.appendFileSync(C,`\n  AWS Organization ARN: ${n.arn}`),w.appendFileSync(C,`\n  AWS Organization Root OU Id: ${n.rootOuId}`),w.appendFileSync(C,"\n\nAWS ORGANIZATION CLOUDFORMATION\n"),w.appendFileSync(C,`\n  AWS CloudFormation Organization stack sets status : ${c.status}`),n.rootOuId){const i=await async function(n,i){const o=new e.OrganizationsClient({region:n});let a=[];try{const n=new e.ListOrganizationalUnitsForParentCommand({ParentId:i}),t=await o.send(n);if(t.OrganizationalUnits)for(const n of t.OrganizationalUnits){let i={id:n.Id,name:n.Name};const t=await o.send(new e.ListAccountsForParentCommand({ParentId:n.Id}));t.Accounts&&t.Accounts.length>0&&(i.accounts=t.Accounts),a.push(i)}}catch(n){return console.error("Error checking service access:",n),[]}finally{o.destroy()}return a}("us-east-1",n.rootOuId);if(console.dir(i,{depth:null,colors:!0}),w.appendFileSync(C,"\n\nAWS ORGANIZATION TOP-LEVEL ORGANIZATION UNITS\n"),w.appendFileSync(C,"\n  List of Organization's top-level OUs and AWS accounts:"),i&&i.length>0)for(const n of i)if("suspended"===n.name?.toLowerCase()&&(T=!0),"transitional"===n.name?.toLowerCase()&&(O=!0),"workloads"===n.name?.toLowerCase()&&(N=!0),"security"===n.name?.toLowerCase()&&($=!0),"infrastructure"===n.name?.toLowerCase()&&(v=!0),w.appendFileSync(C,`\n    Organizational Unit: ${n.name}`),w.appendFileSync(C,`\n      Organizational Unit Id: ${n.id}`),n.accounts&&n.accounts.length>0){w.appendFileSync(C,"\n      AWS Accounts:");for(const e of n.accounts)w.appendFileSync(C,`\n        ${e.Name}`);w.appendFileSync(C,"\n")}else w.appendFileSync(C,"\n      AWS Accounts: None"),w.appendFileSync(C,"\n");else w.appendFileSync(C,"\n  No top level OUs found.")}if(w.appendFileSync(C,"\n\nAWS ORGANIZATION MEMBER ACCOUNTS\n"),R&&R.length>0)for(const n of R)n.accountName&&("log archive"===n.accountName.toLowerCase()&&(Q=!0),"audit"===n.accountName.toLowerCase()&&(X=!0),"security tooling"===n.accountName.toLowerCase()&&(X=!0)),w.appendFileSync(C,`\n  Account: ${n.accountName}`),w.appendFileSync(C,`\n  Account Email: ${n.accountEmail}\n`);else w.appendFileSync(C,"No member accounts found which is amazing as this is running from one.");w.appendFileSync(C,"\n\nAWS ORGANIZATION ENABLED SERVICES\n"),w.appendFileSync(C,"\n  The following AWS Services are enabled within your AWS Organization:");for(const n of s)w.appendFileSync(C,`\n    ${n.service}`);let rn=!1,ln=!1,dn=!1,pn=!1,un=!1,Sn=!1,yn=!1,gn=!1,fn=!1;if(w.appendFileSync(C,"\n\nAWS ORGANIZATION INTEGRATED SERVICE REGISTERED DELEGATED ADMINS\n"),I&&I.length>0)for(const n of I){if(w.appendFileSync(C,`\n  Account: ${n.accountName}`),n.services&&n.services.length>0){w.appendFileSync(C,"\n  Delegated Services:");for(const e of n.services)w.appendFileSync(C,`\n    ${e.ServicePrincipal}`),"securityhub.amazonaws.com"===e.ServicePrincipal&&(ln=!0),"guardduty.amazonaws.com"===e.ServicePrincipal&&(dn=!0),"sso.amazonaws.com"===e.ServicePrincipal&&(rn=!0),"config.amazonaws.com"===e.ServicePrincipal&&(pn=!0),"access-analyzer.amazonaws.com"===e.ServicePrincipal&&(un=!0),"storage-lens.s3.amazonaws.com"===e.ServicePrincipal&&(Sn=!0),"ipam.amazonaws.com"===e.ServicePrincipal&&(yn=!0),"account.amazonaws.com"===e.ServicePrincipal&&(gn=!0),"backup.amazonaws.com"===e.ServicePrincipal&&(fn=!0)}w.appendFileSync(C,"\n ")}else w.appendFileSync(C,"\n  No delegated admin accounts in AWS Organization");w.appendFileSync(C,"\n\nMULTI-ACCOUNT STRATEGY RECOMMENDED TASKS:");let An=1,wn="Multi-Account Strategy";const mn=await async function(n,e){return`${e} - Task ${n} - Review and validate your email addresses and their domains for the root user administrator for management and all member accounts.`}(An,wn);if(w.appendFileSync(C,`\n  ${mn}`),An++,!t.scpEnabled){const n=await A(An,wn,"Service Control Policy");w.appendFileSync(C,`\n  ${n}`),An++}if(!O){const n=await d(An,wn,"Transitional");w.appendFileSync(C,`\n  ${n}`),An++}if(!T){const n=await d(An,wn,"Suspended");w.appendFileSync(C,`\n  ${n}`),An++}if(!N){const n=await d(An,wn,"Workloads");w.appendFileSync(C,`\n  ${n}`),An++}if(!$){const n=await d(An,wn,"Security");w.appendFileSync(C,`\n  ${n}`),An++}if(!v){const n=await d(An,wn,"Infrastructure");w.appendFileSync(C,`\n  ${n}`),An++}w.appendFileSync(C,"\n\n*********************************************************"),w.appendFileSync(C,"\n                  LANDING ZONE"),w.appendFileSync(C,"\n*********************************************************"),w.appendFileSync(C,"\n\nAWS CONTROL TOWER\n"),m.controlTowerRegion?(_=!0,console.dir(m,{depth:null,colors:!0}),w.appendFileSync(C,`\n  Control Tower home region: ${m.controlTowerRegion}`),w.appendFileSync(C,`\n  Control Tower status: ${m.status}`),w.appendFileSync(C,`\n  Control Tower Landing Zone version: ${m.deployedVersion}`),w.appendFileSync(C,`\n  Latest available version: ${m.latestAvailableVersion}`),w.appendFileSync(C,`\n  Drift Status: ${m.driftStatus}`)):w.appendFileSync(C,"\n  AWS Control Tower is not deployed in the AWS Organization"),w.appendFileSync(C,"\n\nLANDING ZONE RECOMMENDED TASKS:");let Cn=1;const Fn="Landing Zone";if(void 0===m.controlTowerRegion){const n=await async function(n,e){return`${e} - Task ${n} - Deploy AWS Control Tower in your home AWS Region.`}(Cn,Fn);w.appendFileSync(C,`\n  ${n}`),Cn++}if("DRIFTED"===m.driftStatus){const n=await async function(n,e){return`${e} - Task ${n} - Fix drift in deployed landing zone.`}(Cn,Fn);w.appendFileSync(C,`\n  ${n}`),Cn++}else J=!0;if(m.deployedVersion!==m.latestAvailableVersion){const n=m.deployedVersion??"",e=m.latestAvailableVersion??"",i=await async function(n,e,i,o){return`${e} - Task ${n} - Update your AWS Control Tower Landing Zone from ${i} to ${o}.`}(Cn,Fn,n,e);w.appendFileSync(C,`\n  ${i}`),Cn++}else j=!0;if(!s.find((n=>"member.org.stacksets.cloudformation.amazonaws.com"===n.service))){Z=!0;const n=await g(Cn,Fn,"AWS CloudFormation");w.appendFileSync(C,`\n  ${n}`),Cn++}w.appendFileSync(C,"\n\n*********************************************************"),w.appendFileSync(C,"\n                    IDENTITY"),w.appendFileSync(C,"\n*********************************************************"),w.appendFileSync(C,"\n\nAWS IAM IDENTITY CENTER\n"),w.appendFileSync(C,`\n  IdC Region: ${F.region}`),w.appendFileSync(C,`\n  IdC ARN: ${F.arn}`),w.appendFileSync(C,`\n  IdC Instance Id: ${F.id}`),w.appendFileSync(C,"\n\nIDENTITY RECOMMENDED TASKS:");let hn=1;const En="Identity";if(!s.find((n=>"sso.amazonaws.com"===n.service))){const n=await g(hn,En,"AWS IAM Identity Center");b=!1,w.appendFileSync(C,`\n  ${n}`),hn++}if(!rn){const n=await f(hn,En,"AWS IAM Identity Center");w.appendFileSync(C,`\n  ${n}`),hn++}if(!t.scpEnabled){const n=await A(hn,En,"Service Control Policy");w.appendFileSync(C,`\n  ${n}`),hn++}w.appendFileSync(C,"\n\n*********************************************************"),w.appendFileSync(C,"\n                    SECURITY"),w.appendFileSync(C,"\n*********************************************************"),w.appendFileSync(C,"\n\nAWS SECURITY SERVICES ENABLED IN AWS ORGANIZATION:\n"),s.find((n=>"guardduty.amazonaws.com"===n.service))&&(B=!0,w.appendFileSync(C,"\n  AWS GuardDuty")),s.find((n=>"securityhub.amazonaws.com"===n.service))&&(Y=!0,w.appendFileSync(C,"\n  AWS Security Hub")),s.find((n=>"access-analyzer.amazonaws.com"===n.service))&&(w.appendFileSync(C,"\n  IAM Access Analyzer"),x=!0),s.find((n=>"macie.amazonaws.com"===n.service))&&w.appendFileSync(C,"\n  Macie"),s.find((n=>"storage-lens.s3.amazonaws.com"===n.service))&&w.appendFileSync(C,"\n  Amazon S3 Storage Lens"),s.find((n=>"inspector2.amazonaws.com"===n.service))&&w.appendFileSync(C,"\n  Amazon Inspector"),s.find((n=>"cloudtrail.amazonaws.com"===n.service))&&w.appendFileSync(C,"\n  AWS CloudTrail"),s.find((n=>"config.amazonaws.com"===n.service))&&w.appendFileSync(C,"\n  AWS Config"),w.appendFileSync(C,"\n\nSECURITY RECOMMENDED TASKS:");let In=1;const On="Security";if(!t.scpEnabled){const n=await A(In,On,"Service Control Policy");w.appendFileSync(C,`\n  ${n}`),In++}if(!s.find((n=>"guardduty.amazonaws.com"===n.service))){const n=await g(In,On,"AWS GuardDuty");w.appendFileSync(C,`\n  ${n}`),In++}if(!s.find((n=>"securityhub.amazonaws.com"===n.service))){const n=await g(In,On,"AWS SecurityHub");w.appendFileSync(C,`\n  ${n}`),In++}if(!s.find((n=>"access-analyzer.amazonaws.com"===n.service))){const n=await g(In,On,"AWS IAM Access Analyzer");w.appendFileSync(C,`\n  ${n}`),In++}if(!s.find((n=>"cloudtrail.amazonaws.com"===n.service))){const n=await g(In,On,"AWS CloudTrail");w.appendFileSync(C,`\n  ${n}`),In++}if(!s.find((n=>"config.amazonaws.com"===n.service))){const n=await g(In,On,"AWS Config");w.appendFileSync(C,`\n  ${n}`),In++}if(!ln){const n=await f(In,On,"Security Hub");w.appendFileSync(C,`\n  ${n}`),In++}if(!dn){const n=await f(In,On,"GuardDuty");w.appendFileSync(C,`\n  ${n}`),In++}if(!pn){const n=await f(In,On,"AWS Config");w.appendFileSync(C,`\n  ${n}`),In++}if(!un){const n=await f(In,On,"AWS IAM Access Analyzer");w.appendFileSync(C,`\n  ${n}`),In++}if(!Sn){const n=await f(In,On,"S3 Storage Lens");w.appendFileSync(C,`\n  ${n}`),In++}w.appendFileSync(C,"\n\n*********************************************************"),w.appendFileSync(C,"\n                    NETWORK"),w.appendFileSync(C,"\n*********************************************************"),w.appendFileSync(C,"\n\nNETWORK RECOMMENDED TASKS:");let Tn=1;const vn="Network";if(!s.find((n=>"guardduty.amazonaws.com"===n.service))){const n=await g(Tn,vn,"AWS GuardDuty");w.appendFileSync(C,`\n  ${n}`),Tn++}if(!s.find((n=>"ipam.amazonaws.com"===n.service))){const n=await g(Tn,vn,"AWS IPAM");w.appendFileSync(C,`\n  ${n}`),Tn++}if(!s.find((n=>"ram.amazonaws.com"===n.service))){H=!0;const n=await g(Tn,vn,"AWS Resource Access Manager");w.appendFileSync(C,`\n  ${n}`),Tn++}if(!yn){const n=await f(Tn,vn,"AWS IPAM");w.appendFileSync(C,`\n  ${n}`),Tn++}if(!t.scpEnabled){const n=await A(Tn,vn,"Service Control Policy");w.appendFileSync(C,`\n  ${n}`),Tn++}w.appendFileSync(C,"\n\n*********************************************************"),w.appendFileSync(C,"\n                  OBSERVABILITY"),w.appendFileSync(C,"\n*********************************************************"),w.appendFileSync(C,"\n\nOBSERVABILITY RECOMMENDED TASKS:");let Nn=1;const $n="Observability";if(!s.find((n=>"account.amazonaws.com"===n.service))){const n=await g(Nn,$n,"Account Manager");w.appendFileSync(C,`\n  ${n}`),Nn++}if(!gn){const n=await f(Nn,$n,"Account Manager");w.appendFileSync(C,`\n  ${n}`),Nn++}w.appendFileSync(C,"\n\n*********************************************************"),w.appendFileSync(C,"\n               BACKUP AND RECOVERY"),w.appendFileSync(C,"\n*********************************************************"),w.appendFileSync(C,"\n\nBACKUP AND RECOVERY RECOMMENDED TASKS:");let Rn=1;const bn="Backup and Recovery";if(!s.find((n=>"backup.amazonaws.com"===n.service))){const n=await g(Rn,bn,"AWS Backup");w.appendFileSync(C,`\n  ${n}`),Rn++}if(!fn){const n=await f(Rn,bn,"AWS Backup");w.appendFileSync(C,`\n  ${n}`),Rn++}if(!t.backupPolicyEnabled){const n=await A(Rn,bn,"Backup Policy");w.appendFileSync(C,`\n  ${n}`),Rn++}if(!t.scpEnabled){const n=await A(Rn,bn,"Service Control Policy");w.appendFileSync(C,`\n  ${n}`),Rn++}}else if(I.isInOrganization&&!I.isManagementAccount){const n="\nWARNING: You are running Pathfinder from an account that is a member of your AWS Organization. Please run the solution from your AWS Management account.";console.warn(n),w.appendFileSync(C,n)}else{const n="\nWARNING: You are running Pathfinder from an account that not part of an AWS Organization. This account will be treated as a standalone account.";console.warn(n),w.appendFileSync(C,n)}w.appendFileSync(C,"\n\n\n  END REVIEW");let cn={title:"AWS Organization Exists",description:"AWS Organization is enabled.",pass:I.isInOrganization,required:!0,weight:6};m.push(cn);let rn={title:"Management account",description:"AWS Management account exists.",pass:nn,required:!0,weight:6};m.push(rn);const ln={title:"IAM Users",description:"IAM Users should not exist in Management Account.",pass:R,required:!1,weight:4};m.push(ln);const dn={title:"EC2 Instances",description:"EC2 Instances should not exist in Management Account.",pass:P,required:!1,weight:4};m.push(dn);const pn={title:"Management Account VPCs",description:"Management Account should not have any VPCs.",pass:W,required:!1,weight:4};m.push(pn);const un={title:"CloudTrail Trail",description:"CloudTrail should be enabled.",pass:D,required:!0,weight:6};m.push(un);const Sn={title:"CloudTrail Organization Service",description:"CloudTrail Organization Services should be enabled.",pass:U,required:!0,weight:6};m.push(Sn);const yn={title:"CloudTrail Organization Trail",description:"At least one CloudTrail Organization Trail should be enabled.",pass:M,required:!0,weight:6};m.push(yn);const gn={title:"Config Management Account",description:"Config Management Account should be enabled.",pass:L,required:!0,weight:6};m.push(gn);const fn={title:"Config Recorder Management Account",description:"Config Recorder Management Account should be enabled.",pass:k,required:!0,weight:6};m.push(fn);const An={title:"CloudFormation StackSets active",description:"CloudFormation StackSets should be activated in the CloudFormation console.",pass:K,required:!1,weight:5};m.push(An);const wn={title:"GuardDuty Organization Service",description:"GuardDuty Organization Services should be enabled.",pass:B,required:!1,weight:4};m.push(wn);const mn={title:"Resource Access Manager Organization Service",description:"Resource Access Manager Organization Services should be enabled.",pass:H,required:!1,weight:4};m.push(mn);const Cn={title:"Security Hub Organization Service",description:"SecurityHub Organization Services should be enabled.",pass:Y,required:!1,weight:4};m.push(Cn);const Fn={title:"IAM Access Analyzer Organization Service",description:"IAM Access Analyzer Organization Services should be enabled.",pass:x,required:!1,weight:4};m.push(Fn);m.push({title:"Config Organization Service",description:"Config Organization Services should be enabled.",pass:!1,required:!1,weight:4});const hn={title:"Top-level Infrastructure OU",description:"Top-level Infrastructure OU should exist.",pass:v,required:!1,weight:5};m.push(hn);const En={title:"Top-level Security OU",description:"Top-level Security OU should exist.",pass:$,required:!0,weight:6};m.push(En);const In={title:"Top-level Workloads OU",description:"Top-level Workloads OU should exist.",pass:N,required:!1,weight:5};m.push(In);const On={title:"IAM IdC Organization Service",description:"IAM Identity Center Organization Services should be enabled.",pass:b,required:!0,weight:6};m.push(On);const Tn={title:"IAM IdC Configured",description:"IAM Identity Center should be configured.",pass:z,required:!0,weight:6};m.push(Tn);const vn={title:"Service Control Policies Enabled",description:"Service Control Policy should be enabled.",pass:G,required:!0,weight:6};m.push(vn);const Nn={title:"Organization Tag Policy Enabled",description:"Tag Policy should be enabled.",pass:q,required:!0,weight:6};m.push(Nn);const $n={title:" Organization Backup Policy Enabled",description:"Backup Policy should be enabled.",pass:V,required:!1,weight:5};m.push($n);const Rn={title:"Control Tower Deployed",description:"Control Tower should be deployed.",pass:_,required:!0,weight:6};m.push(Rn);const bn={title:"Control Tower Latest Version",description:"Control Tower should be the latest version.",pass:j,required:!1,weight:5};m.push(bn);const zn={title:"Control Tower Not Drifted",description:"Control Tower should not be drifted.",pass:J,required:!0,weight:6};m.push(zn);const Dn={title:"Log Archive Account",description:"Log Archive Account should exist.",pass:Q,required:!0,weight:6};m.push(Dn);let Mn=0,Wn=0,Pn="PASS";console.log("-----------------------------"),console.log("cloud foundation assessment complete."),console.log("-----------------------------"),console.log("Failed Requirements:");for(const n of m)Wn+=n.weight,!0===n.required&&!1===n.pass&&(console.log(`FAILED: ${n.title}`),Pn="FAILED"),!0===n.pass&&(Mn+=n.weight);console.log(`Result: ${Pn}`),console.log(`Score: ${Mn} out of ${Wn}`),console.log("-----------------------------"),console.table(m)})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,